Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DOUBLE_QUOTE
    PRINT
    TRUE
    PERIOD
    AND
    FALSE
    SINGLE_QUOTE
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID NEWLINE hardware vars assign functions main
Rule 2     empty -> <empty>
Rule 3     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 4     camDeclaration -> empty
Rule 5     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 6     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 7     inputsDeclaration -> empty
Rule 8     inputsDeclaration -> INPUT pinList NEWLINE
Rule 9     outputsDeclaration -> empty
Rule 10    outputsDeclaration -> OUTPUT pinList NEWLINE
Rule 11    pwmDeclaration -> empty
Rule 12    pwmDeclaration -> PWM pinList NEWLINE
Rule 13    pinList -> C_INT COLON ID
Rule 14    pinList -> C_INT COLON ID COMMA pinList
Rule 15    vars -> tipo idList NEWLINE
Rule 16    idList -> ID
Rule 17    idList -> ID COMMA idList
Rule 18    tipo -> BOOL
Rule 19    tipo -> INT
Rule 20    tipo -> FLOAT
Rule 21    tipo -> CHAR
Rule 22    tipo -> STRING
Rule 23    tipo -> IMAGE
Rule 24    functions -> tipo ID LPAREN RPAREN NEWLINE block
Rule 25    functions -> tipo ID LPAREN tipo ID parameterList RPAREN NEWLINE block
Rule 26    functions -> VOID ID LPAREN RPAREN NEWLINE block
Rule 27    functions -> VOID ID LPAREN tipo ID parameterList RPAREN NEWLINE block
Rule 28    parameterList -> empty
Rule 29    parameterList -> COMMA tipo ID parameterList
Rule 30    assign -> ID EQUAL expression NEWLINE
Rule 31    main -> VOID MAIN LPAREN RPAREN NEWLINE block
Rule 32    main -> VOID MAIN LPAREN tipo ID parameterList RPAREN NEWLINE block
Rule 33    block -> empty
Rule 34    block -> TAB statement moreStatements
Rule 35    moreStatements -> empty
Rule 36    moreStatements -> NEWLINE TAB statement moreStatements
Rule 37    statement -> assign
Rule 38    statement -> condition
Rule 39    statement -> cycle
Rule 40    statement -> funct NEWLINE
Rule 41    condition -> IF expression COLON NEWLINE block
Rule 42    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 43    cycle -> WHILE expression COLON NEWLINE block
Rule 44    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 45    funct -> ID LPAREN RPAREN
Rule 46    funct -> ID LPAREN expression expressionList RPAREN
Rule 47    expressionList -> empty
Rule 48    expressionList -> COMMA expression expressionList
Rule 49    expression -> exp
Rule 50    expression -> exp compareToken exp
Rule 51    compareToken -> GREATER_THAN
Rule 52    compareToken -> LESS_THAN
Rule 53    compareToken -> LESS_EQUAL_THAN
Rule 54    compareToken -> GREATER_EQUAL_THAN
Rule 55    compareToken -> NOT_EQUAL_THAN
Rule 56    compareToken -> SAME_AS
Rule 57    exp -> term moreTerms
Rule 58    moreTerms -> empty
Rule 59    moreTerms -> PLUS term moreTerms
Rule 60    moreTerms -> MINUS term moreTerms
Rule 61    term -> factor moreFactors
Rule 62    moreFactors -> empty
Rule 63    moreFactors -> DIVIDE factor moreFactors
Rule 64    moreFactors -> TIMES factor moreFactors
Rule 65    moreFactors -> MOD factor moreFactors
Rule 66    factor -> LPAREN expression RPAREN
Rule 67    factor -> cvar
Rule 68    factor -> funct
Rule 69    cvar -> ID
Rule 70    cvar -> C_BOOL
Rule 71    cvar -> C_INT
Rule 72    cvar -> C_FLOAT
Rule 73    cvar -> C_CHAR
Rule 74    cvar -> C_STRING

Terminals, with rules where they appear

AND                  : 
BOOL                 : 18
CAM                  : 5 6
CHAR                 : 21
COLON                : 5 6 13 14 41 42 42 43 44
COMMA                : 14 17 29 48
C_BOOL               : 70
C_CHAR               : 73
C_FLOAT              : 72
C_INT                : 13 14 71
C_STRING             : 74
DIVIDE               : 63
DO                   : 44
DOUBLE_QUOTE         : 
ELSE                 : 42
EQUAL                : 30
FALSE                : 
FLOAT                : 20
GREATER_EQUAL_THAN   : 54
GREATER_THAN         : 51
ID                   : 1 5 6 13 14 16 17 24 25 25 26 27 27 29 30 32 45 46 69
IF                   : 41 42
IMAGE                : 23
INPUT                : 8
INT                  : 19
LESS_EQUAL_THAN      : 53
LESS_THAN            : 52
LPAREN               : 24 25 26 27 31 32 45 46 66
MAIN                 : 31 32
MINUS                : 60
MOD                  : 65
NEWLINE              : 1 5 6 8 10 12 15 24 25 26 27 30 31 32 36 40 41 42 42 43 44 44
NOT                  : 
NOT_EQUAL_THAN       : 55
OR                   : 
OUTPUT               : 10
PERIOD               : 
PICAM                : 6
PLUS                 : 59
PRINT                : 
PROGRAM              : 1
PWM                  : 12
RPAREN               : 24 25 26 27 31 32 45 46 66
SAME_AS              : 56
SINGLE_QUOTE         : 
STRING               : 22
TAB                  : 34 36
TIMES                : 64
TRUE                 : 
VOID                 : 26 27 31 32
WEBCAM               : 5
WHILE                : 43 44
error                : 

Nonterminals, with rules where they appear

assign               : 1 37
block                : 24 25 26 27 31 32 41 42 42 43 44
camDeclaration       : 3
compareToken         : 50
condition            : 38
cvar                 : 67
cycle                : 39
empty                : 4 7 9 11 28 33 35 47 58 62
exp                  : 49 50 50
expression           : 30 41 42 43 44 46 48 66
expressionList       : 46 48
factor               : 61 63 64 65
funct                : 40 68
functions            : 1
hardware             : 1
idList               : 15 17
inputsDeclaration    : 3
main                 : 1
moreFactors          : 61 63 64 65
moreStatements       : 34 36
moreTerms            : 57 59 60
outputsDeclaration   : 3
parameterList        : 25 27 29 32
pinList              : 8 10 12 14
program              : 0
pwmDeclaration       : 3
statement            : 34 36
term                 : 57 59 60
tipo                 : 15 24 25 25 27 29 32
vars                 : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID NEWLINE hardware vars assign functions main

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID NEWLINE hardware vars assign functions main

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . NEWLINE hardware vars assign functions main

    NEWLINE         shift and go to state 4


state 4

    (1) program -> PROGRAM ID NEWLINE . hardware vars assign functions main
    (3) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (4) camDeclaration -> . empty
    (5) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (2) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 2 (empty -> .)
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID NEWLINE hardware . vars assign functions main
    (15) vars -> . tipo idList NEWLINE
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 11
    vars                           shift and go to state 12

state 6

    (5) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 17
    PICAM           shift and go to state 18


state 7

    (3) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (7) inputsDeclaration -> . empty
    (8) inputsDeclaration -> . INPUT pinList NEWLINE
    (2) empty -> .

    INPUT           shift and go to state 20
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)

    inputsDeclaration              shift and go to state 19
    empty                          shift and go to state 21

state 8

    (4) camDeclaration -> empty .

    INPUT           reduce using rule 4 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 4 (camDeclaration -> empty .)
    PWM             reduce using rule 4 (camDeclaration -> empty .)
    BOOL            reduce using rule 4 (camDeclaration -> empty .)
    INT             reduce using rule 4 (camDeclaration -> empty .)
    FLOAT           reduce using rule 4 (camDeclaration -> empty .)
    CHAR            reduce using rule 4 (camDeclaration -> empty .)
    STRING          reduce using rule 4 (camDeclaration -> empty .)
    IMAGE           reduce using rule 4 (camDeclaration -> empty .)


state 9

    (21) tipo -> CHAR .

    ID              reduce using rule 21 (tipo -> CHAR .)


state 10

    (20) tipo -> FLOAT .

    ID              reduce using rule 20 (tipo -> FLOAT .)


state 11

    (15) vars -> tipo . idList NEWLINE
    (16) idList -> . ID
    (17) idList -> . ID COMMA idList

    ID              shift and go to state 23

    idList                         shift and go to state 22

state 12

    (1) program -> PROGRAM ID NEWLINE hardware vars . assign functions main
    (30) assign -> . ID EQUAL expression NEWLINE

    ID              shift and go to state 25

    assign                         shift and go to state 24

state 13

    (19) tipo -> INT .

    ID              reduce using rule 19 (tipo -> INT .)


state 14

    (23) tipo -> IMAGE .

    ID              reduce using rule 23 (tipo -> IMAGE .)


state 15

    (18) tipo -> BOOL .

    ID              reduce using rule 18 (tipo -> BOOL .)


state 16

    (22) tipo -> STRING .

    ID              reduce using rule 22 (tipo -> STRING .)


state 17

    (5) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 26


state 18

    (6) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 27


state 19

    (3) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (9) outputsDeclaration -> . empty
    (10) outputsDeclaration -> . OUTPUT pinList NEWLINE
    (2) empty -> .

    OUTPUT          shift and go to state 29
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)

    outputsDeclaration             shift and go to state 28
    empty                          shift and go to state 30

state 20

    (8) inputsDeclaration -> INPUT . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 32

    pinList                        shift and go to state 31

state 21

    (7) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 7 (inputsDeclaration -> empty .)
    PWM             reduce using rule 7 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 7 (inputsDeclaration -> empty .)
    INT             reduce using rule 7 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 7 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 7 (inputsDeclaration -> empty .)
    STRING          reduce using rule 7 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 7 (inputsDeclaration -> empty .)


state 22

    (15) vars -> tipo idList . NEWLINE

    NEWLINE         shift and go to state 33


state 23

    (16) idList -> ID .
    (17) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 16 (idList -> ID .)
    COMMA           shift and go to state 34


state 24

    (1) program -> PROGRAM ID NEWLINE hardware vars assign . functions main
    (24) functions -> . tipo ID LPAREN RPAREN NEWLINE block
    (25) functions -> . tipo ID LPAREN tipo ID parameterList RPAREN NEWLINE block
    (26) functions -> . VOID ID LPAREN RPAREN NEWLINE block
    (27) functions -> . VOID ID LPAREN tipo ID parameterList RPAREN NEWLINE block
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    VOID            shift and go to state 37
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    functions                      shift and go to state 35
    tipo                           shift and go to state 36

state 25

    (30) assign -> ID . EQUAL expression NEWLINE

    EQUAL           shift and go to state 38


state 26

    (5) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 39


state 27

    (6) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 40


state 28

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (11) pwmDeclaration -> . empty
    (12) pwmDeclaration -> . PWM pinList NEWLINE
    (2) empty -> .

    PWM             shift and go to state 42
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)

    pwmDeclaration                 shift and go to state 41
    empty                          shift and go to state 43

state 29

    (10) outputsDeclaration -> OUTPUT . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 32

    pinList                        shift and go to state 44

state 30

    (9) outputsDeclaration -> empty .

    PWM             reduce using rule 9 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (outputsDeclaration -> empty .)
    INT             reduce using rule 9 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 9 (outputsDeclaration -> empty .)
    STRING          reduce using rule 9 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (outputsDeclaration -> empty .)


state 31

    (8) inputsDeclaration -> INPUT pinList . NEWLINE

    NEWLINE         shift and go to state 45


state 32

    (13) pinList -> C_INT . COLON ID
    (14) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 46


state 33

    (15) vars -> tipo idList NEWLINE .

    ID              reduce using rule 15 (vars -> tipo idList NEWLINE .)


state 34

    (17) idList -> ID COMMA . idList
    (16) idList -> . ID
    (17) idList -> . ID COMMA idList

    ID              shift and go to state 23

    idList                         shift and go to state 47

state 35

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions . main
    (31) main -> . VOID MAIN LPAREN RPAREN NEWLINE block
    (32) main -> . VOID MAIN LPAREN tipo ID parameterList RPAREN NEWLINE block

    VOID            shift and go to state 48

    main                           shift and go to state 49

state 36

    (24) functions -> tipo . ID LPAREN RPAREN NEWLINE block
    (25) functions -> tipo . ID LPAREN tipo ID parameterList RPAREN NEWLINE block

    ID              shift and go to state 50


state 37

    (26) functions -> VOID . ID LPAREN RPAREN NEWLINE block
    (27) functions -> VOID . ID LPAREN tipo ID parameterList RPAREN NEWLINE block

    ID              shift and go to state 51


state 38

    (30) assign -> ID EQUAL . expression NEWLINE
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 63

state 39

    (5) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 65


state 40

    (6) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 66


state 41

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 42

    (12) pwmDeclaration -> PWM . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 32

    pinList                        shift and go to state 67

state 43

    (11) pwmDeclaration -> empty .

    BOOL            reduce using rule 11 (pwmDeclaration -> empty .)
    INT             reduce using rule 11 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 11 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 11 (pwmDeclaration -> empty .)
    STRING          reduce using rule 11 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 11 (pwmDeclaration -> empty .)


state 44

    (10) outputsDeclaration -> OUTPUT pinList . NEWLINE

    NEWLINE         shift and go to state 68


state 45

    (8) inputsDeclaration -> INPUT pinList NEWLINE .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    PWM             reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    BOOL            reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    INT             reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    CHAR            reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    STRING          reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)


state 46

    (13) pinList -> C_INT COLON . ID
    (14) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 69


state 47

    (17) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 17 (idList -> ID COMMA idList .)


state 48

    (31) main -> VOID . MAIN LPAREN RPAREN NEWLINE block
    (32) main -> VOID . MAIN LPAREN tipo ID parameterList RPAREN NEWLINE block

    MAIN            shift and go to state 70


state 49

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions main .

    $end            reduce using rule 1 (program -> PROGRAM ID NEWLINE hardware vars assign functions main .)


state 50

    (24) functions -> tipo ID . LPAREN RPAREN NEWLINE block
    (25) functions -> tipo ID . LPAREN tipo ID parameterList RPAREN NEWLINE block

    LPAREN          shift and go to state 71


state 51

    (26) functions -> VOID ID . LPAREN RPAREN NEWLINE block
    (27) functions -> VOID ID . LPAREN tipo ID parameterList RPAREN NEWLINE block

    LPAREN          shift and go to state 72


state 52

    (57) exp -> term . moreTerms
    (58) moreTerms -> . empty
    (59) moreTerms -> . PLUS term moreTerms
    (60) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 73
    empty                          shift and go to state 76

state 53

    (66) factor -> LPAREN . expression RPAREN
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 77

state 54

    (68) factor -> funct .

    DIVIDE          reduce using rule 68 (factor -> funct .)
    TIMES           reduce using rule 68 (factor -> funct .)
    MOD             reduce using rule 68 (factor -> funct .)
    PLUS            reduce using rule 68 (factor -> funct .)
    MINUS           reduce using rule 68 (factor -> funct .)
    GREATER_THAN    reduce using rule 68 (factor -> funct .)
    LESS_THAN       reduce using rule 68 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 68 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 68 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 68 (factor -> funct .)
    SAME_AS         reduce using rule 68 (factor -> funct .)
    COMMA           reduce using rule 68 (factor -> funct .)
    RPAREN          reduce using rule 68 (factor -> funct .)
    NEWLINE         reduce using rule 68 (factor -> funct .)
    COLON           reduce using rule 68 (factor -> funct .)


state 55

    (71) cvar -> C_INT .

    DIVIDE          reduce using rule 71 (cvar -> C_INT .)
    TIMES           reduce using rule 71 (cvar -> C_INT .)
    MOD             reduce using rule 71 (cvar -> C_INT .)
    PLUS            reduce using rule 71 (cvar -> C_INT .)
    MINUS           reduce using rule 71 (cvar -> C_INT .)
    GREATER_THAN    reduce using rule 71 (cvar -> C_INT .)
    LESS_THAN       reduce using rule 71 (cvar -> C_INT .)
    LESS_EQUAL_THAN reduce using rule 71 (cvar -> C_INT .)
    GREATER_EQUAL_THAN reduce using rule 71 (cvar -> C_INT .)
    NOT_EQUAL_THAN  reduce using rule 71 (cvar -> C_INT .)
    SAME_AS         reduce using rule 71 (cvar -> C_INT .)
    COLON           reduce using rule 71 (cvar -> C_INT .)
    NEWLINE         reduce using rule 71 (cvar -> C_INT .)
    RPAREN          reduce using rule 71 (cvar -> C_INT .)
    COMMA           reduce using rule 71 (cvar -> C_INT .)


state 56

    (70) cvar -> C_BOOL .

    DIVIDE          reduce using rule 70 (cvar -> C_BOOL .)
    TIMES           reduce using rule 70 (cvar -> C_BOOL .)
    MOD             reduce using rule 70 (cvar -> C_BOOL .)
    PLUS            reduce using rule 70 (cvar -> C_BOOL .)
    MINUS           reduce using rule 70 (cvar -> C_BOOL .)
    GREATER_THAN    reduce using rule 70 (cvar -> C_BOOL .)
    LESS_THAN       reduce using rule 70 (cvar -> C_BOOL .)
    LESS_EQUAL_THAN reduce using rule 70 (cvar -> C_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 70 (cvar -> C_BOOL .)
    NOT_EQUAL_THAN  reduce using rule 70 (cvar -> C_BOOL .)
    SAME_AS         reduce using rule 70 (cvar -> C_BOOL .)
    COLON           reduce using rule 70 (cvar -> C_BOOL .)
    NEWLINE         reduce using rule 70 (cvar -> C_BOOL .)
    RPAREN          reduce using rule 70 (cvar -> C_BOOL .)
    COMMA           reduce using rule 70 (cvar -> C_BOOL .)


state 57

    (74) cvar -> C_STRING .

    DIVIDE          reduce using rule 74 (cvar -> C_STRING .)
    TIMES           reduce using rule 74 (cvar -> C_STRING .)
    MOD             reduce using rule 74 (cvar -> C_STRING .)
    PLUS            reduce using rule 74 (cvar -> C_STRING .)
    MINUS           reduce using rule 74 (cvar -> C_STRING .)
    GREATER_THAN    reduce using rule 74 (cvar -> C_STRING .)
    LESS_THAN       reduce using rule 74 (cvar -> C_STRING .)
    LESS_EQUAL_THAN reduce using rule 74 (cvar -> C_STRING .)
    GREATER_EQUAL_THAN reduce using rule 74 (cvar -> C_STRING .)
    NOT_EQUAL_THAN  reduce using rule 74 (cvar -> C_STRING .)
    SAME_AS         reduce using rule 74 (cvar -> C_STRING .)
    COLON           reduce using rule 74 (cvar -> C_STRING .)
    NEWLINE         reduce using rule 74 (cvar -> C_STRING .)
    RPAREN          reduce using rule 74 (cvar -> C_STRING .)
    COMMA           reduce using rule 74 (cvar -> C_STRING .)


state 58

    (73) cvar -> C_CHAR .

    DIVIDE          reduce using rule 73 (cvar -> C_CHAR .)
    TIMES           reduce using rule 73 (cvar -> C_CHAR .)
    MOD             reduce using rule 73 (cvar -> C_CHAR .)
    PLUS            reduce using rule 73 (cvar -> C_CHAR .)
    MINUS           reduce using rule 73 (cvar -> C_CHAR .)
    GREATER_THAN    reduce using rule 73 (cvar -> C_CHAR .)
    LESS_THAN       reduce using rule 73 (cvar -> C_CHAR .)
    LESS_EQUAL_THAN reduce using rule 73 (cvar -> C_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 73 (cvar -> C_CHAR .)
    NOT_EQUAL_THAN  reduce using rule 73 (cvar -> C_CHAR .)
    SAME_AS         reduce using rule 73 (cvar -> C_CHAR .)
    COLON           reduce using rule 73 (cvar -> C_CHAR .)
    NEWLINE         reduce using rule 73 (cvar -> C_CHAR .)
    RPAREN          reduce using rule 73 (cvar -> C_CHAR .)
    COMMA           reduce using rule 73 (cvar -> C_CHAR .)


state 59

    (72) cvar -> C_FLOAT .

    DIVIDE          reduce using rule 72 (cvar -> C_FLOAT .)
    TIMES           reduce using rule 72 (cvar -> C_FLOAT .)
    MOD             reduce using rule 72 (cvar -> C_FLOAT .)
    PLUS            reduce using rule 72 (cvar -> C_FLOAT .)
    MINUS           reduce using rule 72 (cvar -> C_FLOAT .)
    GREATER_THAN    reduce using rule 72 (cvar -> C_FLOAT .)
    LESS_THAN       reduce using rule 72 (cvar -> C_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 72 (cvar -> C_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 72 (cvar -> C_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 72 (cvar -> C_FLOAT .)
    SAME_AS         reduce using rule 72 (cvar -> C_FLOAT .)
    COLON           reduce using rule 72 (cvar -> C_FLOAT .)
    NEWLINE         reduce using rule 72 (cvar -> C_FLOAT .)
    RPAREN          reduce using rule 72 (cvar -> C_FLOAT .)
    COMMA           reduce using rule 72 (cvar -> C_FLOAT .)


state 60

    (49) expression -> exp .
    (50) expression -> exp . compareToken exp
    (51) compareToken -> . GREATER_THAN
    (52) compareToken -> . LESS_THAN
    (53) compareToken -> . LESS_EQUAL_THAN
    (54) compareToken -> . GREATER_EQUAL_THAN
    (55) compareToken -> . NOT_EQUAL_THAN
    (56) compareToken -> . SAME_AS

    COMMA           reduce using rule 49 (expression -> exp .)
    RPAREN          reduce using rule 49 (expression -> exp .)
    COLON           reduce using rule 49 (expression -> exp .)
    NEWLINE         reduce using rule 49 (expression -> exp .)
    GREATER_THAN    shift and go to state 83
    LESS_THAN       shift and go to state 84
    LESS_EQUAL_THAN shift and go to state 80
    GREATER_EQUAL_THAN shift and go to state 79
    NOT_EQUAL_THAN  shift and go to state 82
    SAME_AS         shift and go to state 81

    compareToken                   shift and go to state 78

state 61

    (61) term -> factor . moreFactors
    (62) moreFactors -> . empty
    (63) moreFactors -> . DIVIDE factor moreFactors
    (64) moreFactors -> . TIMES factor moreFactors
    (65) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 87
    MOD             shift and go to state 89
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 85
    empty                          shift and go to state 88

state 62

    (67) factor -> cvar .

    DIVIDE          reduce using rule 67 (factor -> cvar .)
    TIMES           reduce using rule 67 (factor -> cvar .)
    MOD             reduce using rule 67 (factor -> cvar .)
    PLUS            reduce using rule 67 (factor -> cvar .)
    MINUS           reduce using rule 67 (factor -> cvar .)
    GREATER_THAN    reduce using rule 67 (factor -> cvar .)
    LESS_THAN       reduce using rule 67 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 67 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 67 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 67 (factor -> cvar .)
    SAME_AS         reduce using rule 67 (factor -> cvar .)
    COMMA           reduce using rule 67 (factor -> cvar .)
    RPAREN          reduce using rule 67 (factor -> cvar .)
    NEWLINE         reduce using rule 67 (factor -> cvar .)
    COLON           reduce using rule 67 (factor -> cvar .)


state 63

    (30) assign -> ID EQUAL expression . NEWLINE

    NEWLINE         shift and go to state 90


state 64

    (69) cvar -> ID .
    (45) funct -> ID . LPAREN RPAREN
    (46) funct -> ID . LPAREN expression expressionList RPAREN

    DIVIDE          reduce using rule 69 (cvar -> ID .)
    TIMES           reduce using rule 69 (cvar -> ID .)
    MOD             reduce using rule 69 (cvar -> ID .)
    PLUS            reduce using rule 69 (cvar -> ID .)
    MINUS           reduce using rule 69 (cvar -> ID .)
    GREATER_THAN    reduce using rule 69 (cvar -> ID .)
    LESS_THAN       reduce using rule 69 (cvar -> ID .)
    LESS_EQUAL_THAN reduce using rule 69 (cvar -> ID .)
    GREATER_EQUAL_THAN reduce using rule 69 (cvar -> ID .)
    NOT_EQUAL_THAN  reduce using rule 69 (cvar -> ID .)
    SAME_AS         reduce using rule 69 (cvar -> ID .)
    COLON           reduce using rule 69 (cvar -> ID .)
    NEWLINE         reduce using rule 69 (cvar -> ID .)
    RPAREN          reduce using rule 69 (cvar -> ID .)
    COMMA           reduce using rule 69 (cvar -> ID .)
    LPAREN          shift and go to state 91


state 65

    (5) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 66

    (6) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 67

    (12) pwmDeclaration -> PWM pinList . NEWLINE

    NEWLINE         shift and go to state 92


state 68

    (10) outputsDeclaration -> OUTPUT pinList NEWLINE .

    PWM             reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    BOOL            reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    INT             reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    CHAR            reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    STRING          reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)


state 69

    (13) pinList -> C_INT COLON ID .
    (14) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 13 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 93


state 70

    (31) main -> VOID MAIN . LPAREN RPAREN NEWLINE block
    (32) main -> VOID MAIN . LPAREN tipo ID parameterList RPAREN NEWLINE block

    LPAREN          shift and go to state 94


state 71

    (24) functions -> tipo ID LPAREN . RPAREN NEWLINE block
    (25) functions -> tipo ID LPAREN . tipo ID parameterList RPAREN NEWLINE block
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    RPAREN          shift and go to state 95
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 96

state 72

    (26) functions -> VOID ID LPAREN . RPAREN NEWLINE block
    (27) functions -> VOID ID LPAREN . tipo ID parameterList RPAREN NEWLINE block
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    RPAREN          shift and go to state 97
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 98

state 73

    (57) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 57 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 57 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 57 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 57 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 57 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 57 (exp -> term moreTerms .)
    RPAREN          reduce using rule 57 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 57 (exp -> term moreTerms .)
    COLON           reduce using rule 57 (exp -> term moreTerms .)
    COMMA           reduce using rule 57 (exp -> term moreTerms .)


state 74

    (59) moreTerms -> PLUS . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 99
    funct                          shift and go to state 54
    factor                         shift and go to state 61
    cvar                           shift and go to state 62

state 75

    (60) moreTerms -> MINUS . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 100
    funct                          shift and go to state 54
    factor                         shift and go to state 61
    cvar                           shift and go to state 62

state 76

    (58) moreTerms -> empty .

    GREATER_THAN    reduce using rule 58 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 58 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 58 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 58 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 58 (moreTerms -> empty .)
    SAME_AS         reduce using rule 58 (moreTerms -> empty .)
    NEWLINE         reduce using rule 58 (moreTerms -> empty .)
    RPAREN          reduce using rule 58 (moreTerms -> empty .)
    COMMA           reduce using rule 58 (moreTerms -> empty .)
    COLON           reduce using rule 58 (moreTerms -> empty .)


state 77

    (66) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 101


state 78

    (50) expression -> exp compareToken . exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 102
    factor                         shift and go to state 61
    cvar                           shift and go to state 62

state 79

    (54) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 54 (compareToken -> GREATER_EQUAL_THAN .)


state 80

    (53) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 53 (compareToken -> LESS_EQUAL_THAN .)


state 81

    (56) compareToken -> SAME_AS .

    LPAREN          reduce using rule 56 (compareToken -> SAME_AS .)
    ID              reduce using rule 56 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 56 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 56 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 56 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 56 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 56 (compareToken -> SAME_AS .)


state 82

    (55) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 55 (compareToken -> NOT_EQUAL_THAN .)


state 83

    (51) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 51 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 51 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 51 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 51 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 51 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 51 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 51 (compareToken -> GREATER_THAN .)


state 84

    (52) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 52 (compareToken -> LESS_THAN .)
    ID              reduce using rule 52 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 52 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 52 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 52 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 52 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 52 (compareToken -> LESS_THAN .)


state 85

    (61) term -> factor moreFactors .

    PLUS            reduce using rule 61 (term -> factor moreFactors .)
    MINUS           reduce using rule 61 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 61 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 61 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 61 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 61 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 61 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 61 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 61 (term -> factor moreFactors .)
    RPAREN          reduce using rule 61 (term -> factor moreFactors .)
    COMMA           reduce using rule 61 (term -> factor moreFactors .)
    COLON           reduce using rule 61 (term -> factor moreFactors .)


state 86

    (63) moreFactors -> DIVIDE . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    funct                          shift and go to state 54
    cvar                           shift and go to state 62
    factor                         shift and go to state 103

state 87

    (64) moreFactors -> TIMES . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    funct                          shift and go to state 54
    cvar                           shift and go to state 62
    factor                         shift and go to state 104

state 88

    (62) moreFactors -> empty .

    PLUS            reduce using rule 62 (moreFactors -> empty .)
    MINUS           reduce using rule 62 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 62 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 62 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 62 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 62 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 62 (moreFactors -> empty .)
    SAME_AS         reduce using rule 62 (moreFactors -> empty .)
    NEWLINE         reduce using rule 62 (moreFactors -> empty .)
    RPAREN          reduce using rule 62 (moreFactors -> empty .)
    COMMA           reduce using rule 62 (moreFactors -> empty .)
    COLON           reduce using rule 62 (moreFactors -> empty .)


state 89

    (65) moreFactors -> MOD . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    funct                          shift and go to state 54
    cvar                           shift and go to state 62
    factor                         shift and go to state 105

state 90

    (30) assign -> ID EQUAL expression NEWLINE .

    NEWLINE         reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    VOID            reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    $end            reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    WHILE           reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    ELSE            reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    BOOL            reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    INT             reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    FLOAT           reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    CHAR            reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    STRING          reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)
    IMAGE           reduce using rule 30 (assign -> ID EQUAL expression NEWLINE .)


state 91

    (45) funct -> ID LPAREN . RPAREN
    (46) funct -> ID LPAREN . expression expressionList RPAREN
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 106
    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 107

state 92

    (12) pwmDeclaration -> PWM pinList NEWLINE .

    BOOL            reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    INT             reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    CHAR            reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    STRING          reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)


state 93

    (14) pinList -> C_INT COLON ID COMMA . pinList
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 32

    pinList                        shift and go to state 108

state 94

    (31) main -> VOID MAIN LPAREN . RPAREN NEWLINE block
    (32) main -> VOID MAIN LPAREN . tipo ID parameterList RPAREN NEWLINE block
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    RPAREN          shift and go to state 109
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 110

state 95

    (24) functions -> tipo ID LPAREN RPAREN . NEWLINE block

    NEWLINE         shift and go to state 111


state 96

    (25) functions -> tipo ID LPAREN tipo . ID parameterList RPAREN NEWLINE block

    ID              shift and go to state 112


state 97

    (26) functions -> VOID ID LPAREN RPAREN . NEWLINE block

    NEWLINE         shift and go to state 113


state 98

    (27) functions -> VOID ID LPAREN tipo . ID parameterList RPAREN NEWLINE block

    ID              shift and go to state 114


state 99

    (59) moreTerms -> PLUS term . moreTerms
    (58) moreTerms -> . empty
    (59) moreTerms -> . PLUS term moreTerms
    (60) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 115
    empty                          shift and go to state 76

state 100

    (60) moreTerms -> MINUS term . moreTerms
    (58) moreTerms -> . empty
    (59) moreTerms -> . PLUS term moreTerms
    (60) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 116
    empty                          shift and go to state 76

state 101

    (66) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 66 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 66 (factor -> LPAREN expression RPAREN .)


state 102

    (50) expression -> exp compareToken exp .

    COMMA           reduce using rule 50 (expression -> exp compareToken exp .)
    RPAREN          reduce using rule 50 (expression -> exp compareToken exp .)
    COLON           reduce using rule 50 (expression -> exp compareToken exp .)
    NEWLINE         reduce using rule 50 (expression -> exp compareToken exp .)


state 103

    (63) moreFactors -> DIVIDE factor . moreFactors
    (62) moreFactors -> . empty
    (63) moreFactors -> . DIVIDE factor moreFactors
    (64) moreFactors -> . TIMES factor moreFactors
    (65) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 87
    MOD             shift and go to state 89
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 117
    empty                          shift and go to state 88

state 104

    (64) moreFactors -> TIMES factor . moreFactors
    (62) moreFactors -> . empty
    (63) moreFactors -> . DIVIDE factor moreFactors
    (64) moreFactors -> . TIMES factor moreFactors
    (65) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 87
    MOD             shift and go to state 89
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 118
    empty                          shift and go to state 88

state 105

    (65) moreFactors -> MOD factor . moreFactors
    (62) moreFactors -> . empty
    (63) moreFactors -> . DIVIDE factor moreFactors
    (64) moreFactors -> . TIMES factor moreFactors
    (65) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 86
    TIMES           shift and go to state 87
    MOD             shift and go to state 89
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 119
    empty                          shift and go to state 88

state 106

    (45) funct -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 45 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 45 (funct -> ID LPAREN RPAREN .)


state 107

    (46) funct -> ID LPAREN expression . expressionList RPAREN
    (47) expressionList -> . empty
    (48) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 121
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 120
    empty                          shift and go to state 122

state 108

    (14) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID COMMA pinList .)


state 109

    (31) main -> VOID MAIN LPAREN RPAREN . NEWLINE block

    NEWLINE         shift and go to state 123


state 110

    (32) main -> VOID MAIN LPAREN tipo . ID parameterList RPAREN NEWLINE block

    ID              shift and go to state 124


state 111

    (24) functions -> tipo ID LPAREN RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    VOID            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 127

state 112

    (25) functions -> tipo ID LPAREN tipo ID . parameterList RPAREN NEWLINE block
    (28) parameterList -> . empty
    (29) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 129
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 128
    empty                          shift and go to state 130

state 113

    (26) functions -> VOID ID LPAREN RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    VOID            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 131

state 114

    (27) functions -> VOID ID LPAREN tipo ID . parameterList RPAREN NEWLINE block
    (28) parameterList -> . empty
    (29) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 129
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 132
    empty                          shift and go to state 130

state 115

    (59) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 59 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 59 (moreTerms -> PLUS term moreTerms .)


state 116

    (60) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 60 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 60 (moreTerms -> MINUS term moreTerms .)


state 117

    (63) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 63 (moreFactors -> DIVIDE factor moreFactors .)


state 118

    (64) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 64 (moreFactors -> TIMES factor moreFactors .)


state 119

    (65) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 65 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 65 (moreFactors -> MOD factor moreFactors .)


state 120

    (46) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 133


state 121

    (48) expressionList -> COMMA . expression expressionList
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 134

state 122

    (47) expressionList -> empty .

    RPAREN          reduce using rule 47 (expressionList -> empty .)


state 123

    (31) main -> VOID MAIN LPAREN RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 135

state 124

    (32) main -> VOID MAIN LPAREN tipo ID . parameterList RPAREN NEWLINE block
    (28) parameterList -> . empty
    (29) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 129
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 136
    empty                          shift and go to state 130

state 125

    (34) block -> TAB . statement moreStatements
    (37) statement -> . assign
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . funct NEWLINE
    (30) assign -> . ID EQUAL expression NEWLINE
    (41) condition -> . IF expression COLON NEWLINE block
    (42) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (43) cycle -> . WHILE expression COLON NEWLINE block
    (44) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    ID              shift and go to state 140
    IF              shift and go to state 139
    WHILE           shift and go to state 141
    DO              shift and go to state 137

    funct                          shift and go to state 138
    statement                      shift and go to state 142
    assign                         shift and go to state 143
    condition                      shift and go to state 144
    cycle                          shift and go to state 145

state 126

    (33) block -> empty .

    VOID            reduce using rule 33 (block -> empty .)
    NEWLINE         reduce using rule 33 (block -> empty .)
    $end            reduce using rule 33 (block -> empty .)
    WHILE           reduce using rule 33 (block -> empty .)
    ELSE            reduce using rule 33 (block -> empty .)


state 127

    (24) functions -> tipo ID LPAREN RPAREN NEWLINE block .

    VOID            reduce using rule 24 (functions -> tipo ID LPAREN RPAREN NEWLINE block .)


state 128

    (25) functions -> tipo ID LPAREN tipo ID parameterList . RPAREN NEWLINE block

    RPAREN          shift and go to state 146


state 129

    (29) parameterList -> COMMA . tipo ID parameterList
    (18) tipo -> . BOOL
    (19) tipo -> . INT
    (20) tipo -> . FLOAT
    (21) tipo -> . CHAR
    (22) tipo -> . STRING
    (23) tipo -> . IMAGE

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 147

state 130

    (28) parameterList -> empty .

    RPAREN          reduce using rule 28 (parameterList -> empty .)


state 131

    (26) functions -> VOID ID LPAREN RPAREN NEWLINE block .

    VOID            reduce using rule 26 (functions -> VOID ID LPAREN RPAREN NEWLINE block .)


state 132

    (27) functions -> VOID ID LPAREN tipo ID parameterList . RPAREN NEWLINE block

    RPAREN          shift and go to state 148


state 133

    (46) funct -> ID LPAREN expression expressionList RPAREN .

    NEWLINE         reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    DIVIDE          reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 46 (funct -> ID LPAREN expression expressionList RPAREN .)


state 134

    (48) expressionList -> COMMA expression . expressionList
    (47) expressionList -> . empty
    (48) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 121
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 149
    empty                          shift and go to state 122

state 135

    (31) main -> VOID MAIN LPAREN RPAREN NEWLINE block .

    $end            reduce using rule 31 (main -> VOID MAIN LPAREN RPAREN NEWLINE block .)


state 136

    (32) main -> VOID MAIN LPAREN tipo ID parameterList . RPAREN NEWLINE block

    RPAREN          shift and go to state 150


state 137

    (44) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 151


state 138

    (40) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 152


state 139

    (41) condition -> IF . expression COLON NEWLINE block
    (42) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 153

state 140

    (30) assign -> ID . EQUAL expression NEWLINE
    (45) funct -> ID . LPAREN RPAREN
    (46) funct -> ID . LPAREN expression expressionList RPAREN

    EQUAL           shift and go to state 38
    LPAREN          shift and go to state 91


state 141

    (43) cycle -> WHILE . expression COLON NEWLINE block
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 154

state 142

    (34) block -> TAB statement . moreStatements
    (35) moreStatements -> . empty
    (36) moreStatements -> . NEWLINE TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 155
    VOID            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! NEWLINE         [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 156
    moreStatements                 shift and go to state 157

state 143

    (37) statement -> assign .

    NEWLINE         reduce using rule 37 (statement -> assign .)
    VOID            reduce using rule 37 (statement -> assign .)
    $end            reduce using rule 37 (statement -> assign .)
    WHILE           reduce using rule 37 (statement -> assign .)
    ELSE            reduce using rule 37 (statement -> assign .)


state 144

    (38) statement -> condition .

    NEWLINE         reduce using rule 38 (statement -> condition .)
    VOID            reduce using rule 38 (statement -> condition .)
    $end            reduce using rule 38 (statement -> condition .)
    WHILE           reduce using rule 38 (statement -> condition .)
    ELSE            reduce using rule 38 (statement -> condition .)


state 145

    (39) statement -> cycle .

    NEWLINE         reduce using rule 39 (statement -> cycle .)
    VOID            reduce using rule 39 (statement -> cycle .)
    $end            reduce using rule 39 (statement -> cycle .)
    WHILE           reduce using rule 39 (statement -> cycle .)
    ELSE            reduce using rule 39 (statement -> cycle .)


state 146

    (25) functions -> tipo ID LPAREN tipo ID parameterList RPAREN . NEWLINE block

    NEWLINE         shift and go to state 158


state 147

    (29) parameterList -> COMMA tipo . ID parameterList

    ID              shift and go to state 159


state 148

    (27) functions -> VOID ID LPAREN tipo ID parameterList RPAREN . NEWLINE block

    NEWLINE         shift and go to state 160


state 149

    (48) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 48 (expressionList -> COMMA expression expressionList .)


state 150

    (32) main -> VOID MAIN LPAREN tipo ID parameterList RPAREN . NEWLINE block

    NEWLINE         shift and go to state 161


state 151

    (44) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 162


state 152

    (40) statement -> funct NEWLINE .

    NEWLINE         reduce using rule 40 (statement -> funct NEWLINE .)
    VOID            reduce using rule 40 (statement -> funct NEWLINE .)
    $end            reduce using rule 40 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 40 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 40 (statement -> funct NEWLINE .)


state 153

    (41) condition -> IF expression . COLON NEWLINE block
    (42) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 163


state 154

    (43) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 164


state 155

    (36) moreStatements -> NEWLINE . TAB statement moreStatements

    TAB             shift and go to state 165


state 156

    (35) moreStatements -> empty .

    NEWLINE         reduce using rule 35 (moreStatements -> empty .)
    VOID            reduce using rule 35 (moreStatements -> empty .)
    $end            reduce using rule 35 (moreStatements -> empty .)
    WHILE           reduce using rule 35 (moreStatements -> empty .)
    ELSE            reduce using rule 35 (moreStatements -> empty .)


state 157

    (34) block -> TAB statement moreStatements .

    VOID            reduce using rule 34 (block -> TAB statement moreStatements .)
    NEWLINE         reduce using rule 34 (block -> TAB statement moreStatements .)
    $end            reduce using rule 34 (block -> TAB statement moreStatements .)
    WHILE           reduce using rule 34 (block -> TAB statement moreStatements .)
    ELSE            reduce using rule 34 (block -> TAB statement moreStatements .)


state 158

    (25) functions -> tipo ID LPAREN tipo ID parameterList RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    VOID            reduce using rule 2 (empty -> .)

    block                          shift and go to state 166
    empty                          shift and go to state 126

state 159

    (29) parameterList -> COMMA tipo ID . parameterList
    (28) parameterList -> . empty
    (29) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 129
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 167
    empty                          shift and go to state 130

state 160

    (27) functions -> VOID ID LPAREN tipo ID parameterList RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    VOID            reduce using rule 2 (empty -> .)

    block                          shift and go to state 168
    empty                          shift and go to state 126

state 161

    (32) main -> VOID MAIN LPAREN tipo ID parameterList RPAREN NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 169
    empty                          shift and go to state 126

state 162

    (44) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    WHILE           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 170

state 163

    (41) condition -> IF expression COLON . NEWLINE block
    (42) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 171


state 164

    (43) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 172


state 165

    (36) moreStatements -> NEWLINE TAB . statement moreStatements
    (37) statement -> . assign
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . funct NEWLINE
    (30) assign -> . ID EQUAL expression NEWLINE
    (41) condition -> . IF expression COLON NEWLINE block
    (42) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (43) cycle -> . WHILE expression COLON NEWLINE block
    (44) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    ID              shift and go to state 140
    IF              shift and go to state 139
    WHILE           shift and go to state 141
    DO              shift and go to state 137

    funct                          shift and go to state 138
    statement                      shift and go to state 173
    assign                         shift and go to state 143
    condition                      shift and go to state 144
    cycle                          shift and go to state 145

state 166

    (25) functions -> tipo ID LPAREN tipo ID parameterList RPAREN NEWLINE block .

    VOID            reduce using rule 25 (functions -> tipo ID LPAREN tipo ID parameterList RPAREN NEWLINE block .)


state 167

    (29) parameterList -> COMMA tipo ID parameterList .

    RPAREN          reduce using rule 29 (parameterList -> COMMA tipo ID parameterList .)


state 168

    (27) functions -> VOID ID LPAREN tipo ID parameterList RPAREN NEWLINE block .

    VOID            reduce using rule 27 (functions -> VOID ID LPAREN tipo ID parameterList RPAREN NEWLINE block .)


state 169

    (32) main -> VOID MAIN LPAREN tipo ID parameterList RPAREN NEWLINE block .

    $end            reduce using rule 32 (main -> VOID MAIN LPAREN tipo ID parameterList RPAREN NEWLINE block .)


state 170

    (44) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 174


state 171

    (41) condition -> IF expression COLON NEWLINE . block
    (42) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    NEWLINE         reduce using rule 2 (empty -> .)
    VOID            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 175

state 172

    (43) cycle -> WHILE expression COLON NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    NEWLINE         reduce using rule 2 (empty -> .)
    VOID            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 176

state 173

    (36) moreStatements -> NEWLINE TAB statement . moreStatements
    (35) moreStatements -> . empty
    (36) moreStatements -> . NEWLINE TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 155
    VOID            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! NEWLINE         [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 156
    moreStatements                 shift and go to state 177

state 174

    (44) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (49) expression -> . exp
    (50) expression -> . exp compareToken exp
    (57) exp -> . term moreTerms
    (61) term -> . factor moreFactors
    (66) factor -> . LPAREN expression RPAREN
    (67) factor -> . cvar
    (68) factor -> . funct
    (69) cvar -> . ID
    (70) cvar -> . C_BOOL
    (71) cvar -> . C_INT
    (72) cvar -> . C_FLOAT
    (73) cvar -> . C_CHAR
    (74) cvar -> . C_STRING
    (45) funct -> . ID LPAREN RPAREN
    (46) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 53
    ID              shift and go to state 64
    C_BOOL          shift and go to state 56
    C_INT           shift and go to state 55
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 58
    C_STRING        shift and go to state 57

    term                           shift and go to state 52
    funct                          shift and go to state 54
    exp                            shift and go to state 60
    factor                         shift and go to state 61
    cvar                           shift and go to state 62
    expression                     shift and go to state 178

state 175

    (41) condition -> IF expression COLON NEWLINE block .
    (42) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    NEWLINE         reduce using rule 41 (condition -> IF expression COLON NEWLINE block .)
    VOID            reduce using rule 41 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 41 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 41 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 179

  ! ELSE            [ reduce using rule 41 (condition -> IF expression COLON NEWLINE block .) ]


state 176

    (43) cycle -> WHILE expression COLON NEWLINE block .

    NEWLINE         reduce using rule 43 (cycle -> WHILE expression COLON NEWLINE block .)
    VOID            reduce using rule 43 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 43 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 43 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 43 (cycle -> WHILE expression COLON NEWLINE block .)


state 177

    (36) moreStatements -> NEWLINE TAB statement moreStatements .

    NEWLINE         reduce using rule 36 (moreStatements -> NEWLINE TAB statement moreStatements .)
    VOID            reduce using rule 36 (moreStatements -> NEWLINE TAB statement moreStatements .)
    $end            reduce using rule 36 (moreStatements -> NEWLINE TAB statement moreStatements .)
    WHILE           reduce using rule 36 (moreStatements -> NEWLINE TAB statement moreStatements .)
    ELSE            reduce using rule 36 (moreStatements -> NEWLINE TAB statement moreStatements .)


state 178

    (44) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 180


state 179

    (42) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 181


state 180

    (44) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    NEWLINE         reduce using rule 44 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    VOID            reduce using rule 44 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 44 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 44 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 44 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 181

    (42) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 182


state 182

    (42) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (33) block -> . empty
    (34) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 125
    NEWLINE         reduce using rule 2 (empty -> .)
    VOID            reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 126
    block                          shift and go to state 183

state 183

    (42) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    NEWLINE         reduce using rule 42 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    VOID            reduce using rule 42 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 42 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 42 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 42 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 142 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 173 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 175 resolved as shift
