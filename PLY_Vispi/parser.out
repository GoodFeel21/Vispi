Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID NEWLINE hardware vars assign functions
Rule 2     empty -> <empty>
Rule 3     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 4     camDeclaration -> empty
Rule 5     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 6     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 7     inputsDeclaration -> empty
Rule 8     inputsDeclaration -> INPUT saveType pinList NEWLINE
Rule 9     outputsDeclaration -> empty
Rule 10    outputsDeclaration -> OUTPUT saveType pinList NEWLINE
Rule 11    pwmDeclaration -> empty
Rule 12    pwmDeclaration -> PWM saveType pinList NEWLINE
Rule 13    pinList -> C_INT COLON ID
Rule 14    pinList -> C_INT COLON ID COMMA pinList
Rule 15    vars -> tipo isDeclaration idList NEWLINE vars
Rule 16    vars -> tipo isDeclaration assign vars
Rule 17    vars -> empty
Rule 18    isDeclaration -> <empty>
Rule 19    saveType -> <empty>
Rule 20    idList -> ID
Rule 21    idList -> ID COMMA idList
Rule 22    tipo -> BOOL saveType
Rule 23    tipo -> INT saveType
Rule 24    tipo -> FLOAT saveType
Rule 25    tipo -> CHAR saveType
Rule 26    tipo -> STRING saveType
Rule 27    tipo -> IMAGE saveType
Rule 28    functions -> DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 29    functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 30    functions -> DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 31    functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 32    functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 33    functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 34    functions -> empty
Rule 35    saveModule -> <empty>
Rule 36    parameterList -> empty
Rule 37    parameterList -> COMMA tipo ID parameterList
Rule 38    assign -> idList EQUAL expression NEWLINE assign
Rule 39    assign -> empty
Rule 40    block -> empty
Rule 41    block -> TAB statement moreStatements
Rule 42    moreStatements -> empty
Rule 43    moreStatements -> TAB statement moreStatements
Rule 44    statement -> vars
Rule 45    statement -> assign
Rule 46    statement -> condition
Rule 47    statement -> cycle
Rule 48    statement -> funct NEWLINE
Rule 49    statement -> RETURN expression NEWLINE
Rule 50    condition -> IF expression COLON NEWLINE block
Rule 51    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 52    cycle -> WHILE expression COLON NEWLINE block
Rule 53    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 54    funct -> ID LPAREN RPAREN
Rule 55    funct -> ID LPAREN expression expressionList RPAREN
Rule 56    expressionList -> empty
Rule 57    expressionList -> COMMA expression expressionList
Rule 58    expression -> exp
Rule 59    expression -> exp compareToken exp
Rule 60    compareToken -> GREATER_THAN
Rule 61    compareToken -> LESS_THAN
Rule 62    compareToken -> LESS_EQUAL_THAN
Rule 63    compareToken -> GREATER_EQUAL_THAN
Rule 64    compareToken -> NOT_EQUAL_THAN
Rule 65    compareToken -> SAME_AS
Rule 66    exp -> term moreTerms
Rule 67    moreTerms -> empty
Rule 68    moreTerms -> PLUS term moreTerms
Rule 69    moreTerms -> MINUS term moreTerms
Rule 70    term -> factor moreFactors
Rule 71    moreFactors -> empty
Rule 72    moreFactors -> DIVIDE factor moreFactors
Rule 73    moreFactors -> TIMES factor moreFactors
Rule 74    moreFactors -> MOD factor moreFactors
Rule 75    factor -> LPAREN expression RPAREN
Rule 76    factor -> cvar
Rule 77    factor -> funct
Rule 78    cvar -> ID
Rule 79    cvar -> C_BOOL
Rule 80    cvar -> C_INT
Rule 81    cvar -> C_FLOAT
Rule 82    cvar -> C_CHAR
Rule 83    cvar -> C_STRING

Terminals, with rules where they appear

AND                  : 
BOOL                 : 22
CAM                  : 5 6
CHAR                 : 25
COLON                : 5 6 13 14 28 29 30 31 32 33 50 51 51 52 53
COMMA                : 14 21 37 57
C_BOOL               : 79
C_CHAR               : 82
C_FLOAT              : 81
C_INT                : 13 14 80
C_STRING             : 83
DEF                  : 28 29 30 31 32 33
DIVIDE               : 72
DO                   : 53
ELSE                 : 51
EQUAL                : 38
FLOAT                : 24
GREATER_EQUAL_THAN   : 63
GREATER_THAN         : 60
ID                   : 1 5 6 13 14 20 21 28 29 29 30 31 31 33 37 54 55 78
IF                   : 50 51
IMAGE                : 27
INPUT                : 8
INT                  : 23
LESS_EQUAL_THAN      : 62
LESS_THAN            : 61
LPAREN               : 28 29 30 31 32 33 54 55 75
MAIN                 : 32 33
MINUS                : 69
MOD                  : 74
NEWLINE              : 1 5 6 8 10 12 15 28 29 30 31 32 33 38 48 49 50 51 51 52 53 53
NOT                  : 
NOT_EQUAL_THAN       : 64
OR                   : 
OUTPUT               : 10
PERIOD               : 
PICAM                : 6
PLUS                 : 68
PROGRAM              : 1
PWM                  : 12
RETURN               : 49
RPAREN               : 28 29 30 31 32 33 54 55 75
SAME_AS              : 65
STRING               : 26
TAB                  : 41 43
TIMES                : 73
VOID                 : 30 31 32 33
WEBCAM               : 5
WHILE                : 52 53
error                : 

Nonterminals, with rules where they appear

assign               : 1 16 38 45
block                : 28 29 30 31 32 33 50 51 51 52 53
camDeclaration       : 3
compareToken         : 59
condition            : 46
cvar                 : 76
cycle                : 47
empty                : 4 7 9 11 17 34 36 39 40 42 56 67 71
exp                  : 58 59 59
expression           : 38 49 50 51 52 53 55 57 75
expressionList       : 55 57
factor               : 70 72 73 74
funct                : 48 77
functions            : 1 28 29 30 31 32 33
hardware             : 1
idList               : 15 21 38
inputsDeclaration    : 3
isDeclaration        : 15 16
moreFactors          : 70 72 73 74
moreStatements       : 41 43
moreTerms            : 66 68 69
outputsDeclaration   : 3
parameterList        : 29 31 33 37
pinList              : 8 10 12 14
program              : 0
pwmDeclaration       : 3
saveModule           : 28 29 30 31 32 33
saveType             : 8 10 12 22 23 24 25 26 27
statement            : 41 43
term                 : 66 68 69
tipo                 : 15 16 28 29 29 31 33 37
vars                 : 1 15 16 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID NEWLINE hardware vars assign functions

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID NEWLINE hardware vars assign functions

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . NEWLINE hardware vars assign functions

    NEWLINE         shift and go to state 4


state 4

    (1) program -> PROGRAM ID NEWLINE . hardware vars assign functions
    (3) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (4) camDeclaration -> . empty
    (5) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (2) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 2 (empty -> .)
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID NEWLINE hardware . vars assign functions
    (15) vars -> . tipo isDeclaration idList NEWLINE vars
    (16) vars -> . tipo isDeclaration assign vars
    (17) vars -> . empty
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    tipo                           shift and go to state 11
    vars                           shift and go to state 12
    empty                          shift and go to state 17

state 6

    (5) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 18
    PICAM           shift and go to state 19


state 7

    (3) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (7) inputsDeclaration -> . empty
    (8) inputsDeclaration -> . INPUT saveType pinList NEWLINE
    (2) empty -> .

    INPUT           shift and go to state 21
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    inputsDeclaration              shift and go to state 20
    empty                          shift and go to state 22

state 8

    (4) camDeclaration -> empty .

    INPUT           reduce using rule 4 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 4 (camDeclaration -> empty .)
    PWM             reduce using rule 4 (camDeclaration -> empty .)
    BOOL            reduce using rule 4 (camDeclaration -> empty .)
    INT             reduce using rule 4 (camDeclaration -> empty .)
    FLOAT           reduce using rule 4 (camDeclaration -> empty .)
    CHAR            reduce using rule 4 (camDeclaration -> empty .)
    STRING          reduce using rule 4 (camDeclaration -> empty .)
    IMAGE           reduce using rule 4 (camDeclaration -> empty .)
    ID              reduce using rule 4 (camDeclaration -> empty .)
    DEF             reduce using rule 4 (camDeclaration -> empty .)
    $end            reduce using rule 4 (camDeclaration -> empty .)


state 9

    (25) tipo -> CHAR . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 23

state 10

    (24) tipo -> FLOAT . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 24

state 11

    (15) vars -> tipo . isDeclaration idList NEWLINE vars
    (16) vars -> tipo . isDeclaration assign vars
    (18) isDeclaration -> .

    ID              reduce using rule 18 (isDeclaration -> .)
    BOOL            reduce using rule 18 (isDeclaration -> .)
    INT             reduce using rule 18 (isDeclaration -> .)
    FLOAT           reduce using rule 18 (isDeclaration -> .)
    CHAR            reduce using rule 18 (isDeclaration -> .)
    STRING          reduce using rule 18 (isDeclaration -> .)
    IMAGE           reduce using rule 18 (isDeclaration -> .)
    DEF             reduce using rule 18 (isDeclaration -> .)
    $end            reduce using rule 18 (isDeclaration -> .)
    TAB             reduce using rule 18 (isDeclaration -> .)
    WHILE           reduce using rule 18 (isDeclaration -> .)
    ELSE            reduce using rule 18 (isDeclaration -> .)

    isDeclaration                  shift and go to state 25

state 12

    (1) program -> PROGRAM ID NEWLINE hardware vars . assign functions
    (38) assign -> . idList EQUAL expression NEWLINE assign
    (39) assign -> . empty
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList
    (2) empty -> .

    ID              shift and go to state 28
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    idList                         shift and go to state 26
    assign                         shift and go to state 27
    empty                          shift and go to state 29

state 13

    (23) tipo -> INT . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 30

state 14

    (27) tipo -> IMAGE . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 31

state 15

    (22) tipo -> BOOL . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 32

state 16

    (26) tipo -> STRING . saveType
    (19) saveType -> .

    ID              reduce using rule 19 (saveType -> .)
    BOOL            reduce using rule 19 (saveType -> .)
    INT             reduce using rule 19 (saveType -> .)
    FLOAT           reduce using rule 19 (saveType -> .)
    CHAR            reduce using rule 19 (saveType -> .)
    STRING          reduce using rule 19 (saveType -> .)
    IMAGE           reduce using rule 19 (saveType -> .)
    DEF             reduce using rule 19 (saveType -> .)
    $end            reduce using rule 19 (saveType -> .)
    TAB             reduce using rule 19 (saveType -> .)
    WHILE           reduce using rule 19 (saveType -> .)
    ELSE            reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 33

state 17

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 18

    (5) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 34


state 19

    (6) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 35


state 20

    (3) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (9) outputsDeclaration -> . empty
    (10) outputsDeclaration -> . OUTPUT saveType pinList NEWLINE
    (2) empty -> .

    OUTPUT          shift and go to state 37
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    outputsDeclaration             shift and go to state 36
    empty                          shift and go to state 38

state 21

    (8) inputsDeclaration -> INPUT . saveType pinList NEWLINE
    (19) saveType -> .

    C_INT           reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 39

state 22

    (7) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 7 (inputsDeclaration -> empty .)
    PWM             reduce using rule 7 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 7 (inputsDeclaration -> empty .)
    INT             reduce using rule 7 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 7 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 7 (inputsDeclaration -> empty .)
    STRING          reduce using rule 7 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 7 (inputsDeclaration -> empty .)
    ID              reduce using rule 7 (inputsDeclaration -> empty .)
    DEF             reduce using rule 7 (inputsDeclaration -> empty .)
    $end            reduce using rule 7 (inputsDeclaration -> empty .)


state 23

    (25) tipo -> CHAR saveType .

    ID              reduce using rule 25 (tipo -> CHAR saveType .)
    BOOL            reduce using rule 25 (tipo -> CHAR saveType .)
    INT             reduce using rule 25 (tipo -> CHAR saveType .)
    FLOAT           reduce using rule 25 (tipo -> CHAR saveType .)
    CHAR            reduce using rule 25 (tipo -> CHAR saveType .)
    STRING          reduce using rule 25 (tipo -> CHAR saveType .)
    IMAGE           reduce using rule 25 (tipo -> CHAR saveType .)
    TAB             reduce using rule 25 (tipo -> CHAR saveType .)
    DEF             reduce using rule 25 (tipo -> CHAR saveType .)
    $end            reduce using rule 25 (tipo -> CHAR saveType .)
    WHILE           reduce using rule 25 (tipo -> CHAR saveType .)
    ELSE            reduce using rule 25 (tipo -> CHAR saveType .)


state 24

    (24) tipo -> FLOAT saveType .

    ID              reduce using rule 24 (tipo -> FLOAT saveType .)
    BOOL            reduce using rule 24 (tipo -> FLOAT saveType .)
    INT             reduce using rule 24 (tipo -> FLOAT saveType .)
    FLOAT           reduce using rule 24 (tipo -> FLOAT saveType .)
    CHAR            reduce using rule 24 (tipo -> FLOAT saveType .)
    STRING          reduce using rule 24 (tipo -> FLOAT saveType .)
    IMAGE           reduce using rule 24 (tipo -> FLOAT saveType .)
    TAB             reduce using rule 24 (tipo -> FLOAT saveType .)
    DEF             reduce using rule 24 (tipo -> FLOAT saveType .)
    $end            reduce using rule 24 (tipo -> FLOAT saveType .)
    WHILE           reduce using rule 24 (tipo -> FLOAT saveType .)
    ELSE            reduce using rule 24 (tipo -> FLOAT saveType .)


state 25

    (15) vars -> tipo isDeclaration . idList NEWLINE vars
    (16) vars -> tipo isDeclaration . assign vars
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList
    (38) assign -> . idList EQUAL expression NEWLINE assign
    (39) assign -> . empty
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 28
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 40
    assign                         shift and go to state 41
    empty                          shift and go to state 29

state 26

    (38) assign -> idList . EQUAL expression NEWLINE assign

    EQUAL           shift and go to state 42


state 27

    (1) program -> PROGRAM ID NEWLINE hardware vars assign . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 43
    empty                          shift and go to state 45

state 28

    (20) idList -> ID .
    (21) idList -> ID . COMMA idList

    EQUAL           reduce using rule 20 (idList -> ID .)
    NEWLINE         reduce using rule 20 (idList -> ID .)
    COMMA           shift and go to state 46


state 29

    (39) assign -> empty .

    DEF             reduce using rule 39 (assign -> empty .)
    $end            reduce using rule 39 (assign -> empty .)
    BOOL            reduce using rule 39 (assign -> empty .)
    INT             reduce using rule 39 (assign -> empty .)
    FLOAT           reduce using rule 39 (assign -> empty .)
    CHAR            reduce using rule 39 (assign -> empty .)
    STRING          reduce using rule 39 (assign -> empty .)
    IMAGE           reduce using rule 39 (assign -> empty .)
    ID              reduce using rule 39 (assign -> empty .)
    TAB             reduce using rule 39 (assign -> empty .)
    WHILE           reduce using rule 39 (assign -> empty .)
    ELSE            reduce using rule 39 (assign -> empty .)


state 30

    (23) tipo -> INT saveType .

    ID              reduce using rule 23 (tipo -> INT saveType .)
    BOOL            reduce using rule 23 (tipo -> INT saveType .)
    INT             reduce using rule 23 (tipo -> INT saveType .)
    FLOAT           reduce using rule 23 (tipo -> INT saveType .)
    CHAR            reduce using rule 23 (tipo -> INT saveType .)
    STRING          reduce using rule 23 (tipo -> INT saveType .)
    IMAGE           reduce using rule 23 (tipo -> INT saveType .)
    TAB             reduce using rule 23 (tipo -> INT saveType .)
    DEF             reduce using rule 23 (tipo -> INT saveType .)
    $end            reduce using rule 23 (tipo -> INT saveType .)
    WHILE           reduce using rule 23 (tipo -> INT saveType .)
    ELSE            reduce using rule 23 (tipo -> INT saveType .)


state 31

    (27) tipo -> IMAGE saveType .

    ID              reduce using rule 27 (tipo -> IMAGE saveType .)
    BOOL            reduce using rule 27 (tipo -> IMAGE saveType .)
    INT             reduce using rule 27 (tipo -> IMAGE saveType .)
    FLOAT           reduce using rule 27 (tipo -> IMAGE saveType .)
    CHAR            reduce using rule 27 (tipo -> IMAGE saveType .)
    STRING          reduce using rule 27 (tipo -> IMAGE saveType .)
    IMAGE           reduce using rule 27 (tipo -> IMAGE saveType .)
    TAB             reduce using rule 27 (tipo -> IMAGE saveType .)
    DEF             reduce using rule 27 (tipo -> IMAGE saveType .)
    $end            reduce using rule 27 (tipo -> IMAGE saveType .)
    WHILE           reduce using rule 27 (tipo -> IMAGE saveType .)
    ELSE            reduce using rule 27 (tipo -> IMAGE saveType .)


state 32

    (22) tipo -> BOOL saveType .

    ID              reduce using rule 22 (tipo -> BOOL saveType .)
    BOOL            reduce using rule 22 (tipo -> BOOL saveType .)
    INT             reduce using rule 22 (tipo -> BOOL saveType .)
    FLOAT           reduce using rule 22 (tipo -> BOOL saveType .)
    CHAR            reduce using rule 22 (tipo -> BOOL saveType .)
    STRING          reduce using rule 22 (tipo -> BOOL saveType .)
    IMAGE           reduce using rule 22 (tipo -> BOOL saveType .)
    TAB             reduce using rule 22 (tipo -> BOOL saveType .)
    DEF             reduce using rule 22 (tipo -> BOOL saveType .)
    $end            reduce using rule 22 (tipo -> BOOL saveType .)
    WHILE           reduce using rule 22 (tipo -> BOOL saveType .)
    ELSE            reduce using rule 22 (tipo -> BOOL saveType .)


state 33

    (26) tipo -> STRING saveType .

    ID              reduce using rule 26 (tipo -> STRING saveType .)
    BOOL            reduce using rule 26 (tipo -> STRING saveType .)
    INT             reduce using rule 26 (tipo -> STRING saveType .)
    FLOAT           reduce using rule 26 (tipo -> STRING saveType .)
    CHAR            reduce using rule 26 (tipo -> STRING saveType .)
    STRING          reduce using rule 26 (tipo -> STRING saveType .)
    IMAGE           reduce using rule 26 (tipo -> STRING saveType .)
    TAB             reduce using rule 26 (tipo -> STRING saveType .)
    DEF             reduce using rule 26 (tipo -> STRING saveType .)
    $end            reduce using rule 26 (tipo -> STRING saveType .)
    WHILE           reduce using rule 26 (tipo -> STRING saveType .)
    ELSE            reduce using rule 26 (tipo -> STRING saveType .)


state 34

    (5) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 47


state 35

    (6) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 48


state 36

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (11) pwmDeclaration -> . empty
    (12) pwmDeclaration -> . PWM saveType pinList NEWLINE
    (2) empty -> .

    PWM             shift and go to state 50
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    pwmDeclaration                 shift and go to state 49
    empty                          shift and go to state 51

state 37

    (10) outputsDeclaration -> OUTPUT . saveType pinList NEWLINE
    (19) saveType -> .

    C_INT           reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 52

state 38

    (9) outputsDeclaration -> empty .

    PWM             reduce using rule 9 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (outputsDeclaration -> empty .)
    INT             reduce using rule 9 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 9 (outputsDeclaration -> empty .)
    STRING          reduce using rule 9 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (outputsDeclaration -> empty .)
    ID              reduce using rule 9 (outputsDeclaration -> empty .)
    DEF             reduce using rule 9 (outputsDeclaration -> empty .)
    $end            reduce using rule 9 (outputsDeclaration -> empty .)


state 39

    (8) inputsDeclaration -> INPUT saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 53

state 40

    (15) vars -> tipo isDeclaration idList . NEWLINE vars
    (38) assign -> idList . EQUAL expression NEWLINE assign

    NEWLINE         shift and go to state 55
    EQUAL           shift and go to state 42


state 41

    (16) vars -> tipo isDeclaration assign . vars
    (15) vars -> . tipo isDeclaration idList NEWLINE vars
    (16) vars -> . tipo isDeclaration assign vars
    (17) vars -> . empty
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    tipo                           shift and go to state 11
    vars                           shift and go to state 56
    empty                          shift and go to state 17

state 42

    (38) assign -> idList EQUAL . expression NEWLINE assign
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 69

state 43

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions .

    $end            reduce using rule 1 (program -> PROGRAM ID NEWLINE hardware vars assign functions .)


state 44

    (28) functions -> DEF . tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF . tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> DEF . VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF . VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> DEF . VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> DEF . VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType

    VOID            shift and go to state 71
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 70

state 45

    (34) functions -> empty .

    $end            reduce using rule 34 (functions -> empty .)


state 46

    (21) idList -> ID COMMA . idList
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

    ID              shift and go to state 28

    idList                         shift and go to state 72

state 47

    (5) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 73


state 48

    (6) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 74


state 49

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 50

    (12) pwmDeclaration -> PWM . saveType pinList NEWLINE
    (19) saveType -> .

    C_INT           reduce using rule 19 (saveType -> .)

    saveType                       shift and go to state 75

state 51

    (11) pwmDeclaration -> empty .

    BOOL            reduce using rule 11 (pwmDeclaration -> empty .)
    INT             reduce using rule 11 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 11 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 11 (pwmDeclaration -> empty .)
    STRING          reduce using rule 11 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 11 (pwmDeclaration -> empty .)
    ID              reduce using rule 11 (pwmDeclaration -> empty .)
    DEF             reduce using rule 11 (pwmDeclaration -> empty .)
    $end            reduce using rule 11 (pwmDeclaration -> empty .)


state 52

    (10) outputsDeclaration -> OUTPUT saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 76

state 53

    (8) inputsDeclaration -> INPUT saveType pinList . NEWLINE

    NEWLINE         shift and go to state 77


state 54

    (13) pinList -> C_INT . COLON ID
    (14) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 78


state 55

    (15) vars -> tipo isDeclaration idList NEWLINE . vars
    (15) vars -> . tipo isDeclaration idList NEWLINE vars
    (16) vars -> . tipo isDeclaration assign vars
    (17) vars -> . empty
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 79
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 56

    (16) vars -> tipo isDeclaration assign vars .

    TAB             reduce using rule 16 (vars -> tipo isDeclaration assign vars .)
    DEF             reduce using rule 16 (vars -> tipo isDeclaration assign vars .)
    $end            reduce using rule 16 (vars -> tipo isDeclaration assign vars .)
    WHILE           reduce using rule 16 (vars -> tipo isDeclaration assign vars .)
    ELSE            reduce using rule 16 (vars -> tipo isDeclaration assign vars .)
    ID              reduce using rule 16 (vars -> tipo isDeclaration assign vars .)


state 57

    (76) factor -> cvar .

    DIVIDE          reduce using rule 76 (factor -> cvar .)
    TIMES           reduce using rule 76 (factor -> cvar .)
    MOD             reduce using rule 76 (factor -> cvar .)
    PLUS            reduce using rule 76 (factor -> cvar .)
    MINUS           reduce using rule 76 (factor -> cvar .)
    GREATER_THAN    reduce using rule 76 (factor -> cvar .)
    LESS_THAN       reduce using rule 76 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 76 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 76 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 76 (factor -> cvar .)
    SAME_AS         reduce using rule 76 (factor -> cvar .)
    NEWLINE         reduce using rule 76 (factor -> cvar .)
    RPAREN          reduce using rule 76 (factor -> cvar .)
    COMMA           reduce using rule 76 (factor -> cvar .)
    COLON           reduce using rule 76 (factor -> cvar .)


state 58

    (77) factor -> funct .

    DIVIDE          reduce using rule 77 (factor -> funct .)
    TIMES           reduce using rule 77 (factor -> funct .)
    MOD             reduce using rule 77 (factor -> funct .)
    PLUS            reduce using rule 77 (factor -> funct .)
    MINUS           reduce using rule 77 (factor -> funct .)
    GREATER_THAN    reduce using rule 77 (factor -> funct .)
    LESS_THAN       reduce using rule 77 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 77 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 77 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 77 (factor -> funct .)
    SAME_AS         reduce using rule 77 (factor -> funct .)
    NEWLINE         reduce using rule 77 (factor -> funct .)
    RPAREN          reduce using rule 77 (factor -> funct .)
    COMMA           reduce using rule 77 (factor -> funct .)
    COLON           reduce using rule 77 (factor -> funct .)


state 59

    (81) cvar -> C_FLOAT .

    DIVIDE          reduce using rule 81 (cvar -> C_FLOAT .)
    TIMES           reduce using rule 81 (cvar -> C_FLOAT .)
    MOD             reduce using rule 81 (cvar -> C_FLOAT .)
    PLUS            reduce using rule 81 (cvar -> C_FLOAT .)
    MINUS           reduce using rule 81 (cvar -> C_FLOAT .)
    GREATER_THAN    reduce using rule 81 (cvar -> C_FLOAT .)
    LESS_THAN       reduce using rule 81 (cvar -> C_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 81 (cvar -> C_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 81 (cvar -> C_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 81 (cvar -> C_FLOAT .)
    SAME_AS         reduce using rule 81 (cvar -> C_FLOAT .)
    NEWLINE         reduce using rule 81 (cvar -> C_FLOAT .)
    RPAREN          reduce using rule 81 (cvar -> C_FLOAT .)
    COMMA           reduce using rule 81 (cvar -> C_FLOAT .)
    COLON           reduce using rule 81 (cvar -> C_FLOAT .)


state 60

    (79) cvar -> C_BOOL .

    DIVIDE          reduce using rule 79 (cvar -> C_BOOL .)
    TIMES           reduce using rule 79 (cvar -> C_BOOL .)
    MOD             reduce using rule 79 (cvar -> C_BOOL .)
    PLUS            reduce using rule 79 (cvar -> C_BOOL .)
    MINUS           reduce using rule 79 (cvar -> C_BOOL .)
    GREATER_THAN    reduce using rule 79 (cvar -> C_BOOL .)
    LESS_THAN       reduce using rule 79 (cvar -> C_BOOL .)
    LESS_EQUAL_THAN reduce using rule 79 (cvar -> C_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 79 (cvar -> C_BOOL .)
    NOT_EQUAL_THAN  reduce using rule 79 (cvar -> C_BOOL .)
    SAME_AS         reduce using rule 79 (cvar -> C_BOOL .)
    NEWLINE         reduce using rule 79 (cvar -> C_BOOL .)
    RPAREN          reduce using rule 79 (cvar -> C_BOOL .)
    COMMA           reduce using rule 79 (cvar -> C_BOOL .)
    COLON           reduce using rule 79 (cvar -> C_BOOL .)


state 61

    (70) term -> factor . moreFactors
    (71) moreFactors -> . empty
    (72) moreFactors -> . DIVIDE factor moreFactors
    (73) moreFactors -> . TIMES factor moreFactors
    (74) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 81
    TIMES           shift and go to state 82
    MOD             shift and go to state 84
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 80
    empty                          shift and go to state 83

state 62

    (75) factor -> LPAREN . expression RPAREN
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 85

state 63

    (80) cvar -> C_INT .

    DIVIDE          reduce using rule 80 (cvar -> C_INT .)
    TIMES           reduce using rule 80 (cvar -> C_INT .)
    MOD             reduce using rule 80 (cvar -> C_INT .)
    PLUS            reduce using rule 80 (cvar -> C_INT .)
    MINUS           reduce using rule 80 (cvar -> C_INT .)
    GREATER_THAN    reduce using rule 80 (cvar -> C_INT .)
    LESS_THAN       reduce using rule 80 (cvar -> C_INT .)
    LESS_EQUAL_THAN reduce using rule 80 (cvar -> C_INT .)
    GREATER_EQUAL_THAN reduce using rule 80 (cvar -> C_INT .)
    NOT_EQUAL_THAN  reduce using rule 80 (cvar -> C_INT .)
    SAME_AS         reduce using rule 80 (cvar -> C_INT .)
    NEWLINE         reduce using rule 80 (cvar -> C_INT .)
    RPAREN          reduce using rule 80 (cvar -> C_INT .)
    COMMA           reduce using rule 80 (cvar -> C_INT .)
    COLON           reduce using rule 80 (cvar -> C_INT .)


state 64

    (78) cvar -> ID .
    (54) funct -> ID . LPAREN RPAREN
    (55) funct -> ID . LPAREN expression expressionList RPAREN

    DIVIDE          reduce using rule 78 (cvar -> ID .)
    TIMES           reduce using rule 78 (cvar -> ID .)
    MOD             reduce using rule 78 (cvar -> ID .)
    PLUS            reduce using rule 78 (cvar -> ID .)
    MINUS           reduce using rule 78 (cvar -> ID .)
    GREATER_THAN    reduce using rule 78 (cvar -> ID .)
    LESS_THAN       reduce using rule 78 (cvar -> ID .)
    LESS_EQUAL_THAN reduce using rule 78 (cvar -> ID .)
    GREATER_EQUAL_THAN reduce using rule 78 (cvar -> ID .)
    NOT_EQUAL_THAN  reduce using rule 78 (cvar -> ID .)
    SAME_AS         reduce using rule 78 (cvar -> ID .)
    NEWLINE         reduce using rule 78 (cvar -> ID .)
    RPAREN          reduce using rule 78 (cvar -> ID .)
    COMMA           reduce using rule 78 (cvar -> ID .)
    COLON           reduce using rule 78 (cvar -> ID .)
    LPAREN          shift and go to state 86


state 65

    (83) cvar -> C_STRING .

    DIVIDE          reduce using rule 83 (cvar -> C_STRING .)
    TIMES           reduce using rule 83 (cvar -> C_STRING .)
    MOD             reduce using rule 83 (cvar -> C_STRING .)
    PLUS            reduce using rule 83 (cvar -> C_STRING .)
    MINUS           reduce using rule 83 (cvar -> C_STRING .)
    GREATER_THAN    reduce using rule 83 (cvar -> C_STRING .)
    LESS_THAN       reduce using rule 83 (cvar -> C_STRING .)
    LESS_EQUAL_THAN reduce using rule 83 (cvar -> C_STRING .)
    GREATER_EQUAL_THAN reduce using rule 83 (cvar -> C_STRING .)
    NOT_EQUAL_THAN  reduce using rule 83 (cvar -> C_STRING .)
    SAME_AS         reduce using rule 83 (cvar -> C_STRING .)
    NEWLINE         reduce using rule 83 (cvar -> C_STRING .)
    RPAREN          reduce using rule 83 (cvar -> C_STRING .)
    COMMA           reduce using rule 83 (cvar -> C_STRING .)
    COLON           reduce using rule 83 (cvar -> C_STRING .)


state 66

    (66) exp -> term . moreTerms
    (67) moreTerms -> . empty
    (68) moreTerms -> . PLUS term moreTerms
    (69) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 87
    empty                          shift and go to state 90

state 67

    (82) cvar -> C_CHAR .

    DIVIDE          reduce using rule 82 (cvar -> C_CHAR .)
    TIMES           reduce using rule 82 (cvar -> C_CHAR .)
    MOD             reduce using rule 82 (cvar -> C_CHAR .)
    PLUS            reduce using rule 82 (cvar -> C_CHAR .)
    MINUS           reduce using rule 82 (cvar -> C_CHAR .)
    GREATER_THAN    reduce using rule 82 (cvar -> C_CHAR .)
    LESS_THAN       reduce using rule 82 (cvar -> C_CHAR .)
    LESS_EQUAL_THAN reduce using rule 82 (cvar -> C_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 82 (cvar -> C_CHAR .)
    NOT_EQUAL_THAN  reduce using rule 82 (cvar -> C_CHAR .)
    SAME_AS         reduce using rule 82 (cvar -> C_CHAR .)
    NEWLINE         reduce using rule 82 (cvar -> C_CHAR .)
    RPAREN          reduce using rule 82 (cvar -> C_CHAR .)
    COMMA           reduce using rule 82 (cvar -> C_CHAR .)
    COLON           reduce using rule 82 (cvar -> C_CHAR .)


state 68

    (58) expression -> exp .
    (59) expression -> exp . compareToken exp
    (60) compareToken -> . GREATER_THAN
    (61) compareToken -> . LESS_THAN
    (62) compareToken -> . LESS_EQUAL_THAN
    (63) compareToken -> . GREATER_EQUAL_THAN
    (64) compareToken -> . NOT_EQUAL_THAN
    (65) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 58 (expression -> exp .)
    COLON           reduce using rule 58 (expression -> exp .)
    RPAREN          reduce using rule 58 (expression -> exp .)
    COMMA           reduce using rule 58 (expression -> exp .)
    GREATER_THAN    shift and go to state 96
    LESS_THAN       shift and go to state 97
    LESS_EQUAL_THAN shift and go to state 93
    GREATER_EQUAL_THAN shift and go to state 92
    NOT_EQUAL_THAN  shift and go to state 95
    SAME_AS         shift and go to state 94

    compareToken                   shift and go to state 91

state 69

    (38) assign -> idList EQUAL expression . NEWLINE assign

    NEWLINE         shift and go to state 98


state 70

    (28) functions -> DEF tipo . ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF tipo . ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 99


state 71

    (30) functions -> DEF VOID . ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID . ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID . MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> DEF VOID . MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 101
    MAIN            shift and go to state 100


state 72

    (21) idList -> ID COMMA idList .

    EQUAL           reduce using rule 21 (idList -> ID COMMA idList .)
    NEWLINE         reduce using rule 21 (idList -> ID COMMA idList .)


state 73

    (5) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 74

    (6) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 75

    (12) pwmDeclaration -> PWM saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 102

state 76

    (10) outputsDeclaration -> OUTPUT saveType pinList . NEWLINE

    NEWLINE         shift and go to state 103


state 77

    (8) inputsDeclaration -> INPUT saveType pinList NEWLINE .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    PWM             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    BOOL            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    INT             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    CHAR            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    STRING          reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    ID              reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    DEF             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    $end            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)


state 78

    (13) pinList -> C_INT COLON . ID
    (14) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 104


state 79

    (15) vars -> tipo isDeclaration idList NEWLINE vars .

    TAB             reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)
    DEF             reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)
    $end            reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)
    WHILE           reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)
    ELSE            reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)
    ID              reduce using rule 15 (vars -> tipo isDeclaration idList NEWLINE vars .)


state 80

    (70) term -> factor moreFactors .

    PLUS            reduce using rule 70 (term -> factor moreFactors .)
    MINUS           reduce using rule 70 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 70 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 70 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 70 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 70 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 70 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 70 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 70 (term -> factor moreFactors .)
    RPAREN          reduce using rule 70 (term -> factor moreFactors .)
    COMMA           reduce using rule 70 (term -> factor moreFactors .)
    COLON           reduce using rule 70 (term -> factor moreFactors .)


state 81

    (72) moreFactors -> DIVIDE . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    funct                          shift and go to state 58
    cvar                           shift and go to state 57
    factor                         shift and go to state 105

state 82

    (73) moreFactors -> TIMES . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    funct                          shift and go to state 58
    cvar                           shift and go to state 57
    factor                         shift and go to state 106

state 83

    (71) moreFactors -> empty .

    PLUS            reduce using rule 71 (moreFactors -> empty .)
    MINUS           reduce using rule 71 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 71 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 71 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 71 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 71 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 71 (moreFactors -> empty .)
    SAME_AS         reduce using rule 71 (moreFactors -> empty .)
    NEWLINE         reduce using rule 71 (moreFactors -> empty .)
    RPAREN          reduce using rule 71 (moreFactors -> empty .)
    COMMA           reduce using rule 71 (moreFactors -> empty .)
    COLON           reduce using rule 71 (moreFactors -> empty .)


state 84

    (74) moreFactors -> MOD . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    funct                          shift and go to state 58
    cvar                           shift and go to state 57
    factor                         shift and go to state 107

state 85

    (75) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 108


state 86

    (54) funct -> ID LPAREN . RPAREN
    (55) funct -> ID LPAREN . expression expressionList RPAREN
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 109
    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 110

state 87

    (66) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 66 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 66 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 66 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 66 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 66 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 66 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 66 (exp -> term moreTerms .)
    RPAREN          reduce using rule 66 (exp -> term moreTerms .)
    COMMA           reduce using rule 66 (exp -> term moreTerms .)
    COLON           reduce using rule 66 (exp -> term moreTerms .)


state 88

    (68) moreTerms -> PLUS . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 111
    funct                          shift and go to state 58
    factor                         shift and go to state 61
    cvar                           shift and go to state 57

state 89

    (69) moreTerms -> MINUS . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 112
    funct                          shift and go to state 58
    factor                         shift and go to state 61
    cvar                           shift and go to state 57

state 90

    (67) moreTerms -> empty .

    GREATER_THAN    reduce using rule 67 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 67 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 67 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 67 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 67 (moreTerms -> empty .)
    SAME_AS         reduce using rule 67 (moreTerms -> empty .)
    NEWLINE         reduce using rule 67 (moreTerms -> empty .)
    RPAREN          reduce using rule 67 (moreTerms -> empty .)
    COMMA           reduce using rule 67 (moreTerms -> empty .)
    COLON           reduce using rule 67 (moreTerms -> empty .)


state 91

    (59) expression -> exp compareToken . exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 113
    factor                         shift and go to state 61
    cvar                           shift and go to state 57

state 92

    (63) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 63 (compareToken -> GREATER_EQUAL_THAN .)


state 93

    (62) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 62 (compareToken -> LESS_EQUAL_THAN .)


state 94

    (65) compareToken -> SAME_AS .

    LPAREN          reduce using rule 65 (compareToken -> SAME_AS .)
    ID              reduce using rule 65 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 65 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 65 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 65 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 65 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 65 (compareToken -> SAME_AS .)


state 95

    (64) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 64 (compareToken -> NOT_EQUAL_THAN .)


state 96

    (60) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 60 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 60 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 60 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 60 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 60 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 60 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 60 (compareToken -> GREATER_THAN .)


state 97

    (61) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 61 (compareToken -> LESS_THAN .)
    ID              reduce using rule 61 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 61 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 61 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 61 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 61 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 61 (compareToken -> LESS_THAN .)


state 98

    (38) assign -> idList EQUAL expression NEWLINE . assign
    (38) assign -> . idList EQUAL expression NEWLINE assign
    (39) assign -> . empty
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 28
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 26
    empty                          shift and go to state 29
    assign                         shift and go to state 114

state 99

    (28) functions -> DEF tipo ID . saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF tipo ID . saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (35) saveModule -> .

    LPAREN          reduce using rule 35 (saveModule -> .)

    saveModule                     shift and go to state 115

state 100

    (32) functions -> DEF VOID MAIN . saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> DEF VOID MAIN . saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (35) saveModule -> .

    LPAREN          reduce using rule 35 (saveModule -> .)

    saveModule                     shift and go to state 116

state 101

    (30) functions -> DEF VOID ID . saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID ID . saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (35) saveModule -> .

    LPAREN          reduce using rule 35 (saveModule -> .)

    saveModule                     shift and go to state 117

state 102

    (12) pwmDeclaration -> PWM saveType pinList . NEWLINE

    NEWLINE         shift and go to state 118


state 103

    (10) outputsDeclaration -> OUTPUT saveType pinList NEWLINE .

    PWM             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    BOOL            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    INT             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    CHAR            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    STRING          reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    ID              reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    DEF             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    $end            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)


state 104

    (13) pinList -> C_INT COLON ID .
    (14) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 13 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 119


state 105

    (72) moreFactors -> DIVIDE factor . moreFactors
    (71) moreFactors -> . empty
    (72) moreFactors -> . DIVIDE factor moreFactors
    (73) moreFactors -> . TIMES factor moreFactors
    (74) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 81
    TIMES           shift and go to state 82
    MOD             shift and go to state 84
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 120
    empty                          shift and go to state 83

state 106

    (73) moreFactors -> TIMES factor . moreFactors
    (71) moreFactors -> . empty
    (72) moreFactors -> . DIVIDE factor moreFactors
    (73) moreFactors -> . TIMES factor moreFactors
    (74) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 81
    TIMES           shift and go to state 82
    MOD             shift and go to state 84
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 121
    empty                          shift and go to state 83

state 107

    (74) moreFactors -> MOD factor . moreFactors
    (71) moreFactors -> . empty
    (72) moreFactors -> . DIVIDE factor moreFactors
    (73) moreFactors -> . TIMES factor moreFactors
    (74) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 81
    TIMES           shift and go to state 82
    MOD             shift and go to state 84
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 122
    empty                          shift and go to state 83

state 108

    (75) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 75 (factor -> LPAREN expression RPAREN .)


state 109

    (54) funct -> ID LPAREN RPAREN .

    DIVIDE          reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 54 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 54 (funct -> ID LPAREN RPAREN .)


state 110

    (55) funct -> ID LPAREN expression . expressionList RPAREN
    (56) expressionList -> . empty
    (57) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 123
    empty                          shift and go to state 125

state 111

    (68) moreTerms -> PLUS term . moreTerms
    (67) moreTerms -> . empty
    (68) moreTerms -> . PLUS term moreTerms
    (69) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 126
    empty                          shift and go to state 90

state 112

    (69) moreTerms -> MINUS term . moreTerms
    (67) moreTerms -> . empty
    (68) moreTerms -> . PLUS term moreTerms
    (69) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 127
    empty                          shift and go to state 90

state 113

    (59) expression -> exp compareToken exp .

    NEWLINE         reduce using rule 59 (expression -> exp compareToken exp .)
    COLON           reduce using rule 59 (expression -> exp compareToken exp .)
    RPAREN          reduce using rule 59 (expression -> exp compareToken exp .)
    COMMA           reduce using rule 59 (expression -> exp compareToken exp .)


state 114

    (38) assign -> idList EQUAL expression NEWLINE assign .

    DEF             reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    $end            reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    BOOL            reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    INT             reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    FLOAT           reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    CHAR            reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    STRING          reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    IMAGE           reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    ID              reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    TAB             reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    WHILE           reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)
    ELSE            reduce using rule 38 (assign -> idList EQUAL expression NEWLINE assign .)


state 115

    (28) functions -> DEF tipo ID saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF tipo ID saveModule . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 128


state 116

    (32) functions -> DEF VOID MAIN saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> DEF VOID MAIN saveModule . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 129


state 117

    (30) functions -> DEF VOID ID saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID ID saveModule . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 130


state 118

    (12) pwmDeclaration -> PWM saveType pinList NEWLINE .

    BOOL            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    INT             reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    CHAR            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    STRING          reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    ID              reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    DEF             reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    $end            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)


state 119

    (14) pinList -> C_INT COLON ID COMMA . pinList
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 131

state 120

    (72) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 72 (moreFactors -> DIVIDE factor moreFactors .)


state 121

    (73) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 73 (moreFactors -> TIMES factor moreFactors .)


state 122

    (74) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 74 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 74 (moreFactors -> MOD factor moreFactors .)


state 123

    (55) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 132


state 124

    (57) expressionList -> COMMA . expression expressionList
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 133

state 125

    (56) expressionList -> empty .

    RPAREN          reduce using rule 56 (expressionList -> empty .)


state 126

    (68) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 68 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 68 (moreTerms -> PLUS term moreTerms .)


state 127

    (69) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 69 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 69 (moreTerms -> MINUS term moreTerms .)


state 128

    (28) functions -> DEF tipo ID saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (29) functions -> DEF tipo ID saveModule LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType

    RPAREN          shift and go to state 134
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 135

state 129

    (32) functions -> DEF VOID MAIN saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (33) functions -> DEF VOID MAIN saveModule LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType

    RPAREN          shift and go to state 136
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 137

state 130

    (30) functions -> DEF VOID ID saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID ID saveModule LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType

    RPAREN          shift and go to state 138
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 139

state 131

    (14) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID COMMA pinList .)


state 132

    (55) funct -> ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 55 (funct -> ID LPAREN expression expressionList RPAREN .)


state 133

    (57) expressionList -> COMMA expression . expressionList
    (56) expressionList -> . empty
    (57) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 124
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 140
    empty                          shift and go to state 125

state 134

    (28) functions -> DEF tipo ID saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 141


state 135

    (29) functions -> DEF tipo ID saveModule LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 142


state 136

    (32) functions -> DEF VOID MAIN saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 143


state 137

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 144


state 138

    (30) functions -> DEF VOID ID saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 145


state 139

    (31) functions -> DEF VOID ID saveModule LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 146


state 140

    (57) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 57 (expressionList -> COMMA expression expressionList .)


state 141

    (28) functions -> DEF tipo ID saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 147


state 142

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 148
    empty                          shift and go to state 149

state 143

    (32) functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 151


state 144

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 152
    empty                          shift and go to state 149

state 145

    (30) functions -> DEF VOID ID saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 153


state 146

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 154
    empty                          shift and go to state 149

state 147

    (28) functions -> DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 156
    block                          shift and go to state 157

state 148

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 158


state 149

    (36) parameterList -> empty .

    RPAREN          reduce using rule 36 (parameterList -> empty .)


state 150

    (37) parameterList -> COMMA . tipo ID parameterList
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 159

state 151

    (32) functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 160
    empty                          shift and go to state 156

state 152

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 161


state 153

    (30) functions -> DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 162
    empty                          shift and go to state 156

state 154

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 163


state 155

    (41) block -> TAB . statement moreStatements
    (44) statement -> . vars
    (45) statement -> . assign
    (46) statement -> . condition
    (47) statement -> . cycle
    (48) statement -> . funct NEWLINE
    (49) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo isDeclaration idList NEWLINE vars
    (16) vars -> . tipo isDeclaration assign vars
    (17) vars -> . empty
    (38) assign -> . idList EQUAL expression NEWLINE assign
    (39) assign -> . empty
    (50) condition -> . IF expression COLON NEWLINE block
    (51) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (52) cycle -> . WHILE expression COLON NEWLINE block
    (53) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType
    (2) empty -> .
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 165
    IF              shift and go to state 174
    WHILE           shift and go to state 168
    DO              shift and go to state 164
    ID              shift and go to state 172
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 166
    funct                          shift and go to state 167
    empty                          shift and go to state 170
    statement                      shift and go to state 171
    idList                         shift and go to state 26
    assign                         shift and go to state 175
    condition                      shift and go to state 173
    cycle                          shift and go to state 169

state 156

    (40) block -> empty .

    DEF             reduce using rule 40 (block -> empty .)
    $end            reduce using rule 40 (block -> empty .)
    WHILE           reduce using rule 40 (block -> empty .)
    TAB             reduce using rule 40 (block -> empty .)
    ELSE            reduce using rule 40 (block -> empty .)


state 157

    (28) functions -> DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 176
    empty                          shift and go to state 45

state 158

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 177


state 159

    (37) parameterList -> COMMA tipo . ID parameterList

    ID              shift and go to state 178


state 160

    (32) functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 179
    empty                          shift and go to state 45

state 161

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 180


state 162

    (30) functions -> DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 181
    empty                          shift and go to state 45

state 163

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 182


state 164

    (53) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 183


state 165

    (49) statement -> RETURN . expression NEWLINE
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 184

state 166

    (44) statement -> vars .

    TAB             reduce using rule 44 (statement -> vars .)
    DEF             reduce using rule 44 (statement -> vars .)
    $end            reduce using rule 44 (statement -> vars .)
    WHILE           reduce using rule 44 (statement -> vars .)
    ELSE            reduce using rule 44 (statement -> vars .)


state 167

    (48) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 185


state 168

    (52) cycle -> WHILE . expression COLON NEWLINE block
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 186

state 169

    (47) statement -> cycle .

    TAB             reduce using rule 47 (statement -> cycle .)
    DEF             reduce using rule 47 (statement -> cycle .)
    $end            reduce using rule 47 (statement -> cycle .)
    WHILE           reduce using rule 47 (statement -> cycle .)
    ELSE            reduce using rule 47 (statement -> cycle .)


state 170

    (17) vars -> empty .
    (39) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 39 (assign -> empty .) ]
  ! DEF             [ reduce using rule 39 (assign -> empty .) ]
  ! $end            [ reduce using rule 39 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 39 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 39 (assign -> empty .) ]


state 171

    (41) block -> TAB statement . moreStatements
    (42) moreStatements -> . empty
    (43) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 188
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 187
    moreStatements                 shift and go to state 189

state 172

    (54) funct -> ID . LPAREN RPAREN
    (55) funct -> ID . LPAREN expression expressionList RPAREN
    (20) idList -> ID .
    (21) idList -> ID . COMMA idList

    LPAREN          shift and go to state 86
    EQUAL           reduce using rule 20 (idList -> ID .)
    COMMA           shift and go to state 46


state 173

    (46) statement -> condition .

    TAB             reduce using rule 46 (statement -> condition .)
    DEF             reduce using rule 46 (statement -> condition .)
    $end            reduce using rule 46 (statement -> condition .)
    WHILE           reduce using rule 46 (statement -> condition .)
    ELSE            reduce using rule 46 (statement -> condition .)


state 174

    (50) condition -> IF . expression COLON NEWLINE block
    (51) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 190

state 175

    (45) statement -> assign .

    TAB             reduce using rule 45 (statement -> assign .)
    DEF             reduce using rule 45 (statement -> assign .)
    $end            reduce using rule 45 (statement -> assign .)
    WHILE           reduce using rule 45 (statement -> assign .)
    ELSE            reduce using rule 45 (statement -> assign .)


state 176

    (28) functions -> DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 177

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 191


state 178

    (37) parameterList -> COMMA tipo ID . parameterList
    (36) parameterList -> . empty
    (37) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 192
    empty                          shift and go to state 149

state 179

    (32) functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 32 (functions -> DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 180

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 193


state 181

    (30) functions -> DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 30 (functions -> DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 182

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 194


state 183

    (53) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 195


state 184

    (49) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 196


state 185

    (48) statement -> funct NEWLINE .

    TAB             reduce using rule 48 (statement -> funct NEWLINE .)
    DEF             reduce using rule 48 (statement -> funct NEWLINE .)
    $end            reduce using rule 48 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 48 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 48 (statement -> funct NEWLINE .)


state 186

    (52) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 197


state 187

    (42) moreStatements -> empty .

    TAB             reduce using rule 42 (moreStatements -> empty .)
    DEF             reduce using rule 42 (moreStatements -> empty .)
    $end            reduce using rule 42 (moreStatements -> empty .)
    WHILE           reduce using rule 42 (moreStatements -> empty .)
    ELSE            reduce using rule 42 (moreStatements -> empty .)


state 188

    (43) moreStatements -> TAB . statement moreStatements
    (44) statement -> . vars
    (45) statement -> . assign
    (46) statement -> . condition
    (47) statement -> . cycle
    (48) statement -> . funct NEWLINE
    (49) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo isDeclaration idList NEWLINE vars
    (16) vars -> . tipo isDeclaration assign vars
    (17) vars -> . empty
    (38) assign -> . idList EQUAL expression NEWLINE assign
    (39) assign -> . empty
    (50) condition -> . IF expression COLON NEWLINE block
    (51) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (52) cycle -> . WHILE expression COLON NEWLINE block
    (53) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN
    (22) tipo -> . BOOL saveType
    (23) tipo -> . INT saveType
    (24) tipo -> . FLOAT saveType
    (25) tipo -> . CHAR saveType
    (26) tipo -> . STRING saveType
    (27) tipo -> . IMAGE saveType
    (2) empty -> .
    (20) idList -> . ID
    (21) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 165
    IF              shift and go to state 174
    WHILE           shift and go to state 168
    DO              shift and go to state 164
    ID              shift and go to state 172
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 166
    funct                          shift and go to state 167
    empty                          shift and go to state 170
    statement                      shift and go to state 198
    idList                         shift and go to state 26
    assign                         shift and go to state 175
    condition                      shift and go to state 173
    cycle                          shift and go to state 169

state 189

    (41) block -> TAB statement moreStatements .

    DEF             reduce using rule 41 (block -> TAB statement moreStatements .)
    $end            reduce using rule 41 (block -> TAB statement moreStatements .)
    WHILE           reduce using rule 41 (block -> TAB statement moreStatements .)
    TAB             reduce using rule 41 (block -> TAB statement moreStatements .)
    ELSE            reduce using rule 41 (block -> TAB statement moreStatements .)


state 190

    (50) condition -> IF expression . COLON NEWLINE block
    (51) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 199


state 191

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 156
    block                          shift and go to state 200

state 192

    (37) parameterList -> COMMA tipo ID parameterList .

    RPAREN          reduce using rule 37 (parameterList -> COMMA tipo ID parameterList .)


state 193

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 156
    block                          shift and go to state 201

state 194

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 156
    block                          shift and go to state 202

state 195

    (53) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 155
    WHILE           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 156
    block                          shift and go to state 203

state 196

    (49) statement -> RETURN expression NEWLINE .

    TAB             reduce using rule 49 (statement -> RETURN expression NEWLINE .)
    DEF             reduce using rule 49 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 49 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 49 (statement -> RETURN expression NEWLINE .)
    ELSE            reduce using rule 49 (statement -> RETURN expression NEWLINE .)


state 197

    (52) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 204


state 198

    (43) moreStatements -> TAB statement . moreStatements
    (42) moreStatements -> . empty
    (43) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 188
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 187
    moreStatements                 shift and go to state 205

state 199

    (50) condition -> IF expression COLON . NEWLINE block
    (51) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 206


state 200

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 207
    empty                          shift and go to state 45

state 201

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 208
    empty                          shift and go to state 45

state 202

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (28) functions -> . DEF tipo ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN saveModule LPAREN RPAREN COLON NEWLINE block functions
    (33) functions -> . DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (34) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 209
    empty                          shift and go to state 45

state 203

    (53) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 210


state 204

    (52) cycle -> WHILE expression COLON NEWLINE . block
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 156
    block                          shift and go to state 211

state 205

    (43) moreStatements -> TAB statement moreStatements .

    TAB             reduce using rule 43 (moreStatements -> TAB statement moreStatements .)
    DEF             reduce using rule 43 (moreStatements -> TAB statement moreStatements .)
    $end            reduce using rule 43 (moreStatements -> TAB statement moreStatements .)
    WHILE           reduce using rule 43 (moreStatements -> TAB statement moreStatements .)
    ELSE            reduce using rule 43 (moreStatements -> TAB statement moreStatements .)


state 206

    (50) condition -> IF expression COLON NEWLINE . block
    (51) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 156
    block                          shift and go to state 212

state 207

    (29) functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 29 (functions -> DEF tipo ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 208

    (33) functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 33 (functions -> DEF VOID MAIN saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 209

    (31) functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 31 (functions -> DEF VOID ID saveModule LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 210

    (53) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (58) expression -> . exp
    (59) expression -> . exp compareToken exp
    (66) exp -> . term moreTerms
    (70) term -> . factor moreFactors
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . cvar
    (77) factor -> . funct
    (78) cvar -> . ID
    (79) cvar -> . C_BOOL
    (80) cvar -> . C_INT
    (81) cvar -> . C_FLOAT
    (82) cvar -> . C_CHAR
    (83) cvar -> . C_STRING
    (54) funct -> . ID LPAREN RPAREN
    (55) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 62
    ID              shift and go to state 64
    C_BOOL          shift and go to state 60
    C_INT           shift and go to state 63
    C_FLOAT         shift and go to state 59
    C_CHAR          shift and go to state 67
    C_STRING        shift and go to state 65

    term                           shift and go to state 66
    funct                          shift and go to state 58
    exp                            shift and go to state 68
    factor                         shift and go to state 61
    cvar                           shift and go to state 57
    expression                     shift and go to state 213

state 211

    (52) cycle -> WHILE expression COLON NEWLINE block .

    TAB             reduce using rule 52 (cycle -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 52 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 52 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 52 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 52 (cycle -> WHILE expression COLON NEWLINE block .)


state 212

    (50) condition -> IF expression COLON NEWLINE block .
    (51) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 50 (condition -> IF expression COLON NEWLINE block .)
    DEF             reduce using rule 50 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 50 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 50 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 214

  ! ELSE            [ reduce using rule 50 (condition -> IF expression COLON NEWLINE block .) ]


state 213

    (53) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 215


state 214

    (51) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 216


state 215

    (53) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    TAB             reduce using rule 53 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    DEF             reduce using rule 53 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 53 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 53 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 53 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 216

    (51) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 217


state 217

    (51) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (40) block -> . empty
    (41) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 155
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 156
    block                          shift and go to state 218

state 218

    (51) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    TAB             reduce using rule 51 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    DEF             reduce using rule 51 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 51 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 51 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 51 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for TAB in state 171 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for TAB in state 198 resolved as shift
WARNING: shift/reduce conflict for TAB in state 204 resolved as shift
WARNING: shift/reduce conflict for TAB in state 206 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 212 resolved as shift
WARNING: shift/reduce conflict for TAB in state 217 resolved as shift
WARNING: reduce/reduce conflict in state 170 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 170
