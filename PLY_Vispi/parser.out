Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID NEWLINE hardware vars assign functions
Rule 2     empty -> <empty>
Rule 3     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 4     camDeclaration -> empty
Rule 5     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 6     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 7     inputsDeclaration -> empty
Rule 8     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 9     outputsDeclaration -> empty
Rule 10    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 11    pwmDeclaration -> empty
Rule 12    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 13    pinList -> C_INT COLON ID
Rule 14    pinList -> C_INT COLON ID COMMA pinList
Rule 15    vars -> tipo idList NEWLINE vars
Rule 16    vars -> empty
Rule 17    f_saveType -> <empty>
Rule 18    idList -> ID
Rule 19    idList -> ID COMMA idList
Rule 20    tipo -> BOOL f_saveType
Rule 21    tipo -> INT f_saveType
Rule 22    tipo -> FLOAT f_saveType
Rule 23    tipo -> CHAR f_saveType
Rule 24    tipo -> STRING f_saveType
Rule 25    tipo -> IMAGE f_saveType
Rule 26    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 28    functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 29    functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 30    functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 31    functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 32    functions -> empty
Rule 33    f_saveModule -> <empty>
Rule 34    parameterList -> empty
Rule 35    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 36    f_addToParam -> <empty>
Rule 37    assign -> ID f_checkID EQUAL expression NEWLINE assign
Rule 38    assign -> empty
Rule 39    f_checkID -> <empty>
Rule 40    block -> empty
Rule 41    block -> TAB newline_tab statement moreStatements
Rule 42    moreStatements -> empty
Rule 43    moreStatements -> TAB newline_tab statement moreStatements
Rule 44    newline_tab -> empty
Rule 45    newline_tab -> NEWLINE TAB newline_tab
Rule 46    statement -> vars
Rule 47    statement -> assign
Rule 48    statement -> condition
Rule 49    statement -> cycle
Rule 50    statement -> funct NEWLINE
Rule 51    statement -> RETURN expression NEWLINE
Rule 52    condition -> IF expression COLON NEWLINE block
Rule 53    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 54    cycle -> WHILE expression COLON NEWLINE block
Rule 55    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 56    funct -> ID LPAREN RPAREN
Rule 57    funct -> ID LPAREN expression expressionList RPAREN
Rule 58    expressionList -> empty
Rule 59    expressionList -> COMMA expression expressionList
Rule 60    expression -> exp
Rule 61    expression -> exp compareToken exp
Rule 62    compareToken -> GREATER_THAN
Rule 63    compareToken -> LESS_THAN
Rule 64    compareToken -> LESS_EQUAL_THAN
Rule 65    compareToken -> GREATER_EQUAL_THAN
Rule 66    compareToken -> NOT_EQUAL_THAN
Rule 67    compareToken -> SAME_AS
Rule 68    exp -> term moreTerms
Rule 69    moreTerms -> empty
Rule 70    moreTerms -> PLUS term moreTerms
Rule 71    moreTerms -> MINUS term moreTerms
Rule 72    term -> factor moreFactors
Rule 73    moreFactors -> empty
Rule 74    moreFactors -> DIVIDE factor moreFactors
Rule 75    moreFactors -> TIMES factor moreFactors
Rule 76    moreFactors -> MOD factor moreFactors
Rule 77    factor -> LPAREN expression RPAREN
Rule 78    factor -> cvar
Rule 79    factor -> funct
Rule 80    cvar -> ID
Rule 81    cvar -> C_BOOL
Rule 82    cvar -> C_INT
Rule 83    cvar -> C_FLOAT
Rule 84    cvar -> C_CHAR
Rule 85    cvar -> C_STRING

Terminals, with rules where they appear

AND                  : 
BOOL                 : 20
CAM                  : 5 6
CHAR                 : 23
COLON                : 5 6 13 14 26 27 28 29 30 31 52 53 53 54 55
COMMA                : 14 19 35 59
C_BOOL               : 81
C_CHAR               : 84
C_FLOAT              : 83
C_INT                : 13 14 82
C_STRING             : 85
DEF                  : 26 27 28 29 30 31
DIVIDE               : 74
DO                   : 55
ELSE                 : 53
EQUAL                : 37
FLOAT                : 22
GREATER_EQUAL_THAN   : 65
GREATER_THAN         : 62
ID                   : 1 5 6 13 14 18 19 26 27 27 28 29 29 31 35 37 56 57 80
IF                   : 52 53
IMAGE                : 25
INPUT                : 8
INT                  : 21
LESS_EQUAL_THAN      : 64
LESS_THAN            : 63
LPAREN               : 26 27 28 29 30 31 56 57 77
MAIN                 : 30 31
MINUS                : 71
MOD                  : 76
NEWLINE              : 1 5 6 8 10 12 15 26 27 28 29 30 31 37 45 50 51 52 53 53 54 55 55
NOT                  : 
NOT_EQUAL_THAN       : 66
OR                   : 
OUTPUT               : 10
PERIOD               : 
PICAM                : 6
PLUS                 : 70
PROGRAM              : 1
PWM                  : 12
RETURN               : 51
RPAREN               : 26 27 28 29 30 31 56 57 77
SAME_AS              : 67
STRING               : 24
TAB                  : 41 43 45
TIMES                : 75
VOID                 : 28 29 30 31
WEBCAM               : 5
WHILE                : 54 55
error                : 

Nonterminals, with rules where they appear

assign               : 1 37 47
block                : 26 27 28 29 30 31 52 53 53 54 55
camDeclaration       : 3
compareToken         : 61
condition            : 48
cvar                 : 78
cycle                : 49
empty                : 4 7 9 11 16 32 34 38 40 42 44 58 69 73
exp                  : 60 61 61
expression           : 37 51 52 53 54 55 57 59 77
expressionList       : 57 59
f_addToParam         : 27 29 31 35
f_checkID            : 37
f_saveModule         : 26 27 28 29 30 31
f_saveType           : 8 10 12 20 21 22 23 24 25
factor               : 72 74 75 76
funct                : 50 79
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 15 19
inputsDeclaration    : 3
moreFactors          : 72 74 75 76
moreStatements       : 41 43
moreTerms            : 68 70 71
newline_tab          : 41 43 45
outputsDeclaration   : 3
parameterList        : 27 29 31 35
pinList              : 8 10 12 14
program              : 0
pwmDeclaration       : 3
statement            : 41 43
term                 : 68 70 71
tipo                 : 15 26 27 27 29 31 35
vars                 : 1 15 46

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID NEWLINE hardware vars assign functions

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID NEWLINE hardware vars assign functions

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . NEWLINE hardware vars assign functions

    NEWLINE         shift and go to state 4


state 4

    (1) program -> PROGRAM ID NEWLINE . hardware vars assign functions
    (3) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (4) camDeclaration -> . empty
    (5) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (2) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 2 (empty -> .)
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID NEWLINE hardware . vars assign functions
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . empty
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 12
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 6

    (5) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 18
    PICAM           shift and go to state 19


state 7

    (3) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (7) inputsDeclaration -> . empty
    (8) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (2) empty -> .

    INPUT           shift and go to state 21
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    inputsDeclaration              shift and go to state 20
    empty                          shift and go to state 22

state 8

    (4) camDeclaration -> empty .

    INPUT           reduce using rule 4 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 4 (camDeclaration -> empty .)
    PWM             reduce using rule 4 (camDeclaration -> empty .)
    BOOL            reduce using rule 4 (camDeclaration -> empty .)
    INT             reduce using rule 4 (camDeclaration -> empty .)
    FLOAT           reduce using rule 4 (camDeclaration -> empty .)
    CHAR            reduce using rule 4 (camDeclaration -> empty .)
    STRING          reduce using rule 4 (camDeclaration -> empty .)
    IMAGE           reduce using rule 4 (camDeclaration -> empty .)
    ID              reduce using rule 4 (camDeclaration -> empty .)
    DEF             reduce using rule 4 (camDeclaration -> empty .)
    $end            reduce using rule 4 (camDeclaration -> empty .)


state 9

    (23) tipo -> CHAR . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 23

state 10

    (22) tipo -> FLOAT . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 24

state 11

    (15) vars -> tipo . idList NEWLINE vars
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList

    ID              shift and go to state 26

    idList                         shift and go to state 25

state 12

    (1) program -> PROGRAM ID NEWLINE hardware vars . assign functions
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE assign
    (38) assign -> . empty
    (2) empty -> .

    ID              shift and go to state 28
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    assign                         shift and go to state 27
    empty                          shift and go to state 29

state 13

    (21) tipo -> INT . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 30

state 14

    (25) tipo -> IMAGE . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 31

state 15

    (20) tipo -> BOOL . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 32

state 16

    (24) tipo -> STRING . f_saveType
    (17) f_saveType -> .

    ID              reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 33

state 17

    (16) vars -> empty .

    ID              reduce using rule 16 (vars -> empty .)
    DEF             reduce using rule 16 (vars -> empty .)
    $end            reduce using rule 16 (vars -> empty .)
    TAB             reduce using rule 16 (vars -> empty .)
    WHILE           reduce using rule 16 (vars -> empty .)
    ELSE            reduce using rule 16 (vars -> empty .)


state 18

    (5) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 34


state 19

    (6) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 35


state 20

    (3) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (9) outputsDeclaration -> . empty
    (10) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (2) empty -> .

    OUTPUT          shift and go to state 37
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    outputsDeclaration             shift and go to state 36
    empty                          shift and go to state 38

state 21

    (8) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (17) f_saveType -> .

    C_INT           reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 39

state 22

    (7) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 7 (inputsDeclaration -> empty .)
    PWM             reduce using rule 7 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 7 (inputsDeclaration -> empty .)
    INT             reduce using rule 7 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 7 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 7 (inputsDeclaration -> empty .)
    STRING          reduce using rule 7 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 7 (inputsDeclaration -> empty .)
    ID              reduce using rule 7 (inputsDeclaration -> empty .)
    DEF             reduce using rule 7 (inputsDeclaration -> empty .)
    $end            reduce using rule 7 (inputsDeclaration -> empty .)


state 23

    (23) tipo -> CHAR f_saveType .

    ID              reduce using rule 23 (tipo -> CHAR f_saveType .)


state 24

    (22) tipo -> FLOAT f_saveType .

    ID              reduce using rule 22 (tipo -> FLOAT f_saveType .)


state 25

    (15) vars -> tipo idList . NEWLINE vars

    NEWLINE         shift and go to state 40


state 26

    (18) idList -> ID .
    (19) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 18 (idList -> ID .)
    COMMA           shift and go to state 41


state 27

    (1) program -> PROGRAM ID NEWLINE hardware vars assign . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 42
    empty                          shift and go to state 43

state 28

    (37) assign -> ID . f_checkID EQUAL expression NEWLINE assign
    (39) f_checkID -> .

    EQUAL           reduce using rule 39 (f_checkID -> .)

    f_checkID                      shift and go to state 45

state 29

    (38) assign -> empty .

    DEF             reduce using rule 38 (assign -> empty .)
    $end            reduce using rule 38 (assign -> empty .)
    TAB             reduce using rule 38 (assign -> empty .)
    WHILE           reduce using rule 38 (assign -> empty .)
    ELSE            reduce using rule 38 (assign -> empty .)


state 30

    (21) tipo -> INT f_saveType .

    ID              reduce using rule 21 (tipo -> INT f_saveType .)


state 31

    (25) tipo -> IMAGE f_saveType .

    ID              reduce using rule 25 (tipo -> IMAGE f_saveType .)


state 32

    (20) tipo -> BOOL f_saveType .

    ID              reduce using rule 20 (tipo -> BOOL f_saveType .)


state 33

    (24) tipo -> STRING f_saveType .

    ID              reduce using rule 24 (tipo -> STRING f_saveType .)


state 34

    (5) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 46


state 35

    (6) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 47


state 36

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (11) pwmDeclaration -> . empty
    (12) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (2) empty -> .

    PWM             shift and go to state 49
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    pwmDeclaration                 shift and go to state 48
    empty                          shift and go to state 50

state 37

    (10) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (17) f_saveType -> .

    C_INT           reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 51

state 38

    (9) outputsDeclaration -> empty .

    PWM             reduce using rule 9 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (outputsDeclaration -> empty .)
    INT             reduce using rule 9 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 9 (outputsDeclaration -> empty .)
    STRING          reduce using rule 9 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (outputsDeclaration -> empty .)
    ID              reduce using rule 9 (outputsDeclaration -> empty .)
    DEF             reduce using rule 9 (outputsDeclaration -> empty .)
    $end            reduce using rule 9 (outputsDeclaration -> empty .)


state 39

    (8) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 53

    pinList                        shift and go to state 52

state 40

    (15) vars -> tipo idList NEWLINE . vars
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . empty
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 54
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 41

    (19) idList -> ID COMMA . idList
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList

    ID              shift and go to state 26

    idList                         shift and go to state 55

state 42

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions .

    $end            reduce using rule 1 (program -> PROGRAM ID NEWLINE hardware vars assign functions .)


state 43

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 44

    (26) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> DEF . VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF . VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> DEF . VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF . VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 57
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 56

state 45

    (37) assign -> ID f_checkID . EQUAL expression NEWLINE assign

    EQUAL           shift and go to state 58


state 46

    (5) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 59


state 47

    (6) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 60


state 48

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 49

    (12) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (17) f_saveType -> .

    C_INT           reduce using rule 17 (f_saveType -> .)

    f_saveType                     shift and go to state 61

state 50

    (11) pwmDeclaration -> empty .

    BOOL            reduce using rule 11 (pwmDeclaration -> empty .)
    INT             reduce using rule 11 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 11 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 11 (pwmDeclaration -> empty .)
    STRING          reduce using rule 11 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 11 (pwmDeclaration -> empty .)
    ID              reduce using rule 11 (pwmDeclaration -> empty .)
    DEF             reduce using rule 11 (pwmDeclaration -> empty .)
    $end            reduce using rule 11 (pwmDeclaration -> empty .)


state 51

    (10) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 53

    pinList                        shift and go to state 62

state 52

    (8) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 63


state 53

    (13) pinList -> C_INT . COLON ID
    (14) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 64


state 54

    (15) vars -> tipo idList NEWLINE vars .

    TAB             reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    DEF             reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    $end            reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    WHILE           reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    ELSE            reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    ID              reduce using rule 15 (vars -> tipo idList NEWLINE vars .)


state 55

    (19) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 19 (idList -> ID COMMA idList .)


state 56

    (26) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 65


state 57

    (28) functions -> DEF VOID . ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 67
    MAIN            shift and go to state 66


state 58

    (37) assign -> ID f_checkID EQUAL . expression NEWLINE assign
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 80

state 59

    (5) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 60

    (6) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 61

    (12) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 53

    pinList                        shift and go to state 81

state 62

    (10) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 82


state 63

    (8) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 8 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 64

    (13) pinList -> C_INT COLON . ID
    (14) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 83


state 65

    (26) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 84

state 66

    (30) functions -> DEF VOID MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 85

state 67

    (28) functions -> DEF VOID ID . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) f_saveModule -> .

    LPAREN          reduce using rule 33 (f_saveModule -> .)

    f_saveModule                   shift and go to state 86

state 68

    (78) factor -> cvar .

    DIVIDE          reduce using rule 78 (factor -> cvar .)
    TIMES           reduce using rule 78 (factor -> cvar .)
    MOD             reduce using rule 78 (factor -> cvar .)
    PLUS            reduce using rule 78 (factor -> cvar .)
    MINUS           reduce using rule 78 (factor -> cvar .)
    GREATER_THAN    reduce using rule 78 (factor -> cvar .)
    LESS_THAN       reduce using rule 78 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 78 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 78 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 78 (factor -> cvar .)
    SAME_AS         reduce using rule 78 (factor -> cvar .)
    NEWLINE         reduce using rule 78 (factor -> cvar .)
    RPAREN          reduce using rule 78 (factor -> cvar .)
    COMMA           reduce using rule 78 (factor -> cvar .)
    COLON           reduce using rule 78 (factor -> cvar .)


state 69

    (79) factor -> funct .

    DIVIDE          reduce using rule 79 (factor -> funct .)
    TIMES           reduce using rule 79 (factor -> funct .)
    MOD             reduce using rule 79 (factor -> funct .)
    PLUS            reduce using rule 79 (factor -> funct .)
    MINUS           reduce using rule 79 (factor -> funct .)
    GREATER_THAN    reduce using rule 79 (factor -> funct .)
    LESS_THAN       reduce using rule 79 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 79 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 79 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 79 (factor -> funct .)
    SAME_AS         reduce using rule 79 (factor -> funct .)
    NEWLINE         reduce using rule 79 (factor -> funct .)
    RPAREN          reduce using rule 79 (factor -> funct .)
    COMMA           reduce using rule 79 (factor -> funct .)
    COLON           reduce using rule 79 (factor -> funct .)


state 70

    (83) cvar -> C_FLOAT .

    DIVIDE          reduce using rule 83 (cvar -> C_FLOAT .)
    TIMES           reduce using rule 83 (cvar -> C_FLOAT .)
    MOD             reduce using rule 83 (cvar -> C_FLOAT .)
    PLUS            reduce using rule 83 (cvar -> C_FLOAT .)
    MINUS           reduce using rule 83 (cvar -> C_FLOAT .)
    GREATER_THAN    reduce using rule 83 (cvar -> C_FLOAT .)
    LESS_THAN       reduce using rule 83 (cvar -> C_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 83 (cvar -> C_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 83 (cvar -> C_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 83 (cvar -> C_FLOAT .)
    SAME_AS         reduce using rule 83 (cvar -> C_FLOAT .)
    NEWLINE         reduce using rule 83 (cvar -> C_FLOAT .)
    RPAREN          reduce using rule 83 (cvar -> C_FLOAT .)
    COMMA           reduce using rule 83 (cvar -> C_FLOAT .)
    COLON           reduce using rule 83 (cvar -> C_FLOAT .)


state 71

    (81) cvar -> C_BOOL .

    DIVIDE          reduce using rule 81 (cvar -> C_BOOL .)
    TIMES           reduce using rule 81 (cvar -> C_BOOL .)
    MOD             reduce using rule 81 (cvar -> C_BOOL .)
    PLUS            reduce using rule 81 (cvar -> C_BOOL .)
    MINUS           reduce using rule 81 (cvar -> C_BOOL .)
    GREATER_THAN    reduce using rule 81 (cvar -> C_BOOL .)
    LESS_THAN       reduce using rule 81 (cvar -> C_BOOL .)
    LESS_EQUAL_THAN reduce using rule 81 (cvar -> C_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 81 (cvar -> C_BOOL .)
    NOT_EQUAL_THAN  reduce using rule 81 (cvar -> C_BOOL .)
    SAME_AS         reduce using rule 81 (cvar -> C_BOOL .)
    NEWLINE         reduce using rule 81 (cvar -> C_BOOL .)
    RPAREN          reduce using rule 81 (cvar -> C_BOOL .)
    COMMA           reduce using rule 81 (cvar -> C_BOOL .)
    COLON           reduce using rule 81 (cvar -> C_BOOL .)


state 72

    (72) term -> factor . moreFactors
    (73) moreFactors -> . empty
    (74) moreFactors -> . DIVIDE factor moreFactors
    (75) moreFactors -> . TIMES factor moreFactors
    (76) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 87
    empty                          shift and go to state 90

state 73

    (77) factor -> LPAREN . expression RPAREN
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 92

state 74

    (82) cvar -> C_INT .

    DIVIDE          reduce using rule 82 (cvar -> C_INT .)
    TIMES           reduce using rule 82 (cvar -> C_INT .)
    MOD             reduce using rule 82 (cvar -> C_INT .)
    PLUS            reduce using rule 82 (cvar -> C_INT .)
    MINUS           reduce using rule 82 (cvar -> C_INT .)
    GREATER_THAN    reduce using rule 82 (cvar -> C_INT .)
    LESS_THAN       reduce using rule 82 (cvar -> C_INT .)
    LESS_EQUAL_THAN reduce using rule 82 (cvar -> C_INT .)
    GREATER_EQUAL_THAN reduce using rule 82 (cvar -> C_INT .)
    NOT_EQUAL_THAN  reduce using rule 82 (cvar -> C_INT .)
    SAME_AS         reduce using rule 82 (cvar -> C_INT .)
    NEWLINE         reduce using rule 82 (cvar -> C_INT .)
    RPAREN          reduce using rule 82 (cvar -> C_INT .)
    COMMA           reduce using rule 82 (cvar -> C_INT .)
    COLON           reduce using rule 82 (cvar -> C_INT .)


state 75

    (80) cvar -> ID .
    (56) funct -> ID . LPAREN RPAREN
    (57) funct -> ID . LPAREN expression expressionList RPAREN

    DIVIDE          reduce using rule 80 (cvar -> ID .)
    TIMES           reduce using rule 80 (cvar -> ID .)
    MOD             reduce using rule 80 (cvar -> ID .)
    PLUS            reduce using rule 80 (cvar -> ID .)
    MINUS           reduce using rule 80 (cvar -> ID .)
    GREATER_THAN    reduce using rule 80 (cvar -> ID .)
    LESS_THAN       reduce using rule 80 (cvar -> ID .)
    LESS_EQUAL_THAN reduce using rule 80 (cvar -> ID .)
    GREATER_EQUAL_THAN reduce using rule 80 (cvar -> ID .)
    NOT_EQUAL_THAN  reduce using rule 80 (cvar -> ID .)
    SAME_AS         reduce using rule 80 (cvar -> ID .)
    NEWLINE         reduce using rule 80 (cvar -> ID .)
    RPAREN          reduce using rule 80 (cvar -> ID .)
    COMMA           reduce using rule 80 (cvar -> ID .)
    COLON           reduce using rule 80 (cvar -> ID .)
    LPAREN          shift and go to state 93


state 76

    (85) cvar -> C_STRING .

    DIVIDE          reduce using rule 85 (cvar -> C_STRING .)
    TIMES           reduce using rule 85 (cvar -> C_STRING .)
    MOD             reduce using rule 85 (cvar -> C_STRING .)
    PLUS            reduce using rule 85 (cvar -> C_STRING .)
    MINUS           reduce using rule 85 (cvar -> C_STRING .)
    GREATER_THAN    reduce using rule 85 (cvar -> C_STRING .)
    LESS_THAN       reduce using rule 85 (cvar -> C_STRING .)
    LESS_EQUAL_THAN reduce using rule 85 (cvar -> C_STRING .)
    GREATER_EQUAL_THAN reduce using rule 85 (cvar -> C_STRING .)
    NOT_EQUAL_THAN  reduce using rule 85 (cvar -> C_STRING .)
    SAME_AS         reduce using rule 85 (cvar -> C_STRING .)
    NEWLINE         reduce using rule 85 (cvar -> C_STRING .)
    RPAREN          reduce using rule 85 (cvar -> C_STRING .)
    COMMA           reduce using rule 85 (cvar -> C_STRING .)
    COLON           reduce using rule 85 (cvar -> C_STRING .)


state 77

    (68) exp -> term . moreTerms
    (69) moreTerms -> . empty
    (70) moreTerms -> . PLUS term moreTerms
    (71) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 94
    empty                          shift and go to state 97

state 78

    (84) cvar -> C_CHAR .

    DIVIDE          reduce using rule 84 (cvar -> C_CHAR .)
    TIMES           reduce using rule 84 (cvar -> C_CHAR .)
    MOD             reduce using rule 84 (cvar -> C_CHAR .)
    PLUS            reduce using rule 84 (cvar -> C_CHAR .)
    MINUS           reduce using rule 84 (cvar -> C_CHAR .)
    GREATER_THAN    reduce using rule 84 (cvar -> C_CHAR .)
    LESS_THAN       reduce using rule 84 (cvar -> C_CHAR .)
    LESS_EQUAL_THAN reduce using rule 84 (cvar -> C_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 84 (cvar -> C_CHAR .)
    NOT_EQUAL_THAN  reduce using rule 84 (cvar -> C_CHAR .)
    SAME_AS         reduce using rule 84 (cvar -> C_CHAR .)
    NEWLINE         reduce using rule 84 (cvar -> C_CHAR .)
    RPAREN          reduce using rule 84 (cvar -> C_CHAR .)
    COMMA           reduce using rule 84 (cvar -> C_CHAR .)
    COLON           reduce using rule 84 (cvar -> C_CHAR .)


state 79

    (60) expression -> exp .
    (61) expression -> exp . compareToken exp
    (62) compareToken -> . GREATER_THAN
    (63) compareToken -> . LESS_THAN
    (64) compareToken -> . LESS_EQUAL_THAN
    (65) compareToken -> . GREATER_EQUAL_THAN
    (66) compareToken -> . NOT_EQUAL_THAN
    (67) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 60 (expression -> exp .)
    COLON           reduce using rule 60 (expression -> exp .)
    COMMA           reduce using rule 60 (expression -> exp .)
    RPAREN          reduce using rule 60 (expression -> exp .)
    GREATER_THAN    shift and go to state 103
    LESS_THAN       shift and go to state 104
    LESS_EQUAL_THAN shift and go to state 100
    GREATER_EQUAL_THAN shift and go to state 99
    NOT_EQUAL_THAN  shift and go to state 102
    SAME_AS         shift and go to state 101

    compareToken                   shift and go to state 98

state 80

    (37) assign -> ID f_checkID EQUAL expression . NEWLINE assign

    NEWLINE         shift and go to state 105


state 81

    (12) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 106


state 82

    (10) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 10 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 83

    (13) pinList -> C_INT COLON ID .
    (14) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 13 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 107


state 84

    (26) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 108


state 85

    (30) functions -> DEF VOID MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 109


state 86

    (28) functions -> DEF VOID ID f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 110


state 87

    (72) term -> factor moreFactors .

    PLUS            reduce using rule 72 (term -> factor moreFactors .)
    MINUS           reduce using rule 72 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 72 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 72 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 72 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 72 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 72 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 72 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 72 (term -> factor moreFactors .)
    RPAREN          reduce using rule 72 (term -> factor moreFactors .)
    COMMA           reduce using rule 72 (term -> factor moreFactors .)
    COLON           reduce using rule 72 (term -> factor moreFactors .)


state 88

    (74) moreFactors -> DIVIDE . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    funct                          shift and go to state 69
    cvar                           shift and go to state 68
    factor                         shift and go to state 111

state 89

    (75) moreFactors -> TIMES . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    funct                          shift and go to state 69
    cvar                           shift and go to state 68
    factor                         shift and go to state 112

state 90

    (73) moreFactors -> empty .

    PLUS            reduce using rule 73 (moreFactors -> empty .)
    MINUS           reduce using rule 73 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 73 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 73 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 73 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 73 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 73 (moreFactors -> empty .)
    SAME_AS         reduce using rule 73 (moreFactors -> empty .)
    NEWLINE         reduce using rule 73 (moreFactors -> empty .)
    RPAREN          reduce using rule 73 (moreFactors -> empty .)
    COMMA           reduce using rule 73 (moreFactors -> empty .)
    COLON           reduce using rule 73 (moreFactors -> empty .)


state 91

    (76) moreFactors -> MOD . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    funct                          shift and go to state 69
    cvar                           shift and go to state 68
    factor                         shift and go to state 113

state 92

    (77) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 114


state 93

    (56) funct -> ID LPAREN . RPAREN
    (57) funct -> ID LPAREN . expression expressionList RPAREN
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 115
    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 116

state 94

    (68) exp -> term moreTerms .

    NEWLINE         reduce using rule 68 (exp -> term moreTerms .)
    RPAREN          reduce using rule 68 (exp -> term moreTerms .)
    COMMA           reduce using rule 68 (exp -> term moreTerms .)
    COLON           reduce using rule 68 (exp -> term moreTerms .)
    GREATER_THAN    reduce using rule 68 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 68 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 68 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 68 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 68 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 68 (exp -> term moreTerms .)


state 95

    (70) moreTerms -> PLUS . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 117
    funct                          shift and go to state 69
    factor                         shift and go to state 72
    cvar                           shift and go to state 68

state 96

    (71) moreTerms -> MINUS . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 118
    funct                          shift and go to state 69
    factor                         shift and go to state 72
    cvar                           shift and go to state 68

state 97

    (69) moreTerms -> empty .

    GREATER_THAN    reduce using rule 69 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 69 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 69 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 69 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 69 (moreTerms -> empty .)
    SAME_AS         reduce using rule 69 (moreTerms -> empty .)
    NEWLINE         reduce using rule 69 (moreTerms -> empty .)
    RPAREN          reduce using rule 69 (moreTerms -> empty .)
    COMMA           reduce using rule 69 (moreTerms -> empty .)
    COLON           reduce using rule 69 (moreTerms -> empty .)


state 98

    (61) expression -> exp compareToken . exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 119
    factor                         shift and go to state 72
    cvar                           shift and go to state 68

state 99

    (65) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 65 (compareToken -> GREATER_EQUAL_THAN .)


state 100

    (64) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 64 (compareToken -> LESS_EQUAL_THAN .)


state 101

    (67) compareToken -> SAME_AS .

    LPAREN          reduce using rule 67 (compareToken -> SAME_AS .)
    ID              reduce using rule 67 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 67 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 67 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 67 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 67 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 67 (compareToken -> SAME_AS .)


state 102

    (66) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 66 (compareToken -> NOT_EQUAL_THAN .)


state 103

    (62) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 62 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 62 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 62 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 62 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 62 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 62 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 62 (compareToken -> GREATER_THAN .)


state 104

    (63) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 63 (compareToken -> LESS_THAN .)
    ID              reduce using rule 63 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 63 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 63 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 63 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 63 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 63 (compareToken -> LESS_THAN .)


state 105

    (37) assign -> ID f_checkID EQUAL expression NEWLINE . assign
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE assign
    (38) assign -> . empty
    (2) empty -> .

    ID              shift and go to state 28
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 29
    assign                         shift and go to state 120

state 106

    (12) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    DEF             reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 12 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 107

    (14) pinList -> C_INT COLON ID COMMA . pinList
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 53

    pinList                        shift and go to state 121

state 108

    (26) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 122
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 123

state 109

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 124
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 125

state 110

    (28) functions -> DEF VOID ID f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 126
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 127

state 111

    (74) moreFactors -> DIVIDE factor . moreFactors
    (73) moreFactors -> . empty
    (74) moreFactors -> . DIVIDE factor moreFactors
    (75) moreFactors -> . TIMES factor moreFactors
    (76) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 128
    empty                          shift and go to state 90

state 112

    (75) moreFactors -> TIMES factor . moreFactors
    (73) moreFactors -> . empty
    (74) moreFactors -> . DIVIDE factor moreFactors
    (75) moreFactors -> . TIMES factor moreFactors
    (76) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 129
    empty                          shift and go to state 90

state 113

    (76) moreFactors -> MOD factor . moreFactors
    (73) moreFactors -> . empty
    (74) moreFactors -> . DIVIDE factor moreFactors
    (75) moreFactors -> . TIMES factor moreFactors
    (76) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 88
    TIMES           shift and go to state 89
    MOD             shift and go to state 91
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 130
    empty                          shift and go to state 90

state 114

    (77) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 77 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 77 (factor -> LPAREN expression RPAREN .)


state 115

    (56) funct -> ID LPAREN RPAREN .

    DIVIDE          reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 56 (funct -> ID LPAREN RPAREN .)


state 116

    (57) funct -> ID LPAREN expression . expressionList RPAREN
    (58) expressionList -> . empty
    (59) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 132
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 131
    empty                          shift and go to state 133

state 117

    (70) moreTerms -> PLUS term . moreTerms
    (69) moreTerms -> . empty
    (70) moreTerms -> . PLUS term moreTerms
    (71) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 134
    empty                          shift and go to state 97

state 118

    (71) moreTerms -> MINUS term . moreTerms
    (69) moreTerms -> . empty
    (70) moreTerms -> . PLUS term moreTerms
    (71) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 95
    MINUS           shift and go to state 96
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 135
    empty                          shift and go to state 97

state 119

    (61) expression -> exp compareToken exp .

    NEWLINE         reduce using rule 61 (expression -> exp compareToken exp .)
    COLON           reduce using rule 61 (expression -> exp compareToken exp .)
    COMMA           reduce using rule 61 (expression -> exp compareToken exp .)
    RPAREN          reduce using rule 61 (expression -> exp compareToken exp .)


state 120

    (37) assign -> ID f_checkID EQUAL expression NEWLINE assign .

    DEF             reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE assign .)
    $end            reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE assign .)
    TAB             reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE assign .)
    WHILE           reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE assign .)
    ELSE            reduce using rule 37 (assign -> ID f_checkID EQUAL expression NEWLINE assign .)


state 121

    (14) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID COMMA pinList .)


state 122

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 136


state 123

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 137


state 124

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 138


state 125

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 139


state 126

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 140


state 127

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 141


state 128

    (74) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 74 (moreFactors -> DIVIDE factor moreFactors .)


state 129

    (75) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 75 (moreFactors -> TIMES factor moreFactors .)


state 130

    (76) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 76 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 76 (moreFactors -> MOD factor moreFactors .)


state 131

    (57) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 142


state 132

    (59) expressionList -> COMMA . expression expressionList
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 143

state 133

    (58) expressionList -> empty .

    RPAREN          reduce using rule 58 (expressionList -> empty .)


state 134

    (70) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 70 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 70 (moreTerms -> PLUS term moreTerms .)


state 135

    (71) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 71 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 71 (moreTerms -> MINUS term moreTerms .)


state 136

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 144


state 137

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 145

state 138

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 146


state 139

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 147

state 140

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 148


state 141

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 149

state 142

    (57) funct -> ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 57 (funct -> ID LPAREN expression expressionList RPAREN .)


state 143

    (59) expressionList -> COMMA expression . expressionList
    (58) expressionList -> . empty
    (59) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 132
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 150
    empty                          shift and go to state 133

state 144

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 151
    block                          shift and go to state 152

state 145

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (2) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 154
    empty                          shift and go to state 155

state 146

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 157
    empty                          shift and go to state 151

state 147

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (2) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 158
    empty                          shift and go to state 155

state 148

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 159
    empty                          shift and go to state 151

state 149

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (2) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 160
    empty                          shift and go to state 155

state 150

    (59) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 59 (expressionList -> COMMA expression expressionList .)


state 151

    (40) block -> empty .

    DEF             reduce using rule 40 (block -> empty .)
    $end            reduce using rule 40 (block -> empty .)
    WHILE           reduce using rule 40 (block -> empty .)
    TAB             reduce using rule 40 (block -> empty .)
    ELSE            reduce using rule 40 (block -> empty .)


state 152

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 161
    empty                          shift and go to state 43

state 153

    (41) block -> TAB . newline_tab statement moreStatements
    (44) newline_tab -> . empty
    (45) newline_tab -> . NEWLINE TAB newline_tab
    (2) empty -> .

    NEWLINE         shift and go to state 163
    RETURN          reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    newline_tab                    shift and go to state 162
    empty                          shift and go to state 164

state 154

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 165


state 155

    (34) parameterList -> empty .

    RPAREN          reduce using rule 34 (parameterList -> empty .)


state 156

    (35) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 166

state 157

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 167
    empty                          shift and go to state 43

state 158

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 168


state 159

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 169
    empty                          shift and go to state 43

state 160

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 170


state 161

    (26) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 162

    (41) block -> TAB newline_tab . statement moreStatements
    (46) statement -> . vars
    (47) statement -> . assign
    (48) statement -> . condition
    (49) statement -> . cycle
    (50) statement -> . funct NEWLINE
    (51) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE assign
    (38) assign -> . empty
    (52) condition -> . IF expression COLON NEWLINE block
    (53) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (54) cycle -> . WHILE expression COLON NEWLINE block
    (55) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (2) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 172
    ID              shift and go to state 179
    IF              shift and go to state 181
    WHILE           shift and go to state 175
    DO              shift and go to state 171
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 173
    funct                          shift and go to state 174
    empty                          shift and go to state 177
    statement                      shift and go to state 178
    cycle                          shift and go to state 176
    assign                         shift and go to state 182
    condition                      shift and go to state 180

state 163

    (45) newline_tab -> NEWLINE . TAB newline_tab

    TAB             shift and go to state 183


state 164

    (44) newline_tab -> empty .

    RETURN          reduce using rule 44 (newline_tab -> empty .)
    ID              reduce using rule 44 (newline_tab -> empty .)
    IF              reduce using rule 44 (newline_tab -> empty .)
    WHILE           reduce using rule 44 (newline_tab -> empty .)
    DO              reduce using rule 44 (newline_tab -> empty .)
    BOOL            reduce using rule 44 (newline_tab -> empty .)
    INT             reduce using rule 44 (newline_tab -> empty .)
    FLOAT           reduce using rule 44 (newline_tab -> empty .)
    CHAR            reduce using rule 44 (newline_tab -> empty .)
    STRING          reduce using rule 44 (newline_tab -> empty .)
    IMAGE           reduce using rule 44 (newline_tab -> empty .)
    TAB             reduce using rule 44 (newline_tab -> empty .)
    DEF             reduce using rule 44 (newline_tab -> empty .)
    $end            reduce using rule 44 (newline_tab -> empty .)
    ELSE            reduce using rule 44 (newline_tab -> empty .)


state 165

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 184


state 166

    (35) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 185


state 167

    (30) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 30 (functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 168

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 186


state 169

    (28) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 28 (functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 170

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 187


state 171

    (55) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 188


state 172

    (51) statement -> RETURN . expression NEWLINE
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 189

state 173

    (46) statement -> vars .

    TAB             reduce using rule 46 (statement -> vars .)
    DEF             reduce using rule 46 (statement -> vars .)
    $end            reduce using rule 46 (statement -> vars .)
    WHILE           reduce using rule 46 (statement -> vars .)
    ELSE            reduce using rule 46 (statement -> vars .)


state 174

    (50) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 190


state 175

    (54) cycle -> WHILE . expression COLON NEWLINE block
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 191

state 176

    (49) statement -> cycle .

    TAB             reduce using rule 49 (statement -> cycle .)
    DEF             reduce using rule 49 (statement -> cycle .)
    $end            reduce using rule 49 (statement -> cycle .)
    WHILE           reduce using rule 49 (statement -> cycle .)
    ELSE            reduce using rule 49 (statement -> cycle .)


state 177

    (16) vars -> empty .
    (38) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 16 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 16 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 16 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (vars -> empty .)
    TAB             reduce using rule 16 (vars -> empty .)
    DEF             reduce using rule 16 (vars -> empty .)
    $end            reduce using rule 16 (vars -> empty .)
    WHILE           reduce using rule 16 (vars -> empty .)
    ELSE            reduce using rule 16 (vars -> empty .)

  ! TAB             [ reduce using rule 38 (assign -> empty .) ]
  ! DEF             [ reduce using rule 38 (assign -> empty .) ]
  ! $end            [ reduce using rule 38 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 38 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 38 (assign -> empty .) ]


state 178

    (41) block -> TAB newline_tab statement . moreStatements
    (42) moreStatements -> . empty
    (43) moreStatements -> . TAB newline_tab statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 193
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 192
    moreStatements                 shift and go to state 194

state 179

    (37) assign -> ID . f_checkID EQUAL expression NEWLINE assign
    (56) funct -> ID . LPAREN RPAREN
    (57) funct -> ID . LPAREN expression expressionList RPAREN
    (39) f_checkID -> .

    LPAREN          shift and go to state 93
    EQUAL           reduce using rule 39 (f_checkID -> .)

    f_checkID                      shift and go to state 45

state 180

    (48) statement -> condition .

    TAB             reduce using rule 48 (statement -> condition .)
    DEF             reduce using rule 48 (statement -> condition .)
    $end            reduce using rule 48 (statement -> condition .)
    WHILE           reduce using rule 48 (statement -> condition .)
    ELSE            reduce using rule 48 (statement -> condition .)


state 181

    (52) condition -> IF . expression COLON NEWLINE block
    (53) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 195

state 182

    (47) statement -> assign .

    TAB             reduce using rule 47 (statement -> assign .)
    DEF             reduce using rule 47 (statement -> assign .)
    $end            reduce using rule 47 (statement -> assign .)
    WHILE           reduce using rule 47 (statement -> assign .)
    ELSE            reduce using rule 47 (statement -> assign .)


state 183

    (45) newline_tab -> NEWLINE TAB . newline_tab
    (44) newline_tab -> . empty
    (45) newline_tab -> . NEWLINE TAB newline_tab
    (2) empty -> .

    NEWLINE         shift and go to state 163
    RETURN          reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    newline_tab                    shift and go to state 196
    empty                          shift and go to state 164

state 184

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 197


state 185

    (35) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (36) f_addToParam -> .

    COMMA           reduce using rule 36 (f_addToParam -> .)
    RPAREN          reduce using rule 36 (f_addToParam -> .)

    f_addToParam                   shift and go to state 198

state 186

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 199


state 187

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 200


state 188

    (55) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 201


state 189

    (51) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 202


state 190

    (50) statement -> funct NEWLINE .

    TAB             reduce using rule 50 (statement -> funct NEWLINE .)
    DEF             reduce using rule 50 (statement -> funct NEWLINE .)
    $end            reduce using rule 50 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 50 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 50 (statement -> funct NEWLINE .)


state 191

    (54) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 203


state 192

    (42) moreStatements -> empty .

    TAB             reduce using rule 42 (moreStatements -> empty .)
    DEF             reduce using rule 42 (moreStatements -> empty .)
    $end            reduce using rule 42 (moreStatements -> empty .)
    WHILE           reduce using rule 42 (moreStatements -> empty .)
    ELSE            reduce using rule 42 (moreStatements -> empty .)


state 193

    (43) moreStatements -> TAB . newline_tab statement moreStatements
    (44) newline_tab -> . empty
    (45) newline_tab -> . NEWLINE TAB newline_tab
    (2) empty -> .

    NEWLINE         shift and go to state 163
    RETURN          reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    DO              reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    newline_tab                    shift and go to state 204
    empty                          shift and go to state 164

state 194

    (41) block -> TAB newline_tab statement moreStatements .

    DEF             reduce using rule 41 (block -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 41 (block -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 41 (block -> TAB newline_tab statement moreStatements .)
    TAB             reduce using rule 41 (block -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 41 (block -> TAB newline_tab statement moreStatements .)


state 195

    (52) condition -> IF expression . COLON NEWLINE block
    (53) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 205


state 196

    (45) newline_tab -> NEWLINE TAB newline_tab .

    RETURN          reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    ID              reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    IF              reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    WHILE           reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    DO              reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    BOOL            reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    INT             reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    FLOAT           reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    CHAR            reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    STRING          reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    IMAGE           reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    TAB             reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    DEF             reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    $end            reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)
    ELSE            reduce using rule 45 (newline_tab -> NEWLINE TAB newline_tab .)


state 197

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 151
    block                          shift and go to state 206

state 198

    (35) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (2) empty -> .

    COMMA           shift and go to state 156
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 207
    empty                          shift and go to state 155

state 199

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 151
    block                          shift and go to state 208

state 200

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 151
    block                          shift and go to state 209

state 201

    (55) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 153
    WHILE           reduce using rule 2 (empty -> .)

    block                          shift and go to state 210
    empty                          shift and go to state 151

state 202

    (51) statement -> RETURN expression NEWLINE .

    TAB             reduce using rule 51 (statement -> RETURN expression NEWLINE .)
    DEF             reduce using rule 51 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 51 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 51 (statement -> RETURN expression NEWLINE .)
    ELSE            reduce using rule 51 (statement -> RETURN expression NEWLINE .)


state 203

    (54) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 211


state 204

    (43) moreStatements -> TAB newline_tab . statement moreStatements
    (46) statement -> . vars
    (47) statement -> . assign
    (48) statement -> . condition
    (49) statement -> . cycle
    (50) statement -> . funct NEWLINE
    (51) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . empty
    (37) assign -> . ID f_checkID EQUAL expression NEWLINE assign
    (38) assign -> . empty
    (52) condition -> . IF expression COLON NEWLINE block
    (53) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (54) cycle -> . WHILE expression COLON NEWLINE block
    (55) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN
    (20) tipo -> . BOOL f_saveType
    (21) tipo -> . INT f_saveType
    (22) tipo -> . FLOAT f_saveType
    (23) tipo -> . CHAR f_saveType
    (24) tipo -> . STRING f_saveType
    (25) tipo -> . IMAGE f_saveType
    (2) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 172
    ID              shift and go to state 179
    IF              shift and go to state 181
    WHILE           shift and go to state 175
    DO              shift and go to state 171
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 173
    funct                          shift and go to state 174
    empty                          shift and go to state 177
    statement                      shift and go to state 212
    cycle                          shift and go to state 176
    assign                         shift and go to state 182
    condition                      shift and go to state 180

state 205

    (52) condition -> IF expression COLON . NEWLINE block
    (53) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 213


state 206

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 214
    empty                          shift and go to state 43

state 207

    (35) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 35 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 208

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 215
    empty                          shift and go to state 43

state 209

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 44
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 216
    empty                          shift and go to state 43

state 210

    (55) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 217


state 211

    (54) cycle -> WHILE expression COLON NEWLINE . block
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    block                          shift and go to state 218
    empty                          shift and go to state 151

state 212

    (43) moreStatements -> TAB newline_tab statement . moreStatements
    (42) moreStatements -> . empty
    (43) moreStatements -> . TAB newline_tab statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 193
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 192
    moreStatements                 shift and go to state 219

state 213

    (52) condition -> IF expression COLON NEWLINE . block
    (53) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    block                          shift and go to state 220
    empty                          shift and go to state 151

state 214

    (27) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 215

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 216

    (29) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 217

    (55) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (60) expression -> . exp
    (61) expression -> . exp compareToken exp
    (68) exp -> . term moreTerms
    (72) term -> . factor moreFactors
    (77) factor -> . LPAREN expression RPAREN
    (78) factor -> . cvar
    (79) factor -> . funct
    (80) cvar -> . ID
    (81) cvar -> . C_BOOL
    (82) cvar -> . C_INT
    (83) cvar -> . C_FLOAT
    (84) cvar -> . C_CHAR
    (85) cvar -> . C_STRING
    (56) funct -> . ID LPAREN RPAREN
    (57) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 73
    ID              shift and go to state 75
    C_BOOL          shift and go to state 71
    C_INT           shift and go to state 74
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 78
    C_STRING        shift and go to state 76

    term                           shift and go to state 77
    funct                          shift and go to state 69
    exp                            shift and go to state 79
    factor                         shift and go to state 72
    cvar                           shift and go to state 68
    expression                     shift and go to state 221

state 218

    (54) cycle -> WHILE expression COLON NEWLINE block .

    TAB             reduce using rule 54 (cycle -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 54 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 54 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 54 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 54 (cycle -> WHILE expression COLON NEWLINE block .)


state 219

    (43) moreStatements -> TAB newline_tab statement moreStatements .

    TAB             reduce using rule 43 (moreStatements -> TAB newline_tab statement moreStatements .)
    DEF             reduce using rule 43 (moreStatements -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 43 (moreStatements -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 43 (moreStatements -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 43 (moreStatements -> TAB newline_tab statement moreStatements .)


state 220

    (52) condition -> IF expression COLON NEWLINE block .
    (53) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 52 (condition -> IF expression COLON NEWLINE block .)
    DEF             reduce using rule 52 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 52 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 52 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 222

  ! ELSE            [ reduce using rule 52 (condition -> IF expression COLON NEWLINE block .) ]


state 221

    (55) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 223


state 222

    (53) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 224


state 223

    (55) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    TAB             reduce using rule 55 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    DEF             reduce using rule 55 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 55 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 55 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 55 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 224

    (53) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 225


state 225

    (53) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (40) block -> . empty
    (41) block -> . TAB newline_tab statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 153
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    block                          shift and go to state 226
    empty                          shift and go to state 151

state 226

    (53) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    TAB             reduce using rule 53 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    DEF             reduce using rule 53 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 53 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 53 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 53 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for TAB in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 204 resolved as shift
WARNING: shift/reduce conflict for TAB in state 211 resolved as shift
WARNING: shift/reduce conflict for TAB in state 212 resolved as shift
WARNING: shift/reduce conflict for TAB in state 213 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 220 resolved as shift
WARNING: shift/reduce conflict for TAB in state 225 resolved as shift
WARNING: reduce/reduce conflict in state 177 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 177
