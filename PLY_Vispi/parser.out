Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID NEWLINE hardware vars assign functions
Rule 2     empty -> <empty>
Rule 3     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 4     camDeclaration -> empty
Rule 5     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 6     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 7     inputsDeclaration -> empty
Rule 8     inputsDeclaration -> INPUT saveType pinList NEWLINE
Rule 9     outputsDeclaration -> empty
Rule 10    outputsDeclaration -> OUTPUT saveType pinList NEWLINE
Rule 11    pwmDeclaration -> empty
Rule 12    pwmDeclaration -> PWM saveType pinList NEWLINE
Rule 13    pinList -> C_INT COLON ID
Rule 14    pinList -> C_INT COLON ID COMMA pinList
Rule 15    vars -> tipo saveType idList NEWLINE vars
Rule 16    vars -> tipo saveType assign vars
Rule 17    vars -> empty
Rule 18    saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL
Rule 22    tipo -> INT
Rule 23    tipo -> FLOAT
Rule 24    tipo -> CHAR
Rule 25    tipo -> STRING
Rule 26    tipo -> IMAGE
Rule 27    functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
Rule 28    functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 29    functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
Rule 30    functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 31    functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
Rule 32    functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 33    functions -> empty
Rule 34    parameterList -> empty
Rule 35    parameterList -> COMMA tipo ID parameterList
Rule 36    assign -> idList EQUAL expression NEWLINE assign
Rule 37    assign -> empty
Rule 38    block -> empty
Rule 39    block -> TAB statement moreStatements
Rule 40    moreStatements -> empty
Rule 41    moreStatements -> TAB statement moreStatements
Rule 42    statement -> vars
Rule 43    statement -> assign
Rule 44    statement -> condition
Rule 45    statement -> cycle
Rule 46    statement -> funct NEWLINE
Rule 47    statement -> RETURN expression NEWLINE
Rule 48    condition -> IF expression COLON NEWLINE block
Rule 49    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 50    cycle -> WHILE expression COLON NEWLINE block
Rule 51    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 52    funct -> ID LPAREN RPAREN
Rule 53    funct -> ID LPAREN expression expressionList RPAREN
Rule 54    expressionList -> empty
Rule 55    expressionList -> COMMA expression expressionList
Rule 56    expression -> exp
Rule 57    expression -> exp compareToken exp
Rule 58    compareToken -> GREATER_THAN
Rule 59    compareToken -> LESS_THAN
Rule 60    compareToken -> LESS_EQUAL_THAN
Rule 61    compareToken -> GREATER_EQUAL_THAN
Rule 62    compareToken -> NOT_EQUAL_THAN
Rule 63    compareToken -> SAME_AS
Rule 64    exp -> term moreTerms
Rule 65    moreTerms -> empty
Rule 66    moreTerms -> PLUS term moreTerms
Rule 67    moreTerms -> MINUS term moreTerms
Rule 68    term -> factor moreFactors
Rule 69    moreFactors -> empty
Rule 70    moreFactors -> DIVIDE factor moreFactors
Rule 71    moreFactors -> TIMES factor moreFactors
Rule 72    moreFactors -> MOD factor moreFactors
Rule 73    factor -> LPAREN expression RPAREN
Rule 74    factor -> cvar
Rule 75    factor -> funct
Rule 76    cvar -> ID
Rule 77    cvar -> C_BOOL
Rule 78    cvar -> C_INT
Rule 79    cvar -> C_FLOAT
Rule 80    cvar -> C_CHAR
Rule 81    cvar -> C_STRING

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CAM                  : 5 6
CHAR                 : 24
COLON                : 5 6 13 14 27 28 29 30 31 32 48 49 49 50 51
COMMA                : 14 20 35 55
C_BOOL               : 77
C_CHAR               : 80
C_FLOAT              : 79
C_INT                : 13 14 78
C_STRING             : 81
DEF                  : 27 28 29 30 31 32
DIVIDE               : 70
DO                   : 51
ELSE                 : 49
EQUAL                : 36
FLOAT                : 23
GREATER_EQUAL_THAN   : 61
GREATER_THAN         : 58
ID                   : 1 5 6 13 14 19 20 27 28 28 29 30 30 32 35 52 53 76
IF                   : 48 49
IMAGE                : 26
INPUT                : 8
INT                  : 22
LESS_EQUAL_THAN      : 60
LESS_THAN            : 59
LPAREN               : 27 28 29 30 31 32 52 53 73
MAIN                 : 31 32
MINUS                : 67
MOD                  : 72
NEWLINE              : 1 5 6 8 10 12 15 27 28 29 30 31 32 36 46 47 48 49 49 50 51 51
NOT                  : 
NOT_EQUAL_THAN       : 62
OR                   : 
OUTPUT               : 10
PERIOD               : 
PICAM                : 6
PLUS                 : 66
PROGRAM              : 1
PWM                  : 12
RETURN               : 47
RPAREN               : 27 28 29 30 31 32 52 53 73
SAME_AS              : 63
STRING               : 25
TAB                  : 39 41
TIMES                : 71
VOID                 : 29 30 31 32
WEBCAM               : 5
WHILE                : 50 51
error                : 

Nonterminals, with rules where they appear

assign               : 1 16 36 43
block                : 27 28 29 30 31 32 48 49 49 50 51
camDeclaration       : 3
compareToken         : 57
condition            : 44
cvar                 : 74
cycle                : 45
empty                : 4 7 9 11 17 33 34 37 38 40 54 65 69
exp                  : 56 57 57
expression           : 36 47 48 49 50 51 53 55 73
expressionList       : 53 55
factor               : 68 70 71 72
funct                : 46 75
functions            : 1 27 28 29 30 31 32
hardware             : 1
idList               : 15 20 36
inputsDeclaration    : 3
moreFactors          : 68 70 71 72
moreStatements       : 39 41
moreTerms            : 64 66 67
outputsDeclaration   : 3
parameterList        : 28 30 32 35
pinList              : 8 10 12 14
program              : 0
pwmDeclaration       : 3
saveType             : 8 10 12 15 16
statement            : 39 41
term                 : 64 66 67
tipo                 : 15 16 27 28 28 30 32 35
vars                 : 1 15 16 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID NEWLINE hardware vars assign functions

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID NEWLINE hardware vars assign functions

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . NEWLINE hardware vars assign functions

    NEWLINE         shift and go to state 4


state 4

    (1) program -> PROGRAM ID NEWLINE . hardware vars assign functions
    (3) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (4) camDeclaration -> . empty
    (5) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (2) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 2 (empty -> .)
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID NEWLINE hardware . vars assign functions
    (15) vars -> . tipo saveType idList NEWLINE vars
    (16) vars -> . tipo saveType assign vars
    (17) vars -> . empty
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    tipo                           shift and go to state 11
    vars                           shift and go to state 12
    empty                          shift and go to state 17

state 6

    (5) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 18
    PICAM           shift and go to state 19


state 7

    (3) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (7) inputsDeclaration -> . empty
    (8) inputsDeclaration -> . INPUT saveType pinList NEWLINE
    (2) empty -> .

    INPUT           shift and go to state 21
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    inputsDeclaration              shift and go to state 20
    empty                          shift and go to state 22

state 8

    (4) camDeclaration -> empty .

    INPUT           reduce using rule 4 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 4 (camDeclaration -> empty .)
    PWM             reduce using rule 4 (camDeclaration -> empty .)
    BOOL            reduce using rule 4 (camDeclaration -> empty .)
    INT             reduce using rule 4 (camDeclaration -> empty .)
    FLOAT           reduce using rule 4 (camDeclaration -> empty .)
    CHAR            reduce using rule 4 (camDeclaration -> empty .)
    STRING          reduce using rule 4 (camDeclaration -> empty .)
    IMAGE           reduce using rule 4 (camDeclaration -> empty .)
    ID              reduce using rule 4 (camDeclaration -> empty .)
    DEF             reduce using rule 4 (camDeclaration -> empty .)
    $end            reduce using rule 4 (camDeclaration -> empty .)


state 9

    (24) tipo -> CHAR .

    ID              reduce using rule 24 (tipo -> CHAR .)
    BOOL            reduce using rule 24 (tipo -> CHAR .)
    INT             reduce using rule 24 (tipo -> CHAR .)
    FLOAT           reduce using rule 24 (tipo -> CHAR .)
    CHAR            reduce using rule 24 (tipo -> CHAR .)
    STRING          reduce using rule 24 (tipo -> CHAR .)
    IMAGE           reduce using rule 24 (tipo -> CHAR .)
    TAB             reduce using rule 24 (tipo -> CHAR .)
    DEF             reduce using rule 24 (tipo -> CHAR .)
    $end            reduce using rule 24 (tipo -> CHAR .)
    WHILE           reduce using rule 24 (tipo -> CHAR .)
    ELSE            reduce using rule 24 (tipo -> CHAR .)


state 10

    (23) tipo -> FLOAT .

    ID              reduce using rule 23 (tipo -> FLOAT .)
    BOOL            reduce using rule 23 (tipo -> FLOAT .)
    INT             reduce using rule 23 (tipo -> FLOAT .)
    FLOAT           reduce using rule 23 (tipo -> FLOAT .)
    CHAR            reduce using rule 23 (tipo -> FLOAT .)
    STRING          reduce using rule 23 (tipo -> FLOAT .)
    IMAGE           reduce using rule 23 (tipo -> FLOAT .)
    TAB             reduce using rule 23 (tipo -> FLOAT .)
    DEF             reduce using rule 23 (tipo -> FLOAT .)
    $end            reduce using rule 23 (tipo -> FLOAT .)
    WHILE           reduce using rule 23 (tipo -> FLOAT .)
    ELSE            reduce using rule 23 (tipo -> FLOAT .)


state 11

    (15) vars -> tipo . saveType idList NEWLINE vars
    (16) vars -> tipo . saveType assign vars
    (18) saveType -> .

    ID              reduce using rule 18 (saveType -> .)
    BOOL            reduce using rule 18 (saveType -> .)
    INT             reduce using rule 18 (saveType -> .)
    FLOAT           reduce using rule 18 (saveType -> .)
    CHAR            reduce using rule 18 (saveType -> .)
    STRING          reduce using rule 18 (saveType -> .)
    IMAGE           reduce using rule 18 (saveType -> .)
    DEF             reduce using rule 18 (saveType -> .)
    $end            reduce using rule 18 (saveType -> .)
    TAB             reduce using rule 18 (saveType -> .)
    WHILE           reduce using rule 18 (saveType -> .)
    ELSE            reduce using rule 18 (saveType -> .)

    saveType                       shift and go to state 23

state 12

    (1) program -> PROGRAM ID NEWLINE hardware vars . assign functions
    (36) assign -> . idList EQUAL expression NEWLINE assign
    (37) assign -> . empty
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList
    (2) empty -> .

    ID              shift and go to state 26
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    idList                         shift and go to state 24
    assign                         shift and go to state 25
    empty                          shift and go to state 27

state 13

    (22) tipo -> INT .

    ID              reduce using rule 22 (tipo -> INT .)
    BOOL            reduce using rule 22 (tipo -> INT .)
    INT             reduce using rule 22 (tipo -> INT .)
    FLOAT           reduce using rule 22 (tipo -> INT .)
    CHAR            reduce using rule 22 (tipo -> INT .)
    STRING          reduce using rule 22 (tipo -> INT .)
    IMAGE           reduce using rule 22 (tipo -> INT .)
    TAB             reduce using rule 22 (tipo -> INT .)
    DEF             reduce using rule 22 (tipo -> INT .)
    $end            reduce using rule 22 (tipo -> INT .)
    WHILE           reduce using rule 22 (tipo -> INT .)
    ELSE            reduce using rule 22 (tipo -> INT .)


state 14

    (26) tipo -> IMAGE .

    ID              reduce using rule 26 (tipo -> IMAGE .)
    BOOL            reduce using rule 26 (tipo -> IMAGE .)
    INT             reduce using rule 26 (tipo -> IMAGE .)
    FLOAT           reduce using rule 26 (tipo -> IMAGE .)
    CHAR            reduce using rule 26 (tipo -> IMAGE .)
    STRING          reduce using rule 26 (tipo -> IMAGE .)
    IMAGE           reduce using rule 26 (tipo -> IMAGE .)
    TAB             reduce using rule 26 (tipo -> IMAGE .)
    DEF             reduce using rule 26 (tipo -> IMAGE .)
    $end            reduce using rule 26 (tipo -> IMAGE .)
    WHILE           reduce using rule 26 (tipo -> IMAGE .)
    ELSE            reduce using rule 26 (tipo -> IMAGE .)


state 15

    (21) tipo -> BOOL .

    ID              reduce using rule 21 (tipo -> BOOL .)
    BOOL            reduce using rule 21 (tipo -> BOOL .)
    INT             reduce using rule 21 (tipo -> BOOL .)
    FLOAT           reduce using rule 21 (tipo -> BOOL .)
    CHAR            reduce using rule 21 (tipo -> BOOL .)
    STRING          reduce using rule 21 (tipo -> BOOL .)
    IMAGE           reduce using rule 21 (tipo -> BOOL .)
    TAB             reduce using rule 21 (tipo -> BOOL .)
    DEF             reduce using rule 21 (tipo -> BOOL .)
    $end            reduce using rule 21 (tipo -> BOOL .)
    WHILE           reduce using rule 21 (tipo -> BOOL .)
    ELSE            reduce using rule 21 (tipo -> BOOL .)


state 16

    (25) tipo -> STRING .

    ID              reduce using rule 25 (tipo -> STRING .)
    BOOL            reduce using rule 25 (tipo -> STRING .)
    INT             reduce using rule 25 (tipo -> STRING .)
    FLOAT           reduce using rule 25 (tipo -> STRING .)
    CHAR            reduce using rule 25 (tipo -> STRING .)
    STRING          reduce using rule 25 (tipo -> STRING .)
    IMAGE           reduce using rule 25 (tipo -> STRING .)
    TAB             reduce using rule 25 (tipo -> STRING .)
    DEF             reduce using rule 25 (tipo -> STRING .)
    $end            reduce using rule 25 (tipo -> STRING .)
    WHILE           reduce using rule 25 (tipo -> STRING .)
    ELSE            reduce using rule 25 (tipo -> STRING .)


state 17

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 18

    (5) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 28


state 19

    (6) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 29


state 20

    (3) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (9) outputsDeclaration -> . empty
    (10) outputsDeclaration -> . OUTPUT saveType pinList NEWLINE
    (2) empty -> .

    OUTPUT          shift and go to state 31
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    outputsDeclaration             shift and go to state 30
    empty                          shift and go to state 32

state 21

    (8) inputsDeclaration -> INPUT . saveType pinList NEWLINE
    (18) saveType -> .

    C_INT           reduce using rule 18 (saveType -> .)

    saveType                       shift and go to state 33

state 22

    (7) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 7 (inputsDeclaration -> empty .)
    PWM             reduce using rule 7 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 7 (inputsDeclaration -> empty .)
    INT             reduce using rule 7 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 7 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 7 (inputsDeclaration -> empty .)
    STRING          reduce using rule 7 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 7 (inputsDeclaration -> empty .)
    ID              reduce using rule 7 (inputsDeclaration -> empty .)
    DEF             reduce using rule 7 (inputsDeclaration -> empty .)
    $end            reduce using rule 7 (inputsDeclaration -> empty .)


state 23

    (15) vars -> tipo saveType . idList NEWLINE vars
    (16) vars -> tipo saveType . assign vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList
    (36) assign -> . idList EQUAL expression NEWLINE assign
    (37) assign -> . empty
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 26
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 34
    assign                         shift and go to state 35
    empty                          shift and go to state 27

state 24

    (36) assign -> idList . EQUAL expression NEWLINE assign

    EQUAL           shift and go to state 36


state 25

    (1) program -> PROGRAM ID NEWLINE hardware vars assign . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 37
    empty                          shift and go to state 38

state 26

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    EQUAL           reduce using rule 19 (idList -> ID .)
    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 40


state 27

    (37) assign -> empty .

    DEF             reduce using rule 37 (assign -> empty .)
    $end            reduce using rule 37 (assign -> empty .)
    BOOL            reduce using rule 37 (assign -> empty .)
    INT             reduce using rule 37 (assign -> empty .)
    FLOAT           reduce using rule 37 (assign -> empty .)
    CHAR            reduce using rule 37 (assign -> empty .)
    STRING          reduce using rule 37 (assign -> empty .)
    IMAGE           reduce using rule 37 (assign -> empty .)
    ID              reduce using rule 37 (assign -> empty .)
    TAB             reduce using rule 37 (assign -> empty .)
    WHILE           reduce using rule 37 (assign -> empty .)
    ELSE            reduce using rule 37 (assign -> empty .)


state 28

    (5) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 41


state 29

    (6) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 42


state 30

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (11) pwmDeclaration -> . empty
    (12) pwmDeclaration -> . PWM saveType pinList NEWLINE
    (2) empty -> .

    PWM             shift and go to state 44
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    pwmDeclaration                 shift and go to state 43
    empty                          shift and go to state 45

state 31

    (10) outputsDeclaration -> OUTPUT . saveType pinList NEWLINE
    (18) saveType -> .

    C_INT           reduce using rule 18 (saveType -> .)

    saveType                       shift and go to state 46

state 32

    (9) outputsDeclaration -> empty .

    PWM             reduce using rule 9 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (outputsDeclaration -> empty .)
    INT             reduce using rule 9 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 9 (outputsDeclaration -> empty .)
    STRING          reduce using rule 9 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (outputsDeclaration -> empty .)
    ID              reduce using rule 9 (outputsDeclaration -> empty .)
    DEF             reduce using rule 9 (outputsDeclaration -> empty .)
    $end            reduce using rule 9 (outputsDeclaration -> empty .)


state 33

    (8) inputsDeclaration -> INPUT saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 48

    pinList                        shift and go to state 47

state 34

    (15) vars -> tipo saveType idList . NEWLINE vars
    (36) assign -> idList . EQUAL expression NEWLINE assign

    NEWLINE         shift and go to state 49
    EQUAL           shift and go to state 36


state 35

    (16) vars -> tipo saveType assign . vars
    (15) vars -> . tipo saveType idList NEWLINE vars
    (16) vars -> . tipo saveType assign vars
    (17) vars -> . empty
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 50
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 36

    (36) assign -> idList EQUAL . expression NEWLINE assign
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 63

state 37

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions .

    $end            reduce using rule 1 (program -> PROGRAM ID NEWLINE hardware vars assign functions .)


state 38

    (33) functions -> empty .

    $end            reduce using rule 33 (functions -> empty .)


state 39

    (27) functions -> DEF . tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF . tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> DEF . VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF . VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> DEF . VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF . VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE

    VOID            shift and go to state 65
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 64

state 40

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 26

    idList                         shift and go to state 66

state 41

    (5) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 67


state 42

    (6) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 68


state 43

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 44

    (12) pwmDeclaration -> PWM . saveType pinList NEWLINE
    (18) saveType -> .

    C_INT           reduce using rule 18 (saveType -> .)

    saveType                       shift and go to state 69

state 45

    (11) pwmDeclaration -> empty .

    BOOL            reduce using rule 11 (pwmDeclaration -> empty .)
    INT             reduce using rule 11 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 11 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 11 (pwmDeclaration -> empty .)
    STRING          reduce using rule 11 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 11 (pwmDeclaration -> empty .)
    ID              reduce using rule 11 (pwmDeclaration -> empty .)
    DEF             reduce using rule 11 (pwmDeclaration -> empty .)
    $end            reduce using rule 11 (pwmDeclaration -> empty .)


state 46

    (10) outputsDeclaration -> OUTPUT saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 48

    pinList                        shift and go to state 70

state 47

    (8) inputsDeclaration -> INPUT saveType pinList . NEWLINE

    NEWLINE         shift and go to state 71


state 48

    (13) pinList -> C_INT . COLON ID
    (14) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 72


state 49

    (15) vars -> tipo saveType idList NEWLINE . vars
    (15) vars -> . tipo saveType idList NEWLINE vars
    (16) vars -> . tipo saveType assign vars
    (17) vars -> . empty
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 73
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 50

    (16) vars -> tipo saveType assign vars .

    TAB             reduce using rule 16 (vars -> tipo saveType assign vars .)
    DEF             reduce using rule 16 (vars -> tipo saveType assign vars .)
    $end            reduce using rule 16 (vars -> tipo saveType assign vars .)
    WHILE           reduce using rule 16 (vars -> tipo saveType assign vars .)
    ELSE            reduce using rule 16 (vars -> tipo saveType assign vars .)
    ID              reduce using rule 16 (vars -> tipo saveType assign vars .)


state 51

    (74) factor -> cvar .

    DIVIDE          reduce using rule 74 (factor -> cvar .)
    TIMES           reduce using rule 74 (factor -> cvar .)
    MOD             reduce using rule 74 (factor -> cvar .)
    PLUS            reduce using rule 74 (factor -> cvar .)
    MINUS           reduce using rule 74 (factor -> cvar .)
    GREATER_THAN    reduce using rule 74 (factor -> cvar .)
    LESS_THAN       reduce using rule 74 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 74 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 74 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 74 (factor -> cvar .)
    SAME_AS         reduce using rule 74 (factor -> cvar .)
    NEWLINE         reduce using rule 74 (factor -> cvar .)
    RPAREN          reduce using rule 74 (factor -> cvar .)
    COMMA           reduce using rule 74 (factor -> cvar .)
    COLON           reduce using rule 74 (factor -> cvar .)


state 52

    (75) factor -> funct .

    DIVIDE          reduce using rule 75 (factor -> funct .)
    TIMES           reduce using rule 75 (factor -> funct .)
    MOD             reduce using rule 75 (factor -> funct .)
    PLUS            reduce using rule 75 (factor -> funct .)
    MINUS           reduce using rule 75 (factor -> funct .)
    GREATER_THAN    reduce using rule 75 (factor -> funct .)
    LESS_THAN       reduce using rule 75 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 75 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 75 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 75 (factor -> funct .)
    SAME_AS         reduce using rule 75 (factor -> funct .)
    NEWLINE         reduce using rule 75 (factor -> funct .)
    RPAREN          reduce using rule 75 (factor -> funct .)
    COMMA           reduce using rule 75 (factor -> funct .)
    COLON           reduce using rule 75 (factor -> funct .)


state 53

    (79) cvar -> C_FLOAT .

    DIVIDE          reduce using rule 79 (cvar -> C_FLOAT .)
    TIMES           reduce using rule 79 (cvar -> C_FLOAT .)
    MOD             reduce using rule 79 (cvar -> C_FLOAT .)
    PLUS            reduce using rule 79 (cvar -> C_FLOAT .)
    MINUS           reduce using rule 79 (cvar -> C_FLOAT .)
    GREATER_THAN    reduce using rule 79 (cvar -> C_FLOAT .)
    LESS_THAN       reduce using rule 79 (cvar -> C_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 79 (cvar -> C_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 79 (cvar -> C_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 79 (cvar -> C_FLOAT .)
    SAME_AS         reduce using rule 79 (cvar -> C_FLOAT .)
    COMMA           reduce using rule 79 (cvar -> C_FLOAT .)
    RPAREN          reduce using rule 79 (cvar -> C_FLOAT .)
    NEWLINE         reduce using rule 79 (cvar -> C_FLOAT .)
    COLON           reduce using rule 79 (cvar -> C_FLOAT .)


state 54

    (77) cvar -> C_BOOL .

    DIVIDE          reduce using rule 77 (cvar -> C_BOOL .)
    TIMES           reduce using rule 77 (cvar -> C_BOOL .)
    MOD             reduce using rule 77 (cvar -> C_BOOL .)
    PLUS            reduce using rule 77 (cvar -> C_BOOL .)
    MINUS           reduce using rule 77 (cvar -> C_BOOL .)
    GREATER_THAN    reduce using rule 77 (cvar -> C_BOOL .)
    LESS_THAN       reduce using rule 77 (cvar -> C_BOOL .)
    LESS_EQUAL_THAN reduce using rule 77 (cvar -> C_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 77 (cvar -> C_BOOL .)
    NOT_EQUAL_THAN  reduce using rule 77 (cvar -> C_BOOL .)
    SAME_AS         reduce using rule 77 (cvar -> C_BOOL .)
    COMMA           reduce using rule 77 (cvar -> C_BOOL .)
    RPAREN          reduce using rule 77 (cvar -> C_BOOL .)
    NEWLINE         reduce using rule 77 (cvar -> C_BOOL .)
    COLON           reduce using rule 77 (cvar -> C_BOOL .)


state 55

    (68) term -> factor . moreFactors
    (69) moreFactors -> . empty
    (70) moreFactors -> . DIVIDE factor moreFactors
    (71) moreFactors -> . TIMES factor moreFactors
    (72) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 75
    TIMES           shift and go to state 76
    MOD             shift and go to state 78
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 74
    empty                          shift and go to state 77

state 56

    (73) factor -> LPAREN . expression RPAREN
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 79

state 57

    (78) cvar -> C_INT .

    DIVIDE          reduce using rule 78 (cvar -> C_INT .)
    TIMES           reduce using rule 78 (cvar -> C_INT .)
    MOD             reduce using rule 78 (cvar -> C_INT .)
    PLUS            reduce using rule 78 (cvar -> C_INT .)
    MINUS           reduce using rule 78 (cvar -> C_INT .)
    GREATER_THAN    reduce using rule 78 (cvar -> C_INT .)
    LESS_THAN       reduce using rule 78 (cvar -> C_INT .)
    LESS_EQUAL_THAN reduce using rule 78 (cvar -> C_INT .)
    GREATER_EQUAL_THAN reduce using rule 78 (cvar -> C_INT .)
    NOT_EQUAL_THAN  reduce using rule 78 (cvar -> C_INT .)
    SAME_AS         reduce using rule 78 (cvar -> C_INT .)
    COMMA           reduce using rule 78 (cvar -> C_INT .)
    RPAREN          reduce using rule 78 (cvar -> C_INT .)
    NEWLINE         reduce using rule 78 (cvar -> C_INT .)
    COLON           reduce using rule 78 (cvar -> C_INT .)


state 58

    (76) cvar -> ID .
    (52) funct -> ID . LPAREN RPAREN
    (53) funct -> ID . LPAREN expression expressionList RPAREN

    DIVIDE          reduce using rule 76 (cvar -> ID .)
    TIMES           reduce using rule 76 (cvar -> ID .)
    MOD             reduce using rule 76 (cvar -> ID .)
    PLUS            reduce using rule 76 (cvar -> ID .)
    MINUS           reduce using rule 76 (cvar -> ID .)
    GREATER_THAN    reduce using rule 76 (cvar -> ID .)
    LESS_THAN       reduce using rule 76 (cvar -> ID .)
    LESS_EQUAL_THAN reduce using rule 76 (cvar -> ID .)
    GREATER_EQUAL_THAN reduce using rule 76 (cvar -> ID .)
    NOT_EQUAL_THAN  reduce using rule 76 (cvar -> ID .)
    SAME_AS         reduce using rule 76 (cvar -> ID .)
    COMMA           reduce using rule 76 (cvar -> ID .)
    RPAREN          reduce using rule 76 (cvar -> ID .)
    NEWLINE         reduce using rule 76 (cvar -> ID .)
    COLON           reduce using rule 76 (cvar -> ID .)
    LPAREN          shift and go to state 80


state 59

    (81) cvar -> C_STRING .

    DIVIDE          reduce using rule 81 (cvar -> C_STRING .)
    TIMES           reduce using rule 81 (cvar -> C_STRING .)
    MOD             reduce using rule 81 (cvar -> C_STRING .)
    PLUS            reduce using rule 81 (cvar -> C_STRING .)
    MINUS           reduce using rule 81 (cvar -> C_STRING .)
    GREATER_THAN    reduce using rule 81 (cvar -> C_STRING .)
    LESS_THAN       reduce using rule 81 (cvar -> C_STRING .)
    LESS_EQUAL_THAN reduce using rule 81 (cvar -> C_STRING .)
    GREATER_EQUAL_THAN reduce using rule 81 (cvar -> C_STRING .)
    NOT_EQUAL_THAN  reduce using rule 81 (cvar -> C_STRING .)
    SAME_AS         reduce using rule 81 (cvar -> C_STRING .)
    COMMA           reduce using rule 81 (cvar -> C_STRING .)
    RPAREN          reduce using rule 81 (cvar -> C_STRING .)
    NEWLINE         reduce using rule 81 (cvar -> C_STRING .)
    COLON           reduce using rule 81 (cvar -> C_STRING .)


state 60

    (64) exp -> term . moreTerms
    (65) moreTerms -> . empty
    (66) moreTerms -> . PLUS term moreTerms
    (67) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 81
    empty                          shift and go to state 84

state 61

    (80) cvar -> C_CHAR .

    DIVIDE          reduce using rule 80 (cvar -> C_CHAR .)
    TIMES           reduce using rule 80 (cvar -> C_CHAR .)
    MOD             reduce using rule 80 (cvar -> C_CHAR .)
    PLUS            reduce using rule 80 (cvar -> C_CHAR .)
    MINUS           reduce using rule 80 (cvar -> C_CHAR .)
    GREATER_THAN    reduce using rule 80 (cvar -> C_CHAR .)
    LESS_THAN       reduce using rule 80 (cvar -> C_CHAR .)
    LESS_EQUAL_THAN reduce using rule 80 (cvar -> C_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 80 (cvar -> C_CHAR .)
    NOT_EQUAL_THAN  reduce using rule 80 (cvar -> C_CHAR .)
    SAME_AS         reduce using rule 80 (cvar -> C_CHAR .)
    COMMA           reduce using rule 80 (cvar -> C_CHAR .)
    RPAREN          reduce using rule 80 (cvar -> C_CHAR .)
    NEWLINE         reduce using rule 80 (cvar -> C_CHAR .)
    COLON           reduce using rule 80 (cvar -> C_CHAR .)


state 62

    (56) expression -> exp .
    (57) expression -> exp . compareToken exp
    (58) compareToken -> . GREATER_THAN
    (59) compareToken -> . LESS_THAN
    (60) compareToken -> . LESS_EQUAL_THAN
    (61) compareToken -> . GREATER_EQUAL_THAN
    (62) compareToken -> . NOT_EQUAL_THAN
    (63) compareToken -> . SAME_AS

    NEWLINE         reduce using rule 56 (expression -> exp .)
    COLON           reduce using rule 56 (expression -> exp .)
    COMMA           reduce using rule 56 (expression -> exp .)
    RPAREN          reduce using rule 56 (expression -> exp .)
    GREATER_THAN    shift and go to state 90
    LESS_THAN       shift and go to state 91
    LESS_EQUAL_THAN shift and go to state 87
    GREATER_EQUAL_THAN shift and go to state 86
    NOT_EQUAL_THAN  shift and go to state 89
    SAME_AS         shift and go to state 88

    compareToken                   shift and go to state 85

state 63

    (36) assign -> idList EQUAL expression . NEWLINE assign

    NEWLINE         shift and go to state 92


state 64

    (27) functions -> DEF tipo . ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo . ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 93


state 65

    (29) functions -> DEF VOID . ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID . ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID . MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID . MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 95
    MAIN            shift and go to state 94


state 66

    (20) idList -> ID COMMA idList .

    EQUAL           reduce using rule 20 (idList -> ID COMMA idList .)
    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 67

    (5) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 68

    (6) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 69

    (12) pwmDeclaration -> PWM saveType . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 48

    pinList                        shift and go to state 96

state 70

    (10) outputsDeclaration -> OUTPUT saveType pinList . NEWLINE

    NEWLINE         shift and go to state 97


state 71

    (8) inputsDeclaration -> INPUT saveType pinList NEWLINE .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    PWM             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    BOOL            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    INT             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    CHAR            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    STRING          reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    ID              reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    DEF             reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)
    $end            reduce using rule 8 (inputsDeclaration -> INPUT saveType pinList NEWLINE .)


state 72

    (13) pinList -> C_INT COLON . ID
    (14) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 98


state 73

    (15) vars -> tipo saveType idList NEWLINE vars .

    TAB             reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)
    DEF             reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)
    $end            reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)
    WHILE           reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)
    ELSE            reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)
    ID              reduce using rule 15 (vars -> tipo saveType idList NEWLINE vars .)


state 74

    (68) term -> factor moreFactors .

    PLUS            reduce using rule 68 (term -> factor moreFactors .)
    MINUS           reduce using rule 68 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 68 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 68 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 68 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 68 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 68 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 68 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 68 (term -> factor moreFactors .)
    RPAREN          reduce using rule 68 (term -> factor moreFactors .)
    COMMA           reduce using rule 68 (term -> factor moreFactors .)
    COLON           reduce using rule 68 (term -> factor moreFactors .)


state 75

    (70) moreFactors -> DIVIDE . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    funct                          shift and go to state 52
    cvar                           shift and go to state 51
    factor                         shift and go to state 99

state 76

    (71) moreFactors -> TIMES . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    funct                          shift and go to state 52
    cvar                           shift and go to state 51
    factor                         shift and go to state 100

state 77

    (69) moreFactors -> empty .

    PLUS            reduce using rule 69 (moreFactors -> empty .)
    MINUS           reduce using rule 69 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 69 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 69 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 69 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 69 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 69 (moreFactors -> empty .)
    SAME_AS         reduce using rule 69 (moreFactors -> empty .)
    NEWLINE         reduce using rule 69 (moreFactors -> empty .)
    RPAREN          reduce using rule 69 (moreFactors -> empty .)
    COMMA           reduce using rule 69 (moreFactors -> empty .)
    COLON           reduce using rule 69 (moreFactors -> empty .)


state 78

    (72) moreFactors -> MOD . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    funct                          shift and go to state 52
    cvar                           shift and go to state 51
    factor                         shift and go to state 101

state 79

    (73) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 102


state 80

    (52) funct -> ID LPAREN . RPAREN
    (53) funct -> ID LPAREN . expression expressionList RPAREN
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 103
    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 104

state 81

    (64) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 64 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 64 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 64 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 64 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 64 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 64 (exp -> term moreTerms .)
    COLON           reduce using rule 64 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 64 (exp -> term moreTerms .)
    RPAREN          reduce using rule 64 (exp -> term moreTerms .)
    COMMA           reduce using rule 64 (exp -> term moreTerms .)


state 82

    (66) moreTerms -> PLUS . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 105
    funct                          shift and go to state 52
    factor                         shift and go to state 55
    cvar                           shift and go to state 51

state 83

    (67) moreTerms -> MINUS . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 106
    funct                          shift and go to state 52
    factor                         shift and go to state 55
    cvar                           shift and go to state 51

state 84

    (65) moreTerms -> empty .

    GREATER_THAN    reduce using rule 65 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 65 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 65 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 65 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 65 (moreTerms -> empty .)
    SAME_AS         reduce using rule 65 (moreTerms -> empty .)
    NEWLINE         reduce using rule 65 (moreTerms -> empty .)
    RPAREN          reduce using rule 65 (moreTerms -> empty .)
    COMMA           reduce using rule 65 (moreTerms -> empty .)
    COLON           reduce using rule 65 (moreTerms -> empty .)


state 85

    (57) expression -> exp compareToken . exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 107
    factor                         shift and go to state 55
    cvar                           shift and go to state 51

state 86

    (61) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 61 (compareToken -> GREATER_EQUAL_THAN .)


state 87

    (60) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 60 (compareToken -> LESS_EQUAL_THAN .)


state 88

    (63) compareToken -> SAME_AS .

    LPAREN          reduce using rule 63 (compareToken -> SAME_AS .)
    ID              reduce using rule 63 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 63 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 63 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 63 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 63 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 63 (compareToken -> SAME_AS .)


state 89

    (62) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 62 (compareToken -> NOT_EQUAL_THAN .)


state 90

    (58) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 58 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 58 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 58 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 58 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 58 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 58 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 58 (compareToken -> GREATER_THAN .)


state 91

    (59) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 59 (compareToken -> LESS_THAN .)
    ID              reduce using rule 59 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 59 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 59 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 59 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 59 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 59 (compareToken -> LESS_THAN .)


state 92

    (36) assign -> idList EQUAL expression NEWLINE . assign
    (36) assign -> . idList EQUAL expression NEWLINE assign
    (37) assign -> . empty
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 26
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 24
    empty                          shift and go to state 27
    assign                         shift and go to state 108

state 93

    (27) functions -> DEF tipo ID . LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo ID . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 109


state 94

    (31) functions -> DEF VOID MAIN . LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID MAIN . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 110


state 95

    (29) functions -> DEF VOID ID . LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID ID . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 111


state 96

    (12) pwmDeclaration -> PWM saveType pinList . NEWLINE

    NEWLINE         shift and go to state 112


state 97

    (10) outputsDeclaration -> OUTPUT saveType pinList NEWLINE .

    PWM             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    BOOL            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    INT             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    CHAR            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    STRING          reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    ID              reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    DEF             reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)
    $end            reduce using rule 10 (outputsDeclaration -> OUTPUT saveType pinList NEWLINE .)


state 98

    (13) pinList -> C_INT COLON ID .
    (14) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 13 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 113


state 99

    (70) moreFactors -> DIVIDE factor . moreFactors
    (69) moreFactors -> . empty
    (70) moreFactors -> . DIVIDE factor moreFactors
    (71) moreFactors -> . TIMES factor moreFactors
    (72) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 75
    TIMES           shift and go to state 76
    MOD             shift and go to state 78
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 114
    empty                          shift and go to state 77

state 100

    (71) moreFactors -> TIMES factor . moreFactors
    (69) moreFactors -> . empty
    (70) moreFactors -> . DIVIDE factor moreFactors
    (71) moreFactors -> . TIMES factor moreFactors
    (72) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 75
    TIMES           shift and go to state 76
    MOD             shift and go to state 78
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 115
    empty                          shift and go to state 77

state 101

    (72) moreFactors -> MOD factor . moreFactors
    (69) moreFactors -> . empty
    (70) moreFactors -> . DIVIDE factor moreFactors
    (71) moreFactors -> . TIMES factor moreFactors
    (72) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 75
    TIMES           shift and go to state 76
    MOD             shift and go to state 78
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 116
    empty                          shift and go to state 77

state 102

    (73) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 73 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 73 (factor -> LPAREN expression RPAREN .)


state 103

    (52) funct -> ID LPAREN RPAREN .

    DIVIDE          reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 52 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 52 (funct -> ID LPAREN RPAREN .)


state 104

    (53) funct -> ID LPAREN expression . expressionList RPAREN
    (54) expressionList -> . empty
    (55) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 118
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 117
    empty                          shift and go to state 119

state 105

    (66) moreTerms -> PLUS term . moreTerms
    (65) moreTerms -> . empty
    (66) moreTerms -> . PLUS term moreTerms
    (67) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 120
    empty                          shift and go to state 84

state 106

    (67) moreTerms -> MINUS term . moreTerms
    (65) moreTerms -> . empty
    (66) moreTerms -> . PLUS term moreTerms
    (67) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 121
    empty                          shift and go to state 84

state 107

    (57) expression -> exp compareToken exp .

    NEWLINE         reduce using rule 57 (expression -> exp compareToken exp .)
    COLON           reduce using rule 57 (expression -> exp compareToken exp .)
    COMMA           reduce using rule 57 (expression -> exp compareToken exp .)
    RPAREN          reduce using rule 57 (expression -> exp compareToken exp .)


state 108

    (36) assign -> idList EQUAL expression NEWLINE assign .

    TAB             reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    DEF             reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    $end            reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    WHILE           reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    ELSE            reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    BOOL            reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    INT             reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    FLOAT           reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    CHAR            reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    STRING          reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    IMAGE           reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)
    ID              reduce using rule 36 (assign -> idList EQUAL expression NEWLINE assign .)


state 109

    (27) functions -> DEF tipo ID LPAREN . RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo ID LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE

    RPAREN          shift and go to state 122
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 123

state 110

    (31) functions -> DEF VOID MAIN LPAREN . RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID MAIN LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE

    RPAREN          shift and go to state 124
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 125

state 111

    (29) functions -> DEF VOID ID LPAREN . RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID ID LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE

    RPAREN          shift and go to state 126
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 127

state 112

    (12) pwmDeclaration -> PWM saveType pinList NEWLINE .

    BOOL            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    INT             reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    CHAR            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    STRING          reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    ID              reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    DEF             reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)
    $end            reduce using rule 12 (pwmDeclaration -> PWM saveType pinList NEWLINE .)


state 113

    (14) pinList -> C_INT COLON ID COMMA . pinList
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 48

    pinList                        shift and go to state 128

state 114

    (70) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 70 (moreFactors -> DIVIDE factor moreFactors .)


state 115

    (71) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 71 (moreFactors -> TIMES factor moreFactors .)


state 116

    (72) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 72 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 72 (moreFactors -> MOD factor moreFactors .)


state 117

    (53) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 129


state 118

    (55) expressionList -> COMMA . expression expressionList
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 130

state 119

    (54) expressionList -> empty .

    RPAREN          reduce using rule 54 (expressionList -> empty .)


state 120

    (66) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 66 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 66 (moreTerms -> PLUS term moreTerms .)


state 121

    (67) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 67 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 67 (moreTerms -> MINUS term moreTerms .)


state 122

    (27) functions -> DEF tipo ID LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 131


state 123

    (28) functions -> DEF tipo ID LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 132


state 124

    (31) functions -> DEF VOID MAIN LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 133


state 125

    (32) functions -> DEF VOID MAIN LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 134


state 126

    (29) functions -> DEF VOID ID LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 135


state 127

    (30) functions -> DEF VOID ID LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 136


state 128

    (14) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID COMMA pinList .)


state 129

    (53) funct -> ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 53 (funct -> ID LPAREN expression expressionList RPAREN .)


state 130

    (55) expressionList -> COMMA expression . expressionList
    (54) expressionList -> . empty
    (55) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 118
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 137
    empty                          shift and go to state 119

state 131

    (27) functions -> DEF tipo ID LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 138


state 132

    (28) functions -> DEF tipo ID LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 139
    empty                          shift and go to state 140

state 133

    (31) functions -> DEF VOID MAIN LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 142


state 134

    (32) functions -> DEF VOID MAIN LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 143
    empty                          shift and go to state 140

state 135

    (29) functions -> DEF VOID ID LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 144


state 136

    (30) functions -> DEF VOID ID LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 145
    empty                          shift and go to state 140

state 137

    (55) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 55 (expressionList -> COMMA expression expressionList .)


state 138

    (27) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 148
    empty                          shift and go to state 147

state 139

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 149


state 140

    (34) parameterList -> empty .

    RPAREN          reduce using rule 34 (parameterList -> empty .)


state 141

    (35) parameterList -> COMMA . tipo ID parameterList
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 150

state 142

    (31) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 147
    block                          shift and go to state 151

state 143

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 152


state 144

    (29) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 147
    block                          shift and go to state 153

state 145

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 154


state 146

    (39) block -> TAB . statement moreStatements
    (42) statement -> . vars
    (43) statement -> . assign
    (44) statement -> . condition
    (45) statement -> . cycle
    (46) statement -> . funct NEWLINE
    (47) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo saveType idList NEWLINE vars
    (16) vars -> . tipo saveType assign vars
    (17) vars -> . empty
    (36) assign -> . idList EQUAL expression NEWLINE assign
    (37) assign -> . empty
    (48) condition -> . IF expression COLON NEWLINE block
    (49) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (50) cycle -> . WHILE expression COLON NEWLINE block
    (51) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE
    (2) empty -> .
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 156
    IF              shift and go to state 165
    WHILE           shift and go to state 159
    DO              shift and go to state 155
    ID              shift and go to state 163
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 157
    funct                          shift and go to state 158
    empty                          shift and go to state 161
    statement                      shift and go to state 162
    idList                         shift and go to state 24
    assign                         shift and go to state 166
    condition                      shift and go to state 164
    cycle                          shift and go to state 160

state 147

    (38) block -> empty .

    TAB             reduce using rule 38 (block -> empty .)
    DEF             reduce using rule 38 (block -> empty .)
    $end            reduce using rule 38 (block -> empty .)
    WHILE           reduce using rule 38 (block -> empty .)
    ELSE            reduce using rule 38 (block -> empty .)


state 148

    (27) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 167
    empty                          shift and go to state 38

state 149

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 168


state 150

    (35) parameterList -> COMMA tipo . ID parameterList

    ID              shift and go to state 169


state 151

    (31) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 170
    empty                          shift and go to state 38

state 152

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 171


state 153

    (29) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 172
    empty                          shift and go to state 38

state 154

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 173


state 155

    (51) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 174


state 156

    (47) statement -> RETURN . expression NEWLINE
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 175

state 157

    (42) statement -> vars .

    TAB             reduce using rule 42 (statement -> vars .)
    DEF             reduce using rule 42 (statement -> vars .)
    $end            reduce using rule 42 (statement -> vars .)
    WHILE           reduce using rule 42 (statement -> vars .)
    ELSE            reduce using rule 42 (statement -> vars .)


state 158

    (46) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 176


state 159

    (50) cycle -> WHILE . expression COLON NEWLINE block
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 177

state 160

    (45) statement -> cycle .

    TAB             reduce using rule 45 (statement -> cycle .)
    DEF             reduce using rule 45 (statement -> cycle .)
    $end            reduce using rule 45 (statement -> cycle .)
    WHILE           reduce using rule 45 (statement -> cycle .)
    ELSE            reduce using rule 45 (statement -> cycle .)


state 161

    (17) vars -> empty .
    (37) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 37 (assign -> empty .) ]
  ! DEF             [ reduce using rule 37 (assign -> empty .) ]
  ! $end            [ reduce using rule 37 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 37 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 37 (assign -> empty .) ]


state 162

    (39) block -> TAB statement . moreStatements
    (40) moreStatements -> . empty
    (41) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 179
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 178
    moreStatements                 shift and go to state 180

state 163

    (52) funct -> ID . LPAREN RPAREN
    (53) funct -> ID . LPAREN expression expressionList RPAREN
    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    LPAREN          shift and go to state 80
    EQUAL           reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 40


state 164

    (44) statement -> condition .

    TAB             reduce using rule 44 (statement -> condition .)
    DEF             reduce using rule 44 (statement -> condition .)
    $end            reduce using rule 44 (statement -> condition .)
    WHILE           reduce using rule 44 (statement -> condition .)
    ELSE            reduce using rule 44 (statement -> condition .)


state 165

    (48) condition -> IF . expression COLON NEWLINE block
    (49) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 181

state 166

    (43) statement -> assign .

    TAB             reduce using rule 43 (statement -> assign .)
    DEF             reduce using rule 43 (statement -> assign .)
    $end            reduce using rule 43 (statement -> assign .)
    WHILE           reduce using rule 43 (statement -> assign .)
    ELSE            reduce using rule 43 (statement -> assign .)


state 167

    (27) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions .)


state 168

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 182


state 169

    (35) parameterList -> COMMA tipo ID . parameterList
    (34) parameterList -> . empty
    (35) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 141
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 183
    empty                          shift and go to state 140

state 170

    (31) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions .)


state 171

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 184


state 172

    (29) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions .)


state 173

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 185


state 174

    (51) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 186


state 175

    (47) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 187


state 176

    (46) statement -> funct NEWLINE .

    TAB             reduce using rule 46 (statement -> funct NEWLINE .)
    DEF             reduce using rule 46 (statement -> funct NEWLINE .)
    $end            reduce using rule 46 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 46 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 46 (statement -> funct NEWLINE .)


state 177

    (50) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 188


state 178

    (40) moreStatements -> empty .

    TAB             reduce using rule 40 (moreStatements -> empty .)
    DEF             reduce using rule 40 (moreStatements -> empty .)
    $end            reduce using rule 40 (moreStatements -> empty .)
    WHILE           reduce using rule 40 (moreStatements -> empty .)
    ELSE            reduce using rule 40 (moreStatements -> empty .)


state 179

    (41) moreStatements -> TAB . statement moreStatements
    (42) statement -> . vars
    (43) statement -> . assign
    (44) statement -> . condition
    (45) statement -> . cycle
    (46) statement -> . funct NEWLINE
    (47) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo saveType idList NEWLINE vars
    (16) vars -> . tipo saveType assign vars
    (17) vars -> . empty
    (36) assign -> . idList EQUAL expression NEWLINE assign
    (37) assign -> . empty
    (48) condition -> . IF expression COLON NEWLINE block
    (49) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (50) cycle -> . WHILE expression COLON NEWLINE block
    (51) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (25) tipo -> . STRING
    (26) tipo -> . IMAGE
    (2) empty -> .
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 156
    IF              shift and go to state 165
    WHILE           shift and go to state 159
    DO              shift and go to state 155
    ID              shift and go to state 163
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 157
    funct                          shift and go to state 158
    empty                          shift and go to state 161
    statement                      shift and go to state 189
    idList                         shift and go to state 24
    assign                         shift and go to state 166
    condition                      shift and go to state 164
    cycle                          shift and go to state 160

state 180

    (39) block -> TAB statement moreStatements .

    TAB             reduce using rule 39 (block -> TAB statement moreStatements .)
    DEF             reduce using rule 39 (block -> TAB statement moreStatements .)
    $end            reduce using rule 39 (block -> TAB statement moreStatements .)
    WHILE           reduce using rule 39 (block -> TAB statement moreStatements .)
    ELSE            reduce using rule 39 (block -> TAB statement moreStatements .)


state 181

    (48) condition -> IF expression . COLON NEWLINE block
    (49) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 190


state 182

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 191
    empty                          shift and go to state 147

state 183

    (35) parameterList -> COMMA tipo ID parameterList .

    RPAREN          reduce using rule 35 (parameterList -> COMMA tipo ID parameterList .)


state 184

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 192
    empty                          shift and go to state 147

state 185

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 193
    empty                          shift and go to state 147

state 186

    (51) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 146
    WHILE           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 147
    block                          shift and go to state 194

state 187

    (47) statement -> RETURN expression NEWLINE .

    TAB             reduce using rule 47 (statement -> RETURN expression NEWLINE .)
    DEF             reduce using rule 47 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 47 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 47 (statement -> RETURN expression NEWLINE .)
    ELSE            reduce using rule 47 (statement -> RETURN expression NEWLINE .)


state 188

    (50) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 195


state 189

    (41) moreStatements -> TAB statement . moreStatements
    (40) moreStatements -> . empty
    (41) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 179
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 178
    moreStatements                 shift and go to state 196

state 190

    (48) condition -> IF expression COLON . NEWLINE block
    (49) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 197


state 191

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 198
    empty                          shift and go to state 38

state 192

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 199
    empty                          shift and go to state 38

state 193

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 39
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 200
    empty                          shift and go to state 38

state 194

    (51) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 201


state 195

    (50) cycle -> WHILE expression COLON NEWLINE . block
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 147
    block                          shift and go to state 202

state 196

    (41) moreStatements -> TAB statement moreStatements .

    TAB             reduce using rule 41 (moreStatements -> TAB statement moreStatements .)
    DEF             reduce using rule 41 (moreStatements -> TAB statement moreStatements .)
    $end            reduce using rule 41 (moreStatements -> TAB statement moreStatements .)
    WHILE           reduce using rule 41 (moreStatements -> TAB statement moreStatements .)
    ELSE            reduce using rule 41 (moreStatements -> TAB statement moreStatements .)


state 197

    (48) condition -> IF expression COLON NEWLINE . block
    (49) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 147
    block                          shift and go to state 203

state 198

    (28) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 199

    (32) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 32 (functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 200

    (30) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 30 (functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 201

    (51) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (56) expression -> . exp
    (57) expression -> . exp compareToken exp
    (64) exp -> . term moreTerms
    (68) term -> . factor moreFactors
    (73) factor -> . LPAREN expression RPAREN
    (74) factor -> . cvar
    (75) factor -> . funct
    (76) cvar -> . ID
    (77) cvar -> . C_BOOL
    (78) cvar -> . C_INT
    (79) cvar -> . C_FLOAT
    (80) cvar -> . C_CHAR
    (81) cvar -> . C_STRING
    (52) funct -> . ID LPAREN RPAREN
    (53) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 56
    ID              shift and go to state 58
    C_BOOL          shift and go to state 54
    C_INT           shift and go to state 57
    C_FLOAT         shift and go to state 53
    C_CHAR          shift and go to state 61
    C_STRING        shift and go to state 59

    term                           shift and go to state 60
    funct                          shift and go to state 52
    exp                            shift and go to state 62
    factor                         shift and go to state 55
    cvar                           shift and go to state 51
    expression                     shift and go to state 204

state 202

    (50) cycle -> WHILE expression COLON NEWLINE block .

    TAB             reduce using rule 50 (cycle -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 50 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 50 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 50 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 50 (cycle -> WHILE expression COLON NEWLINE block .)


state 203

    (48) condition -> IF expression COLON NEWLINE block .
    (49) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 48 (condition -> IF expression COLON NEWLINE block .)
    DEF             reduce using rule 48 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 48 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 48 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 205

  ! ELSE            [ reduce using rule 48 (condition -> IF expression COLON NEWLINE block .) ]


state 204

    (51) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 206


state 205

    (49) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 207


state 206

    (51) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    TAB             reduce using rule 51 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    DEF             reduce using rule 51 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 51 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 51 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 51 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 207

    (49) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 208


state 208

    (49) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (38) block -> . empty
    (39) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 146
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 147
    block                          shift and go to state 209

state 209

    (49) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    TAB             reduce using rule 49 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    DEF             reduce using rule 49 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 49 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 49 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 49 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for ID in state 92 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 146 resolved as shift
WARNING: shift/reduce conflict for TAB in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for TAB in state 189 resolved as shift
WARNING: shift/reduce conflict for TAB in state 195 resolved as shift
WARNING: shift/reduce conflict for TAB in state 197 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 203 resolved as shift
WARNING: shift/reduce conflict for TAB in state 208 resolved as shift
WARNING: reduce/reduce conflict in state 161 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 161
