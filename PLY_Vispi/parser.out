Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> programName hardware vars assign functions
Rule 2     programName -> PROGRAM ID NEWLINE
Rule 3     empty -> <empty>
Rule 4     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 5     camDeclaration -> empty
Rule 6     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 7     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 8     inputsDeclaration -> empty
Rule 9     inputsDeclaration -> INPUT f_saveType pinList NEWLINE
Rule 10    outputsDeclaration -> empty
Rule 11    outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE
Rule 12    pwmDeclaration -> empty
Rule 13    pwmDeclaration -> PWM f_saveType pinList NEWLINE
Rule 14    pinList -> C_INT COLON ID
Rule 15    pinList -> C_INT COLON ID COMMA pinList
Rule 16    vars -> tipo idList NEWLINE vars
Rule 17    vars -> empty
Rule 18    f_saveType -> <empty>
Rule 19    idList -> ID
Rule 20    idList -> ID COMMA idList
Rule 21    tipo -> BOOL f_saveType
Rule 22    tipo -> INT f_saveType
Rule 23    tipo -> FLOAT f_saveType
Rule 24    tipo -> CHAR f_saveType
Rule 25    tipo -> STRING f_saveType
Rule 26    tipo -> IMAGE f_saveType
Rule 27    functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 28    functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 29    functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 30    functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 31    functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
Rule 32    functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
Rule 33    functions -> empty
Rule 34    f_saveModule -> <empty>
Rule 35    parameterList -> empty
Rule 36    parameterList -> COMMA tipo ID f_addToParam parameterList
Rule 37    f_addToParam -> <empty>
Rule 38    assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
Rule 39    assign -> empty
Rule 40    f_generateEqual -> <empty>
Rule 41    f_checkID -> <empty>
Rule 42    block -> empty
Rule 43    block -> TAB newline_tab statement moreStatements
Rule 44    moreStatements -> empty
Rule 45    moreStatements -> TAB newline_tab statement moreStatements
Rule 46    newline_tab -> empty
Rule 47    newline_tab -> NEWLINE TAB newline_tab
Rule 48    statement -> vars
Rule 49    statement -> assign
Rule 50    statement -> condition
Rule 51    statement -> cycle
Rule 52    statement -> funct NEWLINE
Rule 53    statement -> RETURN expression NEWLINE
Rule 54    condition -> IF expression COLON NEWLINE block
Rule 55    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 56    cycle -> WHILE expression COLON NEWLINE block
Rule 57    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 58    funct -> ID LPAREN RPAREN
Rule 59    funct -> ID LPAREN expression expressionList RPAREN
Rule 60    expressionList -> empty
Rule 61    expressionList -> COMMA expression expressionList
Rule 62    expression -> exp
Rule 63    expression -> exp compareToken exp f_generateComparation
Rule 64    f_generateComparation -> <empty>
Rule 65    compareToken -> GREATER_THAN
Rule 66    compareToken -> LESS_THAN
Rule 67    compareToken -> LESS_EQUAL_THAN
Rule 68    compareToken -> GREATER_EQUAL_THAN
Rule 69    compareToken -> NOT_EQUAL_THAN
Rule 70    compareToken -> SAME_AS
Rule 71    exp -> term moreTerms
Rule 72    moreTerms -> empty
Rule 73    moreTerms -> PLUS term moreTerms
Rule 74    moreTerms -> MINUS term moreTerms
Rule 75    term -> factor moreFactors
Rule 76    moreFactors -> empty
Rule 77    moreFactors -> DIVIDE factor moreFactors
Rule 78    moreFactors -> TIMES factor moreFactors
Rule 79    moreFactors -> MOD factor moreFactors
Rule 80    factor -> LPAREN expression RPAREN
Rule 81    factor -> cvar
Rule 82    factor -> funct
Rule 83    cvar -> ID f_isID
Rule 84    cvar -> C_BOOL f_isConst
Rule 85    cvar -> C_INT f_isConst
Rule 86    cvar -> C_FLOAT f_isConst
Rule 87    cvar -> C_CHAR f_isConst
Rule 88    cvar -> C_STRING f_isConst
Rule 89    f_isID -> <empty>
Rule 90    f_isConst -> <empty>

Terminals, with rules where they appear

AND                  : 
BOOL                 : 21
CAM                  : 6 7
CHAR                 : 24
COLON                : 6 7 14 15 27 28 29 30 31 32 54 55 55 56 57
COMMA                : 15 20 36 61
C_BOOL               : 84
C_CHAR               : 87
C_FLOAT              : 86
C_INT                : 14 15 85
C_STRING             : 88
DEF                  : 27 28 29 30 31 32
DIVIDE               : 77
DO                   : 57
ELSE                 : 55
EQUAL                : 38
FLOAT                : 23
GREATER_EQUAL_THAN   : 68
GREATER_THAN         : 65
ID                   : 2 6 7 14 15 19 20 27 28 28 29 30 30 32 36 38 58 59 83
IF                   : 54 55
IMAGE                : 26
INPUT                : 9
INT                  : 22
LESS_EQUAL_THAN      : 67
LESS_THAN            : 66
LPAREN               : 27 28 29 30 31 32 58 59 80
MAIN                 : 31 32
MINUS                : 74
MOD                  : 79
NEWLINE              : 2 6 7 9 11 13 16 27 28 29 30 31 32 38 47 52 53 54 55 55 56 57 57
NOT                  : 
NOT_EQUAL_THAN       : 69
OR                   : 
OUTPUT               : 11
PERIOD               : 
PICAM                : 7
PLUS                 : 73
PROGRAM              : 2
PWM                  : 13
RETURN               : 53
RPAREN               : 27 28 29 30 31 32 58 59 80
SAME_AS              : 70
STRING               : 25
TAB                  : 43 45 47
TIMES                : 78
VOID                 : 29 30 31 32
WEBCAM               : 6
WHILE                : 56 57
error                : 

Nonterminals, with rules where they appear

assign               : 1 38 49
block                : 27 28 29 30 31 32 54 55 55 56 57
camDeclaration       : 4
compareToken         : 63
condition            : 50
cvar                 : 81
cycle                : 51
empty                : 5 8 10 12 17 33 35 39 42 44 46 60 72 76
exp                  : 62 63 63
expression           : 38 53 54 55 56 57 59 61 80
expressionList       : 59 61
f_addToParam         : 28 30 32 36
f_checkID            : 38
f_generateComparation : 63
f_generateEqual      : 38
f_isConst            : 84 85 86 87 88
f_isID               : 83
f_saveModule         : 27 28 29 30 31 32
f_saveType           : 9 11 13 21 22 23 24 25 26
factor               : 75 77 78 79
funct                : 52 82
functions            : 1 27 28 29 30 31 32
hardware             : 1
idList               : 16 20
inputsDeclaration    : 4
moreFactors          : 75 77 78 79
moreStatements       : 43 45
moreTerms            : 71 73 74
newline_tab          : 43 45 47
outputsDeclaration   : 4
parameterList        : 28 30 32 36
pinList              : 9 11 13 15
program              : 0
programName          : 1
pwmDeclaration       : 4
statement            : 43 45
term                 : 71 73 74
tipo                 : 16 27 28 28 30 32 36
vars                 : 1 16 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . programName hardware vars assign functions
    (2) programName -> . PROGRAM ID NEWLINE

    PROGRAM         shift and go to state 3

    program                        shift and go to state 1
    programName                    shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> programName . hardware vars assign functions
    (4) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (5) camDeclaration -> . empty
    (6) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (3) empty -> .

    CAM             shift and go to state 4
    INPUT           reduce using rule 3 (empty -> .)
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    hardware                       shift and go to state 5
    camDeclaration                 shift and go to state 6
    empty                          shift and go to state 7

state 3

    (2) programName -> PROGRAM . ID NEWLINE

    ID              shift and go to state 8


state 4

    (6) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (7) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 9
    PICAM           shift and go to state 10


state 5

    (1) program -> programName hardware . vars assign functions
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType
    (3) empty -> .

    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 13
    tipo                           shift and go to state 14
    empty                          shift and go to state 19

state 6

    (4) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (8) inputsDeclaration -> . empty
    (9) inputsDeclaration -> . INPUT f_saveType pinList NEWLINE
    (3) empty -> .

    INPUT           shift and go to state 21
    OUTPUT          reduce using rule 3 (empty -> .)
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    inputsDeclaration              shift and go to state 20
    empty                          shift and go to state 22

state 7

    (5) camDeclaration -> empty .

    INPUT           reduce using rule 5 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 5 (camDeclaration -> empty .)
    PWM             reduce using rule 5 (camDeclaration -> empty .)
    BOOL            reduce using rule 5 (camDeclaration -> empty .)
    INT             reduce using rule 5 (camDeclaration -> empty .)
    FLOAT           reduce using rule 5 (camDeclaration -> empty .)
    CHAR            reduce using rule 5 (camDeclaration -> empty .)
    STRING          reduce using rule 5 (camDeclaration -> empty .)
    IMAGE           reduce using rule 5 (camDeclaration -> empty .)
    ID              reduce using rule 5 (camDeclaration -> empty .)
    DEF             reduce using rule 5 (camDeclaration -> empty .)
    $end            reduce using rule 5 (camDeclaration -> empty .)


state 8

    (2) programName -> PROGRAM ID . NEWLINE

    NEWLINE         shift and go to state 23


state 9

    (6) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 24


state 10

    (7) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 25


state 11

    (24) tipo -> CHAR . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 26

state 12

    (23) tipo -> FLOAT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 27

state 13

    (1) program -> programName hardware vars . assign functions
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (3) empty -> .

    ID              shift and go to state 29
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    assign                         shift and go to state 28
    empty                          shift and go to state 30

state 14

    (16) vars -> tipo . idList NEWLINE vars
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 32

    idList                         shift and go to state 31

state 15

    (22) tipo -> INT . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 33

state 16

    (26) tipo -> IMAGE . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 34

state 17

    (21) tipo -> BOOL . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 35

state 18

    (25) tipo -> STRING . f_saveType
    (18) f_saveType -> .

    ID              reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 36

state 19

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 20

    (4) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (10) outputsDeclaration -> . empty
    (11) outputsDeclaration -> . OUTPUT f_saveType pinList NEWLINE
    (3) empty -> .

    OUTPUT          shift and go to state 38
    PWM             reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    outputsDeclaration             shift and go to state 37
    empty                          shift and go to state 39

state 21

    (9) inputsDeclaration -> INPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 40

state 22

    (8) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> empty .)
    PWM             reduce using rule 8 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 8 (inputsDeclaration -> empty .)
    INT             reduce using rule 8 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 8 (inputsDeclaration -> empty .)
    STRING          reduce using rule 8 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> empty .)
    ID              reduce using rule 8 (inputsDeclaration -> empty .)
    DEF             reduce using rule 8 (inputsDeclaration -> empty .)
    $end            reduce using rule 8 (inputsDeclaration -> empty .)


state 23

    (2) programName -> PROGRAM ID NEWLINE .

    CAM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    BOOL            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INT             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    FLOAT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    CHAR            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    STRING          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    IMAGE           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    ID              reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    DEF             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    INPUT           reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    OUTPUT          reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    PWM             reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)
    $end            reduce using rule 2 (programName -> PROGRAM ID NEWLINE .)


state 24

    (6) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 41


state 25

    (7) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 42


state 26

    (24) tipo -> CHAR f_saveType .

    ID              reduce using rule 24 (tipo -> CHAR f_saveType .)


state 27

    (23) tipo -> FLOAT f_saveType .

    ID              reduce using rule 23 (tipo -> FLOAT f_saveType .)


state 28

    (1) program -> programName hardware vars assign . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 43
    empty                          shift and go to state 44

state 29

    (38) assign -> ID . f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (41) f_checkID -> .

    EQUAL           reduce using rule 41 (f_checkID -> .)

    f_checkID                      shift and go to state 46

state 30

    (39) assign -> empty .

    DEF             reduce using rule 39 (assign -> empty .)
    $end            reduce using rule 39 (assign -> empty .)
    TAB             reduce using rule 39 (assign -> empty .)
    WHILE           reduce using rule 39 (assign -> empty .)
    ELSE            reduce using rule 39 (assign -> empty .)


state 31

    (16) vars -> tipo idList . NEWLINE vars

    NEWLINE         shift and go to state 47


state 32

    (19) idList -> ID .
    (20) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 19 (idList -> ID .)
    COMMA           shift and go to state 48


state 33

    (22) tipo -> INT f_saveType .

    ID              reduce using rule 22 (tipo -> INT f_saveType .)


state 34

    (26) tipo -> IMAGE f_saveType .

    ID              reduce using rule 26 (tipo -> IMAGE f_saveType .)


state 35

    (21) tipo -> BOOL f_saveType .

    ID              reduce using rule 21 (tipo -> BOOL f_saveType .)


state 36

    (25) tipo -> STRING f_saveType .

    ID              reduce using rule 25 (tipo -> STRING f_saveType .)


state 37

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (12) pwmDeclaration -> . empty
    (13) pwmDeclaration -> . PWM f_saveType pinList NEWLINE
    (3) empty -> .

    PWM             shift and go to state 50
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    pwmDeclaration                 shift and go to state 49
    empty                          shift and go to state 51

state 38

    (11) outputsDeclaration -> OUTPUT . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 52

state 39

    (10) outputsDeclaration -> empty .

    PWM             reduce using rule 10 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 10 (outputsDeclaration -> empty .)
    INT             reduce using rule 10 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 10 (outputsDeclaration -> empty .)
    STRING          reduce using rule 10 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> empty .)
    ID              reduce using rule 10 (outputsDeclaration -> empty .)
    DEF             reduce using rule 10 (outputsDeclaration -> empty .)
    $end            reduce using rule 10 (outputsDeclaration -> empty .)


state 40

    (9) inputsDeclaration -> INPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 53

state 41

    (6) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 55


state 42

    (7) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 56


state 43

    (1) program -> programName hardware vars assign functions .

    $end            reduce using rule 1 (program -> programName hardware vars assign functions .)


state 44

    (33) functions -> empty .

    $end            reduce using rule 33 (functions -> empty .)


state 45

    (27) functions -> DEF . tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF . tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> DEF . VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF . VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> DEF . VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF . VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    VOID            shift and go to state 58
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16

    tipo                           shift and go to state 57

state 46

    (38) assign -> ID f_checkID . EQUAL expression NEWLINE f_generateEqual assign

    EQUAL           shift and go to state 59


state 47

    (16) vars -> tipo idList NEWLINE . vars
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType
    (3) empty -> .

    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16
    ID              reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    vars                           shift and go to state 60
    empty                          shift and go to state 19
    tipo                           shift and go to state 14

state 48

    (20) idList -> ID COMMA . idList
    (19) idList -> . ID
    (20) idList -> . ID COMMA idList

    ID              shift and go to state 32

    idList                         shift and go to state 61

state 49

    (4) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 4 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 50

    (13) pwmDeclaration -> PWM . f_saveType pinList NEWLINE
    (18) f_saveType -> .

    C_INT           reduce using rule 18 (f_saveType -> .)

    f_saveType                     shift and go to state 62

state 51

    (12) pwmDeclaration -> empty .

    BOOL            reduce using rule 12 (pwmDeclaration -> empty .)
    INT             reduce using rule 12 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 12 (pwmDeclaration -> empty .)
    STRING          reduce using rule 12 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> empty .)
    ID              reduce using rule 12 (pwmDeclaration -> empty .)
    DEF             reduce using rule 12 (pwmDeclaration -> empty .)
    $end            reduce using rule 12 (pwmDeclaration -> empty .)


state 52

    (11) outputsDeclaration -> OUTPUT f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 63

state 53

    (9) inputsDeclaration -> INPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 64


state 54

    (14) pinList -> C_INT . COLON ID
    (15) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 65


state 55

    (6) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 56

    (7) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 7 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 57

    (27) functions -> DEF tipo . ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 66


state 58

    (29) functions -> DEF VOID . ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID . ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID . MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID . MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 68
    MAIN            shift and go to state 67


state 59

    (38) assign -> ID f_checkID EQUAL . expression NEWLINE f_generateEqual assign
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 81

state 60

    (16) vars -> tipo idList NEWLINE vars .

    ID              reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    DEF             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    $end            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    TAB             reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    WHILE           reduce using rule 16 (vars -> tipo idList NEWLINE vars .)
    ELSE            reduce using rule 16 (vars -> tipo idList NEWLINE vars .)


state 61

    (20) idList -> ID COMMA idList .

    NEWLINE         reduce using rule 20 (idList -> ID COMMA idList .)


state 62

    (13) pwmDeclaration -> PWM f_saveType . pinList NEWLINE
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 82

state 63

    (11) outputsDeclaration -> OUTPUT f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 83


state 64

    (9) inputsDeclaration -> INPUT f_saveType pinList NEWLINE .

    OUTPUT          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    PWM             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 9 (inputsDeclaration -> INPUT f_saveType pinList NEWLINE .)


state 65

    (14) pinList -> C_INT COLON . ID
    (15) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 84


state 66

    (27) functions -> DEF tipo ID . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 85

state 67

    (31) functions -> DEF VOID MAIN . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID MAIN . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 86

state 68

    (29) functions -> DEF VOID ID . f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID ID . f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (34) f_saveModule -> .

    LPAREN          reduce using rule 34 (f_saveModule -> .)

    f_saveModule                   shift and go to state 87

state 69

    (81) factor -> cvar .

    DIVIDE          reduce using rule 81 (factor -> cvar .)
    TIMES           reduce using rule 81 (factor -> cvar .)
    MOD             reduce using rule 81 (factor -> cvar .)
    PLUS            reduce using rule 81 (factor -> cvar .)
    MINUS           reduce using rule 81 (factor -> cvar .)
    GREATER_THAN    reduce using rule 81 (factor -> cvar .)
    LESS_THAN       reduce using rule 81 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 81 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 81 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 81 (factor -> cvar .)
    SAME_AS         reduce using rule 81 (factor -> cvar .)
    NEWLINE         reduce using rule 81 (factor -> cvar .)
    RPAREN          reduce using rule 81 (factor -> cvar .)
    COMMA           reduce using rule 81 (factor -> cvar .)
    COLON           reduce using rule 81 (factor -> cvar .)


state 70

    (86) cvar -> C_FLOAT . f_isConst
    (90) f_isConst -> .

    DIVIDE          reduce using rule 90 (f_isConst -> .)
    TIMES           reduce using rule 90 (f_isConst -> .)
    MOD             reduce using rule 90 (f_isConst -> .)
    PLUS            reduce using rule 90 (f_isConst -> .)
    MINUS           reduce using rule 90 (f_isConst -> .)
    GREATER_THAN    reduce using rule 90 (f_isConst -> .)
    LESS_THAN       reduce using rule 90 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_isConst -> .)
    SAME_AS         reduce using rule 90 (f_isConst -> .)
    NEWLINE         reduce using rule 90 (f_isConst -> .)
    RPAREN          reduce using rule 90 (f_isConst -> .)
    COMMA           reduce using rule 90 (f_isConst -> .)
    COLON           reduce using rule 90 (f_isConst -> .)

    f_isConst                      shift and go to state 88

state 71

    (82) factor -> funct .

    DIVIDE          reduce using rule 82 (factor -> funct .)
    TIMES           reduce using rule 82 (factor -> funct .)
    MOD             reduce using rule 82 (factor -> funct .)
    PLUS            reduce using rule 82 (factor -> funct .)
    MINUS           reduce using rule 82 (factor -> funct .)
    GREATER_THAN    reduce using rule 82 (factor -> funct .)
    LESS_THAN       reduce using rule 82 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 82 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 82 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 82 (factor -> funct .)
    SAME_AS         reduce using rule 82 (factor -> funct .)
    NEWLINE         reduce using rule 82 (factor -> funct .)
    RPAREN          reduce using rule 82 (factor -> funct .)
    COMMA           reduce using rule 82 (factor -> funct .)
    COLON           reduce using rule 82 (factor -> funct .)


state 72

    (84) cvar -> C_BOOL . f_isConst
    (90) f_isConst -> .

    DIVIDE          reduce using rule 90 (f_isConst -> .)
    TIMES           reduce using rule 90 (f_isConst -> .)
    MOD             reduce using rule 90 (f_isConst -> .)
    PLUS            reduce using rule 90 (f_isConst -> .)
    MINUS           reduce using rule 90 (f_isConst -> .)
    GREATER_THAN    reduce using rule 90 (f_isConst -> .)
    LESS_THAN       reduce using rule 90 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_isConst -> .)
    SAME_AS         reduce using rule 90 (f_isConst -> .)
    NEWLINE         reduce using rule 90 (f_isConst -> .)
    RPAREN          reduce using rule 90 (f_isConst -> .)
    COMMA           reduce using rule 90 (f_isConst -> .)
    COLON           reduce using rule 90 (f_isConst -> .)

    f_isConst                      shift and go to state 89

state 73

    (75) term -> factor . moreFactors
    (76) moreFactors -> . empty
    (77) moreFactors -> . DIVIDE factor moreFactors
    (78) moreFactors -> . TIMES factor moreFactors
    (79) moreFactors -> . MOD factor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 91
    TIMES           shift and go to state 92
    MOD             shift and go to state 94
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 90
    empty                          shift and go to state 93

state 74

    (80) factor -> LPAREN . expression RPAREN
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 95

state 75

    (85) cvar -> C_INT . f_isConst
    (90) f_isConst -> .

    DIVIDE          reduce using rule 90 (f_isConst -> .)
    TIMES           reduce using rule 90 (f_isConst -> .)
    MOD             reduce using rule 90 (f_isConst -> .)
    PLUS            reduce using rule 90 (f_isConst -> .)
    MINUS           reduce using rule 90 (f_isConst -> .)
    GREATER_THAN    reduce using rule 90 (f_isConst -> .)
    LESS_THAN       reduce using rule 90 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_isConst -> .)
    SAME_AS         reduce using rule 90 (f_isConst -> .)
    NEWLINE         reduce using rule 90 (f_isConst -> .)
    RPAREN          reduce using rule 90 (f_isConst -> .)
    COMMA           reduce using rule 90 (f_isConst -> .)
    COLON           reduce using rule 90 (f_isConst -> .)

    f_isConst                      shift and go to state 96

state 76

    (83) cvar -> ID . f_isID
    (58) funct -> ID . LPAREN RPAREN
    (59) funct -> ID . LPAREN expression expressionList RPAREN
    (89) f_isID -> .

    LPAREN          shift and go to state 97
    DIVIDE          reduce using rule 89 (f_isID -> .)
    TIMES           reduce using rule 89 (f_isID -> .)
    MOD             reduce using rule 89 (f_isID -> .)
    PLUS            reduce using rule 89 (f_isID -> .)
    MINUS           reduce using rule 89 (f_isID -> .)
    GREATER_THAN    reduce using rule 89 (f_isID -> .)
    LESS_THAN       reduce using rule 89 (f_isID -> .)
    LESS_EQUAL_THAN reduce using rule 89 (f_isID -> .)
    GREATER_EQUAL_THAN reduce using rule 89 (f_isID -> .)
    NOT_EQUAL_THAN  reduce using rule 89 (f_isID -> .)
    SAME_AS         reduce using rule 89 (f_isID -> .)
    NEWLINE         reduce using rule 89 (f_isID -> .)
    RPAREN          reduce using rule 89 (f_isID -> .)
    COMMA           reduce using rule 89 (f_isID -> .)
    COLON           reduce using rule 89 (f_isID -> .)

    f_isID                         shift and go to state 98

state 77

    (88) cvar -> C_STRING . f_isConst
    (90) f_isConst -> .

    DIVIDE          reduce using rule 90 (f_isConst -> .)
    TIMES           reduce using rule 90 (f_isConst -> .)
    MOD             reduce using rule 90 (f_isConst -> .)
    PLUS            reduce using rule 90 (f_isConst -> .)
    MINUS           reduce using rule 90 (f_isConst -> .)
    GREATER_THAN    reduce using rule 90 (f_isConst -> .)
    LESS_THAN       reduce using rule 90 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_isConst -> .)
    SAME_AS         reduce using rule 90 (f_isConst -> .)
    NEWLINE         reduce using rule 90 (f_isConst -> .)
    RPAREN          reduce using rule 90 (f_isConst -> .)
    COMMA           reduce using rule 90 (f_isConst -> .)
    COLON           reduce using rule 90 (f_isConst -> .)

    f_isConst                      shift and go to state 99

state 78

    (71) exp -> term . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS term moreTerms
    (74) moreTerms -> . MINUS term moreTerms
    (3) empty -> .

    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 100
    empty                          shift and go to state 103

state 79

    (87) cvar -> C_CHAR . f_isConst
    (90) f_isConst -> .

    DIVIDE          reduce using rule 90 (f_isConst -> .)
    TIMES           reduce using rule 90 (f_isConst -> .)
    MOD             reduce using rule 90 (f_isConst -> .)
    PLUS            reduce using rule 90 (f_isConst -> .)
    MINUS           reduce using rule 90 (f_isConst -> .)
    GREATER_THAN    reduce using rule 90 (f_isConst -> .)
    LESS_THAN       reduce using rule 90 (f_isConst -> .)
    LESS_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    GREATER_EQUAL_THAN reduce using rule 90 (f_isConst -> .)
    NOT_EQUAL_THAN  reduce using rule 90 (f_isConst -> .)
    SAME_AS         reduce using rule 90 (f_isConst -> .)
    NEWLINE         reduce using rule 90 (f_isConst -> .)
    RPAREN          reduce using rule 90 (f_isConst -> .)
    COMMA           reduce using rule 90 (f_isConst -> .)
    COLON           reduce using rule 90 (f_isConst -> .)

    f_isConst                      shift and go to state 104

state 80

    (62) expression -> exp .
    (63) expression -> exp . compareToken exp f_generateComparation
    (65) compareToken -> . GREATER_THAN
    (66) compareToken -> . LESS_THAN
    (67) compareToken -> . LESS_EQUAL_THAN
    (68) compareToken -> . GREATER_EQUAL_THAN
    (69) compareToken -> . NOT_EQUAL_THAN
    (70) compareToken -> . SAME_AS

    COLON           reduce using rule 62 (expression -> exp .)
    NEWLINE         reduce using rule 62 (expression -> exp .)
    RPAREN          reduce using rule 62 (expression -> exp .)
    COMMA           reduce using rule 62 (expression -> exp .)
    GREATER_THAN    shift and go to state 110
    LESS_THAN       shift and go to state 111
    LESS_EQUAL_THAN shift and go to state 107
    GREATER_EQUAL_THAN shift and go to state 106
    NOT_EQUAL_THAN  shift and go to state 109
    SAME_AS         shift and go to state 108

    compareToken                   shift and go to state 105

state 81

    (38) assign -> ID f_checkID EQUAL expression . NEWLINE f_generateEqual assign

    NEWLINE         shift and go to state 112


state 82

    (13) pwmDeclaration -> PWM f_saveType pinList . NEWLINE

    NEWLINE         shift and go to state 113


state 83

    (11) outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .

    PWM             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    BOOL            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    INT             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    STRING          reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    ID              reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    DEF             reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)
    $end            reduce using rule 11 (outputsDeclaration -> OUTPUT f_saveType pinList NEWLINE .)


state 84

    (14) pinList -> C_INT COLON ID .
    (15) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 114


state 85

    (27) functions -> DEF tipo ID f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 115


state 86

    (31) functions -> DEF VOID MAIN f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID MAIN f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 116


state 87

    (29) functions -> DEF VOID ID f_saveModule . LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID ID f_saveModule . LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 117


state 88

    (86) cvar -> C_FLOAT f_isConst .

    DIVIDE          reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    TIMES           reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    MOD             reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    PLUS            reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    MINUS           reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    GREATER_THAN    reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    LESS_THAN       reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    SAME_AS         reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    COMMA           reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    RPAREN          reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    NEWLINE         reduce using rule 86 (cvar -> C_FLOAT f_isConst .)
    COLON           reduce using rule 86 (cvar -> C_FLOAT f_isConst .)


state 89

    (84) cvar -> C_BOOL f_isConst .

    DIVIDE          reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    TIMES           reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    MOD             reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    PLUS            reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    MINUS           reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    GREATER_THAN    reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    LESS_THAN       reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    LESS_EQUAL_THAN reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    SAME_AS         reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    COMMA           reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    RPAREN          reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    NEWLINE         reduce using rule 84 (cvar -> C_BOOL f_isConst .)
    COLON           reduce using rule 84 (cvar -> C_BOOL f_isConst .)


state 90

    (75) term -> factor moreFactors .

    PLUS            reduce using rule 75 (term -> factor moreFactors .)
    MINUS           reduce using rule 75 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 75 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 75 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 75 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 75 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 75 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 75 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 75 (term -> factor moreFactors .)
    RPAREN          reduce using rule 75 (term -> factor moreFactors .)
    COMMA           reduce using rule 75 (term -> factor moreFactors .)
    COLON           reduce using rule 75 (term -> factor moreFactors .)


state 91

    (77) moreFactors -> DIVIDE . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    factor                         shift and go to state 118

state 92

    (78) moreFactors -> TIMES . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    factor                         shift and go to state 119

state 93

    (76) moreFactors -> empty .

    PLUS            reduce using rule 76 (moreFactors -> empty .)
    MINUS           reduce using rule 76 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 76 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 76 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 76 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 76 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 76 (moreFactors -> empty .)
    SAME_AS         reduce using rule 76 (moreFactors -> empty .)
    NEWLINE         reduce using rule 76 (moreFactors -> empty .)
    RPAREN          reduce using rule 76 (moreFactors -> empty .)
    COMMA           reduce using rule 76 (moreFactors -> empty .)
    COLON           reduce using rule 76 (moreFactors -> empty .)


state 94

    (79) moreFactors -> MOD . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    factor                         shift and go to state 120

state 95

    (80) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 121


state 96

    (85) cvar -> C_INT f_isConst .

    DIVIDE          reduce using rule 85 (cvar -> C_INT f_isConst .)
    TIMES           reduce using rule 85 (cvar -> C_INT f_isConst .)
    MOD             reduce using rule 85 (cvar -> C_INT f_isConst .)
    PLUS            reduce using rule 85 (cvar -> C_INT f_isConst .)
    MINUS           reduce using rule 85 (cvar -> C_INT f_isConst .)
    GREATER_THAN    reduce using rule 85 (cvar -> C_INT f_isConst .)
    LESS_THAN       reduce using rule 85 (cvar -> C_INT f_isConst .)
    LESS_EQUAL_THAN reduce using rule 85 (cvar -> C_INT f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 85 (cvar -> C_INT f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 85 (cvar -> C_INT f_isConst .)
    SAME_AS         reduce using rule 85 (cvar -> C_INT f_isConst .)
    COMMA           reduce using rule 85 (cvar -> C_INT f_isConst .)
    RPAREN          reduce using rule 85 (cvar -> C_INT f_isConst .)
    NEWLINE         reduce using rule 85 (cvar -> C_INT f_isConst .)
    COLON           reduce using rule 85 (cvar -> C_INT f_isConst .)


state 97

    (58) funct -> ID LPAREN . RPAREN
    (59) funct -> ID LPAREN . expression expressionList RPAREN
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 122
    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 123

state 98

    (83) cvar -> ID f_isID .

    DIVIDE          reduce using rule 83 (cvar -> ID f_isID .)
    TIMES           reduce using rule 83 (cvar -> ID f_isID .)
    MOD             reduce using rule 83 (cvar -> ID f_isID .)
    PLUS            reduce using rule 83 (cvar -> ID f_isID .)
    MINUS           reduce using rule 83 (cvar -> ID f_isID .)
    GREATER_THAN    reduce using rule 83 (cvar -> ID f_isID .)
    LESS_THAN       reduce using rule 83 (cvar -> ID f_isID .)
    LESS_EQUAL_THAN reduce using rule 83 (cvar -> ID f_isID .)
    GREATER_EQUAL_THAN reduce using rule 83 (cvar -> ID f_isID .)
    NOT_EQUAL_THAN  reduce using rule 83 (cvar -> ID f_isID .)
    SAME_AS         reduce using rule 83 (cvar -> ID f_isID .)
    COMMA           reduce using rule 83 (cvar -> ID f_isID .)
    RPAREN          reduce using rule 83 (cvar -> ID f_isID .)
    NEWLINE         reduce using rule 83 (cvar -> ID f_isID .)
    COLON           reduce using rule 83 (cvar -> ID f_isID .)


state 99

    (88) cvar -> C_STRING f_isConst .

    DIVIDE          reduce using rule 88 (cvar -> C_STRING f_isConst .)
    TIMES           reduce using rule 88 (cvar -> C_STRING f_isConst .)
    MOD             reduce using rule 88 (cvar -> C_STRING f_isConst .)
    PLUS            reduce using rule 88 (cvar -> C_STRING f_isConst .)
    MINUS           reduce using rule 88 (cvar -> C_STRING f_isConst .)
    GREATER_THAN    reduce using rule 88 (cvar -> C_STRING f_isConst .)
    LESS_THAN       reduce using rule 88 (cvar -> C_STRING f_isConst .)
    LESS_EQUAL_THAN reduce using rule 88 (cvar -> C_STRING f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 88 (cvar -> C_STRING f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 88 (cvar -> C_STRING f_isConst .)
    SAME_AS         reduce using rule 88 (cvar -> C_STRING f_isConst .)
    COMMA           reduce using rule 88 (cvar -> C_STRING f_isConst .)
    RPAREN          reduce using rule 88 (cvar -> C_STRING f_isConst .)
    NEWLINE         reduce using rule 88 (cvar -> C_STRING f_isConst .)
    COLON           reduce using rule 88 (cvar -> C_STRING f_isConst .)


state 100

    (71) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 71 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 71 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 71 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 71 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 71 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 71 (exp -> term moreTerms .)
    RPAREN          reduce using rule 71 (exp -> term moreTerms .)
    COMMA           reduce using rule 71 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 71 (exp -> term moreTerms .)
    COLON           reduce using rule 71 (exp -> term moreTerms .)


state 101

    (73) moreTerms -> PLUS . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 124
    funct                          shift and go to state 71
    factor                         shift and go to state 73
    cvar                           shift and go to state 69

state 102

    (74) moreTerms -> MINUS . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 125
    funct                          shift and go to state 71
    factor                         shift and go to state 73
    cvar                           shift and go to state 69

state 103

    (72) moreTerms -> empty .

    GREATER_THAN    reduce using rule 72 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 72 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 72 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 72 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 72 (moreTerms -> empty .)
    SAME_AS         reduce using rule 72 (moreTerms -> empty .)
    NEWLINE         reduce using rule 72 (moreTerms -> empty .)
    RPAREN          reduce using rule 72 (moreTerms -> empty .)
    COMMA           reduce using rule 72 (moreTerms -> empty .)
    COLON           reduce using rule 72 (moreTerms -> empty .)


state 104

    (87) cvar -> C_CHAR f_isConst .

    DIVIDE          reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    TIMES           reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    MOD             reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    PLUS            reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    MINUS           reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    GREATER_THAN    reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    LESS_THAN       reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    LESS_EQUAL_THAN reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    GREATER_EQUAL_THAN reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    NOT_EQUAL_THAN  reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    SAME_AS         reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    COMMA           reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    RPAREN          reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    NEWLINE         reduce using rule 87 (cvar -> C_CHAR f_isConst .)
    COLON           reduce using rule 87 (cvar -> C_CHAR f_isConst .)


state 105

    (63) expression -> exp compareToken . exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 126
    factor                         shift and go to state 73

state 106

    (68) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 68 (compareToken -> GREATER_EQUAL_THAN .)


state 107

    (67) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 67 (compareToken -> LESS_EQUAL_THAN .)


state 108

    (70) compareToken -> SAME_AS .

    LPAREN          reduce using rule 70 (compareToken -> SAME_AS .)
    ID              reduce using rule 70 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 70 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 70 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 70 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 70 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 70 (compareToken -> SAME_AS .)


state 109

    (69) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 69 (compareToken -> NOT_EQUAL_THAN .)


state 110

    (65) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 65 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 65 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 65 (compareToken -> GREATER_THAN .)


state 111

    (66) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 66 (compareToken -> LESS_THAN .)
    ID              reduce using rule 66 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 66 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 66 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 66 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 66 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 66 (compareToken -> LESS_THAN .)


state 112

    (38) assign -> ID f_checkID EQUAL expression NEWLINE . f_generateEqual assign
    (40) f_generateEqual -> .

    ID              reduce using rule 40 (f_generateEqual -> .)
    DEF             reduce using rule 40 (f_generateEqual -> .)
    $end            reduce using rule 40 (f_generateEqual -> .)
    TAB             reduce using rule 40 (f_generateEqual -> .)
    WHILE           reduce using rule 40 (f_generateEqual -> .)
    ELSE            reduce using rule 40 (f_generateEqual -> .)

    f_generateEqual                shift and go to state 127

state 113

    (13) pwmDeclaration -> PWM f_saveType pinList NEWLINE .

    BOOL            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    INT             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    FLOAT           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    CHAR            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    STRING          reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    IMAGE           reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    ID              reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    DEF             reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)
    $end            reduce using rule 13 (pwmDeclaration -> PWM f_saveType pinList NEWLINE .)


state 114

    (15) pinList -> C_INT COLON ID COMMA . pinList
    (14) pinList -> . C_INT COLON ID
    (15) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 54

    pinList                        shift and go to state 128

state 115

    (27) functions -> DEF tipo ID f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (28) functions -> DEF tipo ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 129
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16

    tipo                           shift and go to state 130

state 116

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (32) functions -> DEF VOID MAIN f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 131
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16

    tipo                           shift and go to state 132

state 117

    (29) functions -> DEF VOID ID f_saveModule LPAREN . RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID ID f_saveModule LPAREN . tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    RPAREN          shift and go to state 133
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16

    tipo                           shift and go to state 134

state 118

    (77) moreFactors -> DIVIDE factor . moreFactors
    (76) moreFactors -> . empty
    (77) moreFactors -> . DIVIDE factor moreFactors
    (78) moreFactors -> . TIMES factor moreFactors
    (79) moreFactors -> . MOD factor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 91
    TIMES           shift and go to state 92
    MOD             shift and go to state 94
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 135
    empty                          shift and go to state 93

state 119

    (78) moreFactors -> TIMES factor . moreFactors
    (76) moreFactors -> . empty
    (77) moreFactors -> . DIVIDE factor moreFactors
    (78) moreFactors -> . TIMES factor moreFactors
    (79) moreFactors -> . MOD factor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 91
    TIMES           shift and go to state 92
    MOD             shift and go to state 94
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 136
    empty                          shift and go to state 93

state 120

    (79) moreFactors -> MOD factor . moreFactors
    (76) moreFactors -> . empty
    (77) moreFactors -> . DIVIDE factor moreFactors
    (78) moreFactors -> . TIMES factor moreFactors
    (79) moreFactors -> . MOD factor moreFactors
    (3) empty -> .

    DIVIDE          shift and go to state 91
    TIMES           shift and go to state 92
    MOD             shift and go to state 94
    PLUS            reduce using rule 3 (empty -> .)
    MINUS           reduce using rule 3 (empty -> .)
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreFactors                    shift and go to state 137
    empty                          shift and go to state 93

state 121

    (80) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 80 (factor -> LPAREN expression RPAREN .)


state 122

    (58) funct -> ID LPAREN RPAREN .

    DIVIDE          reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 58 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 58 (funct -> ID LPAREN RPAREN .)


state 123

    (59) funct -> ID LPAREN expression . expressionList RPAREN
    (60) expressionList -> . empty
    (61) expressionList -> . COMMA expression expressionList
    (3) empty -> .

    COMMA           shift and go to state 139
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 138
    empty                          shift and go to state 140

state 124

    (73) moreTerms -> PLUS term . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS term moreTerms
    (74) moreTerms -> . MINUS term moreTerms
    (3) empty -> .

    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 141
    empty                          shift and go to state 103

state 125

    (74) moreTerms -> MINUS term . moreTerms
    (72) moreTerms -> . empty
    (73) moreTerms -> . PLUS term moreTerms
    (74) moreTerms -> . MINUS term moreTerms
    (3) empty -> .

    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    GREATER_THAN    reduce using rule 3 (empty -> .)
    LESS_THAN       reduce using rule 3 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 3 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 3 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 3 (empty -> .)
    SAME_AS         reduce using rule 3 (empty -> .)
    NEWLINE         reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    COLON           reduce using rule 3 (empty -> .)

    moreTerms                      shift and go to state 142
    empty                          shift and go to state 103

state 126

    (63) expression -> exp compareToken exp . f_generateComparation
    (64) f_generateComparation -> .

    NEWLINE         reduce using rule 64 (f_generateComparation -> .)
    RPAREN          reduce using rule 64 (f_generateComparation -> .)
    COMMA           reduce using rule 64 (f_generateComparation -> .)
    COLON           reduce using rule 64 (f_generateComparation -> .)

    f_generateComparation          shift and go to state 143

state 127

    (38) assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual . assign
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (3) empty -> .

    ID              shift and go to state 29
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    assign                         shift and go to state 144
    empty                          shift and go to state 30

state 128

    (15) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 15 (pinList -> C_INT COLON ID COMMA pinList .)


state 129

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 145


state 130

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 146


state 131

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 147


state 132

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 148


state 133

    (29) functions -> DEF VOID ID f_saveModule LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 149


state 134

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo . ID f_addToParam parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 150


state 135

    (77) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 77 (moreFactors -> DIVIDE factor moreFactors .)


state 136

    (78) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 78 (moreFactors -> TIMES factor moreFactors .)


state 137

    (79) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 79 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 79 (moreFactors -> MOD factor moreFactors .)


state 138

    (59) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 151


state 139

    (61) expressionList -> COMMA . expression expressionList
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 152

state 140

    (60) expressionList -> empty .

    RPAREN          reduce using rule 60 (expressionList -> empty .)


state 141

    (73) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 73 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 73 (moreTerms -> PLUS term moreTerms .)


state 142

    (74) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 74 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 74 (moreTerms -> MINUS term moreTerms .)


state 143

    (63) expression -> exp compareToken exp f_generateComparation .

    COLON           reduce using rule 63 (expression -> exp compareToken exp f_generateComparation .)
    NEWLINE         reduce using rule 63 (expression -> exp compareToken exp f_generateComparation .)
    RPAREN          reduce using rule 63 (expression -> exp compareToken exp f_generateComparation .)
    COMMA           reduce using rule 63 (expression -> exp compareToken exp f_generateComparation .)


state 144

    (38) assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .

    TAB             reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    DEF             reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    $end            reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    WHILE           reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)
    ELSE            reduce using rule 38 (assign -> ID f_checkID EQUAL expression NEWLINE f_generateEqual assign .)


state 145

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 153


state 146

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 154

state 147

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 155


state 148

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 156

state 149

    (29) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 157


state 150

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID . f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 158

state 151

    (59) funct -> ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 59 (funct -> ID LPAREN expression expressionList RPAREN .)


state 152

    (61) expressionList -> COMMA expression . expressionList
    (60) expressionList -> . empty
    (61) expressionList -> . COMMA expression expressionList
    (3) empty -> .

    COMMA           shift and go to state 139
    RPAREN          reduce using rule 3 (empty -> .)

    expressionList                 shift and go to state 159
    empty                          shift and go to state 140

state 153

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 160
    block                          shift and go to state 161

state 154

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 165
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 163
    empty                          shift and go to state 164

state 155

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    block                          shift and go to state 166
    empty                          shift and go to state 160

state 156

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 165
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 167
    empty                          shift and go to state 164

state 157

    (29) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    block                          shift and go to state 168
    empty                          shift and go to state 160

state 158

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam . parameterList RPAREN COLON NEWLINE block functions
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 165
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 169
    empty                          shift and go to state 164

state 159

    (61) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 61 (expressionList -> COMMA expression expressionList .)


state 160

    (42) block -> empty .

    TAB             reduce using rule 42 (block -> empty .)
    DEF             reduce using rule 42 (block -> empty .)
    $end            reduce using rule 42 (block -> empty .)
    WHILE           reduce using rule 42 (block -> empty .)
    ELSE            reduce using rule 42 (block -> empty .)


state 161

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 170
    empty                          shift and go to state 44

state 162

    (43) block -> TAB . newline_tab statement moreStatements
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 172
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 171
    empty                          shift and go to state 173

state 163

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 174


state 164

    (35) parameterList -> empty .

    RPAREN          reduce using rule 35 (parameterList -> empty .)


state 165

    (36) parameterList -> COMMA . tipo ID f_addToParam parameterList
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType

    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16

    tipo                           shift and go to state 175

state 166

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 176
    empty                          shift and go to state 44

state 167

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 177


state 168

    (29) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 178
    empty                          shift and go to state 44

state 169

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 179


state 170

    (27) functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 171

    (43) block -> TAB newline_tab . statement moreStatements
    (48) statement -> . vars
    (49) statement -> . assign
    (50) statement -> . condition
    (51) statement -> . cycle
    (52) statement -> . funct NEWLINE
    (53) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (54) condition -> . IF expression COLON NEWLINE block
    (55) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (56) cycle -> . WHILE expression COLON NEWLINE block
    (57) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 181
    ID              shift and go to state 188
    IF              shift and go to state 190
    WHILE           shift and go to state 184
    DO              shift and go to state 180
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 14
    vars                           shift and go to state 182
    funct                          shift and go to state 183
    empty                          shift and go to state 186
    statement                      shift and go to state 187
    cycle                          shift and go to state 185
    assign                         shift and go to state 191
    condition                      shift and go to state 189

state 172

    (47) newline_tab -> NEWLINE . TAB newline_tab

    TAB             shift and go to state 192


state 173

    (46) newline_tab -> empty .

    RETURN          reduce using rule 46 (newline_tab -> empty .)
    ID              reduce using rule 46 (newline_tab -> empty .)
    IF              reduce using rule 46 (newline_tab -> empty .)
    WHILE           reduce using rule 46 (newline_tab -> empty .)
    DO              reduce using rule 46 (newline_tab -> empty .)
    BOOL            reduce using rule 46 (newline_tab -> empty .)
    INT             reduce using rule 46 (newline_tab -> empty .)
    FLOAT           reduce using rule 46 (newline_tab -> empty .)
    CHAR            reduce using rule 46 (newline_tab -> empty .)
    STRING          reduce using rule 46 (newline_tab -> empty .)
    IMAGE           reduce using rule 46 (newline_tab -> empty .)
    TAB             reduce using rule 46 (newline_tab -> empty .)
    DEF             reduce using rule 46 (newline_tab -> empty .)
    $end            reduce using rule 46 (newline_tab -> empty .)
    ELSE            reduce using rule 46 (newline_tab -> empty .)


state 174

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 193


state 175

    (36) parameterList -> COMMA tipo . ID f_addToParam parameterList

    ID              shift and go to state 194


state 176

    (31) functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 177

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 195


state 178

    (29) functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions .)


state 179

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 196


state 180

    (57) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 197


state 181

    (53) statement -> RETURN . expression NEWLINE
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 198

state 182

    (48) statement -> vars .

    TAB             reduce using rule 48 (statement -> vars .)
    DEF             reduce using rule 48 (statement -> vars .)
    $end            reduce using rule 48 (statement -> vars .)
    WHILE           reduce using rule 48 (statement -> vars .)
    ELSE            reduce using rule 48 (statement -> vars .)


state 183

    (52) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 199


state 184

    (56) cycle -> WHILE . expression COLON NEWLINE block
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 200

state 185

    (51) statement -> cycle .

    TAB             reduce using rule 51 (statement -> cycle .)
    DEF             reduce using rule 51 (statement -> cycle .)
    $end            reduce using rule 51 (statement -> cycle .)
    WHILE           reduce using rule 51 (statement -> cycle .)
    ELSE            reduce using rule 51 (statement -> cycle .)


state 186

    (17) vars -> empty .
    (39) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 39 (assign -> empty .) ]
  ! DEF             [ reduce using rule 39 (assign -> empty .) ]
  ! $end            [ reduce using rule 39 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 39 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 39 (assign -> empty .) ]


state 187

    (43) block -> TAB newline_tab statement . moreStatements
    (44) moreStatements -> . empty
    (45) moreStatements -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 202
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 201
    moreStatements                 shift and go to state 203

state 188

    (38) assign -> ID . f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (58) funct -> ID . LPAREN RPAREN
    (59) funct -> ID . LPAREN expression expressionList RPAREN
    (41) f_checkID -> .

    LPAREN          shift and go to state 97
    EQUAL           reduce using rule 41 (f_checkID -> .)

    f_checkID                      shift and go to state 46

state 189

    (50) statement -> condition .

    TAB             reduce using rule 50 (statement -> condition .)
    DEF             reduce using rule 50 (statement -> condition .)
    $end            reduce using rule 50 (statement -> condition .)
    WHILE           reduce using rule 50 (statement -> condition .)
    ELSE            reduce using rule 50 (statement -> condition .)


state 190

    (54) condition -> IF . expression COLON NEWLINE block
    (55) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 204

state 191

    (49) statement -> assign .

    TAB             reduce using rule 49 (statement -> assign .)
    DEF             reduce using rule 49 (statement -> assign .)
    $end            reduce using rule 49 (statement -> assign .)
    WHILE           reduce using rule 49 (statement -> assign .)
    ELSE            reduce using rule 49 (statement -> assign .)


state 192

    (47) newline_tab -> NEWLINE TAB . newline_tab
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 172
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 205
    empty                          shift and go to state 173

state 193

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 206


state 194

    (36) parameterList -> COMMA tipo ID . f_addToParam parameterList
    (37) f_addToParam -> .

    COMMA           reduce using rule 37 (f_addToParam -> .)
    RPAREN          reduce using rule 37 (f_addToParam -> .)

    f_addToParam                   shift and go to state 207

state 195

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 208


state 196

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 209


state 197

    (57) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 210


state 198

    (53) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 211


state 199

    (52) statement -> funct NEWLINE .

    TAB             reduce using rule 52 (statement -> funct NEWLINE .)
    DEF             reduce using rule 52 (statement -> funct NEWLINE .)
    $end            reduce using rule 52 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 52 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 52 (statement -> funct NEWLINE .)


state 200

    (56) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 212


state 201

    (44) moreStatements -> empty .

    TAB             reduce using rule 44 (moreStatements -> empty .)
    DEF             reduce using rule 44 (moreStatements -> empty .)
    $end            reduce using rule 44 (moreStatements -> empty .)
    WHILE           reduce using rule 44 (moreStatements -> empty .)
    ELSE            reduce using rule 44 (moreStatements -> empty .)


state 202

    (45) moreStatements -> TAB . newline_tab statement moreStatements
    (46) newline_tab -> . empty
    (47) newline_tab -> . NEWLINE TAB newline_tab
    (3) empty -> .

    NEWLINE         shift and go to state 172
    RETURN          reduce using rule 3 (empty -> .)
    ID              reduce using rule 3 (empty -> .)
    IF              reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    DO              reduce using rule 3 (empty -> .)
    BOOL            reduce using rule 3 (empty -> .)
    INT             reduce using rule 3 (empty -> .)
    FLOAT           reduce using rule 3 (empty -> .)
    CHAR            reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)
    IMAGE           reduce using rule 3 (empty -> .)
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

    newline_tab                    shift and go to state 213
    empty                          shift and go to state 173

state 203

    (43) block -> TAB newline_tab statement moreStatements .

    TAB             reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    DEF             reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 43 (block -> TAB newline_tab statement moreStatements .)


state 204

    (54) condition -> IF expression . COLON NEWLINE block
    (55) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 214


state 205

    (47) newline_tab -> NEWLINE TAB newline_tab .

    RETURN          reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    ID              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    IF              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    WHILE           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    DO              reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    BOOL            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    INT             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    FLOAT           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    CHAR            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    STRING          reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    IMAGE           reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    TAB             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    DEF             reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    $end            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)
    ELSE            reduce using rule 47 (newline_tab -> NEWLINE TAB newline_tab .)


state 206

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 160
    block                          shift and go to state 215

state 207

    (36) parameterList -> COMMA tipo ID f_addToParam . parameterList
    (35) parameterList -> . empty
    (36) parameterList -> . COMMA tipo ID f_addToParam parameterList
    (3) empty -> .

    COMMA           shift and go to state 165
    RPAREN          reduce using rule 3 (empty -> .)

    parameterList                  shift and go to state 216
    empty                          shift and go to state 164

state 208

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 160
    block                          shift and go to state 217

state 209

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE . block functions
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)

    empty                          shift and go to state 160
    block                          shift and go to state 218

state 210

    (57) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

    TAB             shift and go to state 162
    WHILE           reduce using rule 3 (empty -> .)

    block                          shift and go to state 219
    empty                          shift and go to state 160

state 211

    (53) statement -> RETURN expression NEWLINE .

    TAB             reduce using rule 53 (statement -> RETURN expression NEWLINE .)
    DEF             reduce using rule 53 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 53 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 53 (statement -> RETURN expression NEWLINE .)
    ELSE            reduce using rule 53 (statement -> RETURN expression NEWLINE .)


state 212

    (56) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 220


state 213

    (45) moreStatements -> TAB newline_tab . statement moreStatements
    (48) statement -> . vars
    (49) statement -> . assign
    (50) statement -> . condition
    (51) statement -> . cycle
    (52) statement -> . funct NEWLINE
    (53) statement -> . RETURN expression NEWLINE
    (16) vars -> . tipo idList NEWLINE vars
    (17) vars -> . empty
    (38) assign -> . ID f_checkID EQUAL expression NEWLINE f_generateEqual assign
    (39) assign -> . empty
    (54) condition -> . IF expression COLON NEWLINE block
    (55) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (56) cycle -> . WHILE expression COLON NEWLINE block
    (57) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN
    (21) tipo -> . BOOL f_saveType
    (22) tipo -> . INT f_saveType
    (23) tipo -> . FLOAT f_saveType
    (24) tipo -> . CHAR f_saveType
    (25) tipo -> . STRING f_saveType
    (26) tipo -> . IMAGE f_saveType
    (3) empty -> .

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 181
    ID              shift and go to state 188
    IF              shift and go to state 190
    WHILE           shift and go to state 184
    DO              shift and go to state 180
    BOOL            shift and go to state 17
    INT             shift and go to state 15
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    STRING          shift and go to state 18
    IMAGE           shift and go to state 16
    TAB             reduce using rule 3 (empty -> .)
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! WHILE           [ reduce using rule 3 (empty -> .) ]

    tipo                           shift and go to state 14
    vars                           shift and go to state 182
    funct                          shift and go to state 183
    empty                          shift and go to state 186
    statement                      shift and go to state 221
    cycle                          shift and go to state 185
    assign                         shift and go to state 191
    condition                      shift and go to state 189

state 214

    (54) condition -> IF expression COLON . NEWLINE block
    (55) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 222


state 215

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 223
    empty                          shift and go to state 44

state 216

    (36) parameterList -> COMMA tipo ID f_addToParam parameterList .

    RPAREN          reduce using rule 36 (parameterList -> COMMA tipo ID f_addToParam parameterList .)


state 217

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 224
    empty                          shift and go to state 44

state 218

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block . functions
    (27) functions -> . DEF tipo ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN f_saveModule LPAREN RPAREN COLON NEWLINE block functions
    (32) functions -> . DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions
    (33) functions -> . empty
    (3) empty -> .

    DEF             shift and go to state 45
    $end            reduce using rule 3 (empty -> .)

    functions                      shift and go to state 225
    empty                          shift and go to state 44

state 219

    (57) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 226


state 220

    (56) cycle -> WHILE expression COLON NEWLINE . block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 227
    empty                          shift and go to state 160

state 221

    (45) moreStatements -> TAB newline_tab statement . moreStatements
    (44) moreStatements -> . empty
    (45) moreStatements -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 202
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    empty                          shift and go to state 201
    moreStatements                 shift and go to state 228

state 222

    (54) condition -> IF expression COLON NEWLINE . block
    (55) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 229
    empty                          shift and go to state 160

state 223

    (28) functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 28 (functions -> DEF tipo ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 224

    (32) functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 32 (functions -> DEF VOID MAIN f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 225

    (30) functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 30 (functions -> DEF VOID ID f_saveModule LPAREN tipo ID f_addToParam parameterList RPAREN COLON NEWLINE block functions .)


state 226

    (57) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (62) expression -> . exp
    (63) expression -> . exp compareToken exp f_generateComparation
    (71) exp -> . term moreTerms
    (75) term -> . factor moreFactors
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . cvar
    (82) factor -> . funct
    (83) cvar -> . ID f_isID
    (84) cvar -> . C_BOOL f_isConst
    (85) cvar -> . C_INT f_isConst
    (86) cvar -> . C_FLOAT f_isConst
    (87) cvar -> . C_CHAR f_isConst
    (88) cvar -> . C_STRING f_isConst
    (58) funct -> . ID LPAREN RPAREN
    (59) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 74
    ID              shift and go to state 76
    C_BOOL          shift and go to state 72
    C_INT           shift and go to state 75
    C_FLOAT         shift and go to state 70
    C_CHAR          shift and go to state 79
    C_STRING        shift and go to state 77

    term                           shift and go to state 78
    funct                          shift and go to state 71
    cvar                           shift and go to state 69
    exp                            shift and go to state 80
    factor                         shift and go to state 73
    expression                     shift and go to state 230

state 227

    (56) cycle -> WHILE expression COLON NEWLINE block .

    TAB             reduce using rule 56 (cycle -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 56 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 56 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 56 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 56 (cycle -> WHILE expression COLON NEWLINE block .)


state 228

    (45) moreStatements -> TAB newline_tab statement moreStatements .

    TAB             reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    DEF             reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    $end            reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    WHILE           reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)
    ELSE            reduce using rule 45 (moreStatements -> TAB newline_tab statement moreStatements .)


state 229

    (54) condition -> IF expression COLON NEWLINE block .
    (55) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 54 (condition -> IF expression COLON NEWLINE block .)
    DEF             reduce using rule 54 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 54 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 54 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 231

  ! ELSE            [ reduce using rule 54 (condition -> IF expression COLON NEWLINE block .) ]


state 230

    (57) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 232


state 231

    (55) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 233


state 232

    (57) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    TAB             reduce using rule 57 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    DEF             reduce using rule 57 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 57 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 57 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 57 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 233

    (55) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 234


state 234

    (55) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (42) block -> . empty
    (43) block -> . TAB newline_tab statement moreStatements
    (3) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 162
    DEF             reduce using rule 3 (empty -> .)
    $end            reduce using rule 3 (empty -> .)
    WHILE           reduce using rule 3 (empty -> .)
    ELSE            reduce using rule 3 (empty -> .)

  ! TAB             [ reduce using rule 3 (empty -> .) ]

    block                          shift and go to state 235
    empty                          shift and go to state 160

state 235

    (55) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    TAB             reduce using rule 55 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    DEF             reduce using rule 55 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 55 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 55 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 55 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 171 resolved as shift
WARNING: shift/reduce conflict for TAB in state 187 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for TAB in state 220 resolved as shift
WARNING: shift/reduce conflict for TAB in state 221 resolved as shift
WARNING: shift/reduce conflict for TAB in state 222 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 229 resolved as shift
WARNING: shift/reduce conflict for TAB in state 234 resolved as shift
WARNING: reduce/reduce conflict in state 186 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 186
