Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PERIOD
    AND
    NOT
    OR

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID NEWLINE hardware vars assign functions
Rule 2     empty -> <empty>
Rule 3     hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
Rule 4     camDeclaration -> empty
Rule 5     camDeclaration -> CAM WEBCAM COLON ID NEWLINE
Rule 6     camDeclaration -> CAM PICAM COLON ID NEWLINE
Rule 7     inputsDeclaration -> empty
Rule 8     inputsDeclaration -> INPUT pinList NEWLINE
Rule 9     outputsDeclaration -> empty
Rule 10    outputsDeclaration -> OUTPUT pinList NEWLINE
Rule 11    pwmDeclaration -> empty
Rule 12    pwmDeclaration -> PWM pinList NEWLINE
Rule 13    pinList -> C_INT COLON ID
Rule 14    pinList -> C_INT COLON ID COMMA pinList
Rule 15    vars -> tipo idList NEWLINE vars
Rule 16    vars -> tipo assign vars
Rule 17    vars -> empty
Rule 18    idList -> ID
Rule 19    idList -> ID COMMA idList
Rule 20    tipo -> BOOL
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    tipo -> STRING
Rule 25    tipo -> IMAGE
Rule 26    functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
Rule 27    functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 28    functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
Rule 29    functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 30    functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
Rule 31    functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
Rule 32    functions -> empty
Rule 33    parameterList -> empty
Rule 34    parameterList -> COMMA tipo ID parameterList
Rule 35    assign -> idList EQUAL expression NEWLINE assign
Rule 36    assign -> empty
Rule 37    block -> empty
Rule 38    block -> TAB statement moreStatements
Rule 39    moreStatements -> empty
Rule 40    moreStatements -> TAB statement moreStatements
Rule 41    statement -> vars
Rule 42    statement -> assign
Rule 43    statement -> condition
Rule 44    statement -> cycle
Rule 45    statement -> funct NEWLINE
Rule 46    statement -> RETURN expression NEWLINE
Rule 47    condition -> IF expression COLON NEWLINE block
Rule 48    condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block
Rule 49    cycle -> WHILE expression COLON NEWLINE block
Rule 50    cycle -> DO COLON NEWLINE block WHILE expression NEWLINE
Rule 51    funct -> ID LPAREN RPAREN
Rule 52    funct -> ID LPAREN expression expressionList RPAREN
Rule 53    expressionList -> empty
Rule 54    expressionList -> COMMA expression expressionList
Rule 55    expression -> exp
Rule 56    expression -> exp compareToken exp
Rule 57    compareToken -> GREATER_THAN
Rule 58    compareToken -> LESS_THAN
Rule 59    compareToken -> LESS_EQUAL_THAN
Rule 60    compareToken -> GREATER_EQUAL_THAN
Rule 61    compareToken -> NOT_EQUAL_THAN
Rule 62    compareToken -> SAME_AS
Rule 63    exp -> term moreTerms
Rule 64    moreTerms -> empty
Rule 65    moreTerms -> PLUS term moreTerms
Rule 66    moreTerms -> MINUS term moreTerms
Rule 67    term -> factor moreFactors
Rule 68    moreFactors -> empty
Rule 69    moreFactors -> DIVIDE factor moreFactors
Rule 70    moreFactors -> TIMES factor moreFactors
Rule 71    moreFactors -> MOD factor moreFactors
Rule 72    factor -> LPAREN expression RPAREN
Rule 73    factor -> cvar
Rule 74    factor -> funct
Rule 75    cvar -> ID
Rule 76    cvar -> C_BOOL
Rule 77    cvar -> C_INT
Rule 78    cvar -> C_FLOAT
Rule 79    cvar -> C_CHAR
Rule 80    cvar -> C_STRING

Terminals, with rules where they appear

AND                  : 
BOOL                 : 20
CAM                  : 5 6
CHAR                 : 23
COLON                : 5 6 13 14 26 27 28 29 30 31 47 48 48 49 50
COMMA                : 14 19 34 54
C_BOOL               : 76
C_CHAR               : 79
C_FLOAT              : 78
C_INT                : 13 14 77
C_STRING             : 80
DEF                  : 26 27 28 29 30 31
DIVIDE               : 69
DO                   : 50
ELSE                 : 48
EQUAL                : 35
FLOAT                : 22
GREATER_EQUAL_THAN   : 60
GREATER_THAN         : 57
ID                   : 1 5 6 13 14 18 19 26 27 27 28 29 29 31 34 51 52 75
IF                   : 47 48
IMAGE                : 25
INPUT                : 8
INT                  : 21
LESS_EQUAL_THAN      : 59
LESS_THAN            : 58
LPAREN               : 26 27 28 29 30 31 51 52 72
MAIN                 : 30 31
MINUS                : 66
MOD                  : 71
NEWLINE              : 1 5 6 8 10 12 15 26 27 28 29 30 31 35 45 46 47 48 48 49 50 50
NOT                  : 
NOT_EQUAL_THAN       : 61
OR                   : 
OUTPUT               : 10
PERIOD               : 
PICAM                : 6
PLUS                 : 65
PROGRAM              : 1
PWM                  : 12
RETURN               : 46
RPAREN               : 26 27 28 29 30 31 51 52 72
SAME_AS              : 62
STRING               : 24
TAB                  : 38 40
TIMES                : 70
VOID                 : 28 29 30 31
WEBCAM               : 5
WHILE                : 49 50
error                : 

Nonterminals, with rules where they appear

assign               : 1 16 35 42
block                : 26 27 28 29 30 31 47 48 48 49 50
camDeclaration       : 3
compareToken         : 56
condition            : 43
cvar                 : 73
cycle                : 44
empty                : 4 7 9 11 17 32 33 36 37 39 53 64 68
exp                  : 55 56 56
expression           : 35 46 47 48 49 50 52 54 72
expressionList       : 52 54
factor               : 67 69 70 71
funct                : 45 74
functions            : 1 26 27 28 29 30 31
hardware             : 1
idList               : 15 19 35
inputsDeclaration    : 3
moreFactors          : 67 69 70 71
moreStatements       : 38 40
moreTerms            : 63 65 66
outputsDeclaration   : 3
parameterList        : 27 29 31 34
pinList              : 8 10 12 14
program              : 0
pwmDeclaration       : 3
statement            : 38 40
term                 : 63 65 66
tipo                 : 15 16 26 27 27 29 31 34
vars                 : 1 15 16 41

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID NEWLINE hardware vars assign functions

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID NEWLINE hardware vars assign functions

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . NEWLINE hardware vars assign functions

    NEWLINE         shift and go to state 4


state 4

    (1) program -> PROGRAM ID NEWLINE . hardware vars assign functions
    (3) hardware -> . camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration
    (4) camDeclaration -> . empty
    (5) camDeclaration -> . CAM WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> . CAM PICAM COLON ID NEWLINE
    (2) empty -> .

    CAM             shift and go to state 6
    INPUT           reduce using rule 2 (empty -> .)
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    camDeclaration                 shift and go to state 7
    hardware                       shift and go to state 5
    empty                          shift and go to state 8

state 5

    (1) program -> PROGRAM ID NEWLINE hardware . vars assign functions
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . tipo assign vars
    (17) vars -> . empty
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 12
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 6

    (5) camDeclaration -> CAM . WEBCAM COLON ID NEWLINE
    (6) camDeclaration -> CAM . PICAM COLON ID NEWLINE

    WEBCAM          shift and go to state 18
    PICAM           shift and go to state 19


state 7

    (3) hardware -> camDeclaration . inputsDeclaration outputsDeclaration pwmDeclaration
    (7) inputsDeclaration -> . empty
    (8) inputsDeclaration -> . INPUT pinList NEWLINE
    (2) empty -> .

    INPUT           shift and go to state 21
    OUTPUT          reduce using rule 2 (empty -> .)
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    inputsDeclaration              shift and go to state 20
    empty                          shift and go to state 22

state 8

    (4) camDeclaration -> empty .

    INPUT           reduce using rule 4 (camDeclaration -> empty .)
    OUTPUT          reduce using rule 4 (camDeclaration -> empty .)
    PWM             reduce using rule 4 (camDeclaration -> empty .)
    BOOL            reduce using rule 4 (camDeclaration -> empty .)
    INT             reduce using rule 4 (camDeclaration -> empty .)
    FLOAT           reduce using rule 4 (camDeclaration -> empty .)
    CHAR            reduce using rule 4 (camDeclaration -> empty .)
    STRING          reduce using rule 4 (camDeclaration -> empty .)
    IMAGE           reduce using rule 4 (camDeclaration -> empty .)
    ID              reduce using rule 4 (camDeclaration -> empty .)
    DEF             reduce using rule 4 (camDeclaration -> empty .)
    $end            reduce using rule 4 (camDeclaration -> empty .)


state 9

    (23) tipo -> CHAR .

    ID              reduce using rule 23 (tipo -> CHAR .)
    BOOL            reduce using rule 23 (tipo -> CHAR .)
    INT             reduce using rule 23 (tipo -> CHAR .)
    FLOAT           reduce using rule 23 (tipo -> CHAR .)
    CHAR            reduce using rule 23 (tipo -> CHAR .)
    STRING          reduce using rule 23 (tipo -> CHAR .)
    IMAGE           reduce using rule 23 (tipo -> CHAR .)
    DEF             reduce using rule 23 (tipo -> CHAR .)
    $end            reduce using rule 23 (tipo -> CHAR .)
    TAB             reduce using rule 23 (tipo -> CHAR .)
    WHILE           reduce using rule 23 (tipo -> CHAR .)
    ELSE            reduce using rule 23 (tipo -> CHAR .)


state 10

    (22) tipo -> FLOAT .

    ID              reduce using rule 22 (tipo -> FLOAT .)
    BOOL            reduce using rule 22 (tipo -> FLOAT .)
    INT             reduce using rule 22 (tipo -> FLOAT .)
    FLOAT           reduce using rule 22 (tipo -> FLOAT .)
    CHAR            reduce using rule 22 (tipo -> FLOAT .)
    STRING          reduce using rule 22 (tipo -> FLOAT .)
    IMAGE           reduce using rule 22 (tipo -> FLOAT .)
    DEF             reduce using rule 22 (tipo -> FLOAT .)
    $end            reduce using rule 22 (tipo -> FLOAT .)
    TAB             reduce using rule 22 (tipo -> FLOAT .)
    WHILE           reduce using rule 22 (tipo -> FLOAT .)
    ELSE            reduce using rule 22 (tipo -> FLOAT .)


state 11

    (15) vars -> tipo . idList NEWLINE vars
    (16) vars -> tipo . assign vars
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList
    (35) assign -> . idList EQUAL expression NEWLINE assign
    (36) assign -> . empty
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 25
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 23
    assign                         shift and go to state 24
    empty                          shift and go to state 26

state 12

    (1) program -> PROGRAM ID NEWLINE hardware vars . assign functions
    (35) assign -> . idList EQUAL expression NEWLINE assign
    (36) assign -> . empty
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList
    (2) empty -> .

    ID              shift and go to state 25
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    idList                         shift and go to state 27
    assign                         shift and go to state 28
    empty                          shift and go to state 26

state 13

    (21) tipo -> INT .

    ID              reduce using rule 21 (tipo -> INT .)
    BOOL            reduce using rule 21 (tipo -> INT .)
    INT             reduce using rule 21 (tipo -> INT .)
    FLOAT           reduce using rule 21 (tipo -> INT .)
    CHAR            reduce using rule 21 (tipo -> INT .)
    STRING          reduce using rule 21 (tipo -> INT .)
    IMAGE           reduce using rule 21 (tipo -> INT .)
    DEF             reduce using rule 21 (tipo -> INT .)
    $end            reduce using rule 21 (tipo -> INT .)
    TAB             reduce using rule 21 (tipo -> INT .)
    WHILE           reduce using rule 21 (tipo -> INT .)
    ELSE            reduce using rule 21 (tipo -> INT .)


state 14

    (25) tipo -> IMAGE .

    ID              reduce using rule 25 (tipo -> IMAGE .)
    BOOL            reduce using rule 25 (tipo -> IMAGE .)
    INT             reduce using rule 25 (tipo -> IMAGE .)
    FLOAT           reduce using rule 25 (tipo -> IMAGE .)
    CHAR            reduce using rule 25 (tipo -> IMAGE .)
    STRING          reduce using rule 25 (tipo -> IMAGE .)
    IMAGE           reduce using rule 25 (tipo -> IMAGE .)
    DEF             reduce using rule 25 (tipo -> IMAGE .)
    $end            reduce using rule 25 (tipo -> IMAGE .)
    TAB             reduce using rule 25 (tipo -> IMAGE .)
    WHILE           reduce using rule 25 (tipo -> IMAGE .)
    ELSE            reduce using rule 25 (tipo -> IMAGE .)


state 15

    (20) tipo -> BOOL .

    ID              reduce using rule 20 (tipo -> BOOL .)
    BOOL            reduce using rule 20 (tipo -> BOOL .)
    INT             reduce using rule 20 (tipo -> BOOL .)
    FLOAT           reduce using rule 20 (tipo -> BOOL .)
    CHAR            reduce using rule 20 (tipo -> BOOL .)
    STRING          reduce using rule 20 (tipo -> BOOL .)
    IMAGE           reduce using rule 20 (tipo -> BOOL .)
    DEF             reduce using rule 20 (tipo -> BOOL .)
    $end            reduce using rule 20 (tipo -> BOOL .)
    TAB             reduce using rule 20 (tipo -> BOOL .)
    WHILE           reduce using rule 20 (tipo -> BOOL .)
    ELSE            reduce using rule 20 (tipo -> BOOL .)


state 16

    (24) tipo -> STRING .

    ID              reduce using rule 24 (tipo -> STRING .)
    BOOL            reduce using rule 24 (tipo -> STRING .)
    INT             reduce using rule 24 (tipo -> STRING .)
    FLOAT           reduce using rule 24 (tipo -> STRING .)
    CHAR            reduce using rule 24 (tipo -> STRING .)
    STRING          reduce using rule 24 (tipo -> STRING .)
    IMAGE           reduce using rule 24 (tipo -> STRING .)
    DEF             reduce using rule 24 (tipo -> STRING .)
    $end            reduce using rule 24 (tipo -> STRING .)
    TAB             reduce using rule 24 (tipo -> STRING .)
    WHILE           reduce using rule 24 (tipo -> STRING .)
    ELSE            reduce using rule 24 (tipo -> STRING .)


state 17

    (17) vars -> empty .

    ID              reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)


state 18

    (5) camDeclaration -> CAM WEBCAM . COLON ID NEWLINE

    COLON           shift and go to state 29


state 19

    (6) camDeclaration -> CAM PICAM . COLON ID NEWLINE

    COLON           shift and go to state 30


state 20

    (3) hardware -> camDeclaration inputsDeclaration . outputsDeclaration pwmDeclaration
    (9) outputsDeclaration -> . empty
    (10) outputsDeclaration -> . OUTPUT pinList NEWLINE
    (2) empty -> .

    OUTPUT          shift and go to state 32
    PWM             reduce using rule 2 (empty -> .)
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    outputsDeclaration             shift and go to state 31
    empty                          shift and go to state 33

state 21

    (8) inputsDeclaration -> INPUT . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 35

    pinList                        shift and go to state 34

state 22

    (7) inputsDeclaration -> empty .

    OUTPUT          reduce using rule 7 (inputsDeclaration -> empty .)
    PWM             reduce using rule 7 (inputsDeclaration -> empty .)
    BOOL            reduce using rule 7 (inputsDeclaration -> empty .)
    INT             reduce using rule 7 (inputsDeclaration -> empty .)
    FLOAT           reduce using rule 7 (inputsDeclaration -> empty .)
    CHAR            reduce using rule 7 (inputsDeclaration -> empty .)
    STRING          reduce using rule 7 (inputsDeclaration -> empty .)
    IMAGE           reduce using rule 7 (inputsDeclaration -> empty .)
    ID              reduce using rule 7 (inputsDeclaration -> empty .)
    DEF             reduce using rule 7 (inputsDeclaration -> empty .)
    $end            reduce using rule 7 (inputsDeclaration -> empty .)


state 23

    (15) vars -> tipo idList . NEWLINE vars
    (35) assign -> idList . EQUAL expression NEWLINE assign

    NEWLINE         shift and go to state 36
    EQUAL           shift and go to state 37


state 24

    (16) vars -> tipo assign . vars
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . tipo assign vars
    (17) vars -> . empty
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 38
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 25

    (18) idList -> ID .
    (19) idList -> ID . COMMA idList

    NEWLINE         reduce using rule 18 (idList -> ID .)
    EQUAL           reduce using rule 18 (idList -> ID .)
    COMMA           shift and go to state 39


state 26

    (36) assign -> empty .

    BOOL            reduce using rule 36 (assign -> empty .)
    INT             reduce using rule 36 (assign -> empty .)
    FLOAT           reduce using rule 36 (assign -> empty .)
    CHAR            reduce using rule 36 (assign -> empty .)
    STRING          reduce using rule 36 (assign -> empty .)
    IMAGE           reduce using rule 36 (assign -> empty .)
    ID              reduce using rule 36 (assign -> empty .)
    DEF             reduce using rule 36 (assign -> empty .)
    $end            reduce using rule 36 (assign -> empty .)
    TAB             reduce using rule 36 (assign -> empty .)
    WHILE           reduce using rule 36 (assign -> empty .)
    ELSE            reduce using rule 36 (assign -> empty .)


state 27

    (35) assign -> idList . EQUAL expression NEWLINE assign

    EQUAL           shift and go to state 37


state 28

    (1) program -> PROGRAM ID NEWLINE hardware vars assign . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 40
    empty                          shift and go to state 41

state 29

    (5) camDeclaration -> CAM WEBCAM COLON . ID NEWLINE

    ID              shift and go to state 43


state 30

    (6) camDeclaration -> CAM PICAM COLON . ID NEWLINE

    ID              shift and go to state 44


state 31

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration . pwmDeclaration
    (11) pwmDeclaration -> . empty
    (12) pwmDeclaration -> . PWM pinList NEWLINE
    (2) empty -> .

    PWM             shift and go to state 46
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    pwmDeclaration                 shift and go to state 45
    empty                          shift and go to state 47

state 32

    (10) outputsDeclaration -> OUTPUT . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 35

    pinList                        shift and go to state 48

state 33

    (9) outputsDeclaration -> empty .

    PWM             reduce using rule 9 (outputsDeclaration -> empty .)
    BOOL            reduce using rule 9 (outputsDeclaration -> empty .)
    INT             reduce using rule 9 (outputsDeclaration -> empty .)
    FLOAT           reduce using rule 9 (outputsDeclaration -> empty .)
    CHAR            reduce using rule 9 (outputsDeclaration -> empty .)
    STRING          reduce using rule 9 (outputsDeclaration -> empty .)
    IMAGE           reduce using rule 9 (outputsDeclaration -> empty .)
    ID              reduce using rule 9 (outputsDeclaration -> empty .)
    DEF             reduce using rule 9 (outputsDeclaration -> empty .)
    $end            reduce using rule 9 (outputsDeclaration -> empty .)


state 34

    (8) inputsDeclaration -> INPUT pinList . NEWLINE

    NEWLINE         shift and go to state 49


state 35

    (13) pinList -> C_INT . COLON ID
    (14) pinList -> C_INT . COLON ID COMMA pinList

    COLON           shift and go to state 50


state 36

    (15) vars -> tipo idList NEWLINE . vars
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . tipo assign vars
    (17) vars -> . empty
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE
    (2) empty -> .

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    ID              reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

    vars                           shift and go to state 51
    empty                          shift and go to state 17
    tipo                           shift and go to state 11

state 37

    (35) assign -> idList EQUAL . expression NEWLINE assign
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 64

state 38

    (16) vars -> tipo assign vars .

    ID              reduce using rule 16 (vars -> tipo assign vars .)
    DEF             reduce using rule 16 (vars -> tipo assign vars .)
    $end            reduce using rule 16 (vars -> tipo assign vars .)
    TAB             reduce using rule 16 (vars -> tipo assign vars .)
    WHILE           reduce using rule 16 (vars -> tipo assign vars .)
    ELSE            reduce using rule 16 (vars -> tipo assign vars .)


state 39

    (19) idList -> ID COMMA . idList
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList

    ID              shift and go to state 25

    idList                         shift and go to state 65

state 40

    (1) program -> PROGRAM ID NEWLINE hardware vars assign functions .

    $end            reduce using rule 1 (program -> PROGRAM ID NEWLINE hardware vars assign functions .)


state 41

    (32) functions -> empty .

    $end            reduce using rule 32 (functions -> empty .)


state 42

    (26) functions -> DEF . tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF . tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> DEF . VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF . VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> DEF . VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF . VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE

    VOID            shift and go to state 67
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 66

state 43

    (5) camDeclaration -> CAM WEBCAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 68


state 44

    (6) camDeclaration -> CAM PICAM COLON ID . NEWLINE

    NEWLINE         shift and go to state 69


state 45

    (3) hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .

    BOOL            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    INT             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    FLOAT           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    CHAR            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    STRING          reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    IMAGE           reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    ID              reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    DEF             reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)
    $end            reduce using rule 3 (hardware -> camDeclaration inputsDeclaration outputsDeclaration pwmDeclaration .)


state 46

    (12) pwmDeclaration -> PWM . pinList NEWLINE
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 35

    pinList                        shift and go to state 70

state 47

    (11) pwmDeclaration -> empty .

    BOOL            reduce using rule 11 (pwmDeclaration -> empty .)
    INT             reduce using rule 11 (pwmDeclaration -> empty .)
    FLOAT           reduce using rule 11 (pwmDeclaration -> empty .)
    CHAR            reduce using rule 11 (pwmDeclaration -> empty .)
    STRING          reduce using rule 11 (pwmDeclaration -> empty .)
    IMAGE           reduce using rule 11 (pwmDeclaration -> empty .)
    ID              reduce using rule 11 (pwmDeclaration -> empty .)
    DEF             reduce using rule 11 (pwmDeclaration -> empty .)
    $end            reduce using rule 11 (pwmDeclaration -> empty .)


state 48

    (10) outputsDeclaration -> OUTPUT pinList . NEWLINE

    NEWLINE         shift and go to state 71


state 49

    (8) inputsDeclaration -> INPUT pinList NEWLINE .

    OUTPUT          reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    PWM             reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    BOOL            reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    INT             reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    FLOAT           reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    CHAR            reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    STRING          reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    IMAGE           reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    ID              reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    DEF             reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)
    $end            reduce using rule 8 (inputsDeclaration -> INPUT pinList NEWLINE .)


state 50

    (13) pinList -> C_INT COLON . ID
    (14) pinList -> C_INT COLON . ID COMMA pinList

    ID              shift and go to state 72


state 51

    (15) vars -> tipo idList NEWLINE vars .

    ID              reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    DEF             reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    $end            reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    TAB             reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    WHILE           reduce using rule 15 (vars -> tipo idList NEWLINE vars .)
    ELSE            reduce using rule 15 (vars -> tipo idList NEWLINE vars .)


state 52

    (73) factor -> cvar .

    DIVIDE          reduce using rule 73 (factor -> cvar .)
    TIMES           reduce using rule 73 (factor -> cvar .)
    MOD             reduce using rule 73 (factor -> cvar .)
    PLUS            reduce using rule 73 (factor -> cvar .)
    MINUS           reduce using rule 73 (factor -> cvar .)
    GREATER_THAN    reduce using rule 73 (factor -> cvar .)
    LESS_THAN       reduce using rule 73 (factor -> cvar .)
    LESS_EQUAL_THAN reduce using rule 73 (factor -> cvar .)
    GREATER_EQUAL_THAN reduce using rule 73 (factor -> cvar .)
    NOT_EQUAL_THAN  reduce using rule 73 (factor -> cvar .)
    SAME_AS         reduce using rule 73 (factor -> cvar .)
    NEWLINE         reduce using rule 73 (factor -> cvar .)
    RPAREN          reduce using rule 73 (factor -> cvar .)
    COMMA           reduce using rule 73 (factor -> cvar .)
    COLON           reduce using rule 73 (factor -> cvar .)


state 53

    (74) factor -> funct .

    DIVIDE          reduce using rule 74 (factor -> funct .)
    TIMES           reduce using rule 74 (factor -> funct .)
    MOD             reduce using rule 74 (factor -> funct .)
    PLUS            reduce using rule 74 (factor -> funct .)
    MINUS           reduce using rule 74 (factor -> funct .)
    GREATER_THAN    reduce using rule 74 (factor -> funct .)
    LESS_THAN       reduce using rule 74 (factor -> funct .)
    LESS_EQUAL_THAN reduce using rule 74 (factor -> funct .)
    GREATER_EQUAL_THAN reduce using rule 74 (factor -> funct .)
    NOT_EQUAL_THAN  reduce using rule 74 (factor -> funct .)
    SAME_AS         reduce using rule 74 (factor -> funct .)
    NEWLINE         reduce using rule 74 (factor -> funct .)
    RPAREN          reduce using rule 74 (factor -> funct .)
    COMMA           reduce using rule 74 (factor -> funct .)
    COLON           reduce using rule 74 (factor -> funct .)


state 54

    (78) cvar -> C_FLOAT .

    DIVIDE          reduce using rule 78 (cvar -> C_FLOAT .)
    TIMES           reduce using rule 78 (cvar -> C_FLOAT .)
    MOD             reduce using rule 78 (cvar -> C_FLOAT .)
    PLUS            reduce using rule 78 (cvar -> C_FLOAT .)
    MINUS           reduce using rule 78 (cvar -> C_FLOAT .)
    GREATER_THAN    reduce using rule 78 (cvar -> C_FLOAT .)
    LESS_THAN       reduce using rule 78 (cvar -> C_FLOAT .)
    LESS_EQUAL_THAN reduce using rule 78 (cvar -> C_FLOAT .)
    GREATER_EQUAL_THAN reduce using rule 78 (cvar -> C_FLOAT .)
    NOT_EQUAL_THAN  reduce using rule 78 (cvar -> C_FLOAT .)
    SAME_AS         reduce using rule 78 (cvar -> C_FLOAT .)
    NEWLINE         reduce using rule 78 (cvar -> C_FLOAT .)
    RPAREN          reduce using rule 78 (cvar -> C_FLOAT .)
    COMMA           reduce using rule 78 (cvar -> C_FLOAT .)
    COLON           reduce using rule 78 (cvar -> C_FLOAT .)


state 55

    (76) cvar -> C_BOOL .

    DIVIDE          reduce using rule 76 (cvar -> C_BOOL .)
    TIMES           reduce using rule 76 (cvar -> C_BOOL .)
    MOD             reduce using rule 76 (cvar -> C_BOOL .)
    PLUS            reduce using rule 76 (cvar -> C_BOOL .)
    MINUS           reduce using rule 76 (cvar -> C_BOOL .)
    GREATER_THAN    reduce using rule 76 (cvar -> C_BOOL .)
    LESS_THAN       reduce using rule 76 (cvar -> C_BOOL .)
    LESS_EQUAL_THAN reduce using rule 76 (cvar -> C_BOOL .)
    GREATER_EQUAL_THAN reduce using rule 76 (cvar -> C_BOOL .)
    NOT_EQUAL_THAN  reduce using rule 76 (cvar -> C_BOOL .)
    SAME_AS         reduce using rule 76 (cvar -> C_BOOL .)
    NEWLINE         reduce using rule 76 (cvar -> C_BOOL .)
    RPAREN          reduce using rule 76 (cvar -> C_BOOL .)
    COMMA           reduce using rule 76 (cvar -> C_BOOL .)
    COLON           reduce using rule 76 (cvar -> C_BOOL .)


state 56

    (67) term -> factor . moreFactors
    (68) moreFactors -> . empty
    (69) moreFactors -> . DIVIDE factor moreFactors
    (70) moreFactors -> . TIMES factor moreFactors
    (71) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 74
    TIMES           shift and go to state 75
    MOD             shift and go to state 77
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 73
    empty                          shift and go to state 76

state 57

    (72) factor -> LPAREN . expression RPAREN
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 78

state 58

    (77) cvar -> C_INT .

    DIVIDE          reduce using rule 77 (cvar -> C_INT .)
    TIMES           reduce using rule 77 (cvar -> C_INT .)
    MOD             reduce using rule 77 (cvar -> C_INT .)
    PLUS            reduce using rule 77 (cvar -> C_INT .)
    MINUS           reduce using rule 77 (cvar -> C_INT .)
    GREATER_THAN    reduce using rule 77 (cvar -> C_INT .)
    LESS_THAN       reduce using rule 77 (cvar -> C_INT .)
    LESS_EQUAL_THAN reduce using rule 77 (cvar -> C_INT .)
    GREATER_EQUAL_THAN reduce using rule 77 (cvar -> C_INT .)
    NOT_EQUAL_THAN  reduce using rule 77 (cvar -> C_INT .)
    SAME_AS         reduce using rule 77 (cvar -> C_INT .)
    NEWLINE         reduce using rule 77 (cvar -> C_INT .)
    RPAREN          reduce using rule 77 (cvar -> C_INT .)
    COMMA           reduce using rule 77 (cvar -> C_INT .)
    COLON           reduce using rule 77 (cvar -> C_INT .)


state 59

    (75) cvar -> ID .
    (51) funct -> ID . LPAREN RPAREN
    (52) funct -> ID . LPAREN expression expressionList RPAREN

    DIVIDE          reduce using rule 75 (cvar -> ID .)
    TIMES           reduce using rule 75 (cvar -> ID .)
    MOD             reduce using rule 75 (cvar -> ID .)
    PLUS            reduce using rule 75 (cvar -> ID .)
    MINUS           reduce using rule 75 (cvar -> ID .)
    GREATER_THAN    reduce using rule 75 (cvar -> ID .)
    LESS_THAN       reduce using rule 75 (cvar -> ID .)
    LESS_EQUAL_THAN reduce using rule 75 (cvar -> ID .)
    GREATER_EQUAL_THAN reduce using rule 75 (cvar -> ID .)
    NOT_EQUAL_THAN  reduce using rule 75 (cvar -> ID .)
    SAME_AS         reduce using rule 75 (cvar -> ID .)
    NEWLINE         reduce using rule 75 (cvar -> ID .)
    RPAREN          reduce using rule 75 (cvar -> ID .)
    COMMA           reduce using rule 75 (cvar -> ID .)
    COLON           reduce using rule 75 (cvar -> ID .)
    LPAREN          shift and go to state 79


state 60

    (80) cvar -> C_STRING .

    DIVIDE          reduce using rule 80 (cvar -> C_STRING .)
    TIMES           reduce using rule 80 (cvar -> C_STRING .)
    MOD             reduce using rule 80 (cvar -> C_STRING .)
    PLUS            reduce using rule 80 (cvar -> C_STRING .)
    MINUS           reduce using rule 80 (cvar -> C_STRING .)
    GREATER_THAN    reduce using rule 80 (cvar -> C_STRING .)
    LESS_THAN       reduce using rule 80 (cvar -> C_STRING .)
    LESS_EQUAL_THAN reduce using rule 80 (cvar -> C_STRING .)
    GREATER_EQUAL_THAN reduce using rule 80 (cvar -> C_STRING .)
    NOT_EQUAL_THAN  reduce using rule 80 (cvar -> C_STRING .)
    SAME_AS         reduce using rule 80 (cvar -> C_STRING .)
    NEWLINE         reduce using rule 80 (cvar -> C_STRING .)
    RPAREN          reduce using rule 80 (cvar -> C_STRING .)
    COMMA           reduce using rule 80 (cvar -> C_STRING .)
    COLON           reduce using rule 80 (cvar -> C_STRING .)


state 61

    (63) exp -> term . moreTerms
    (64) moreTerms -> . empty
    (65) moreTerms -> . PLUS term moreTerms
    (66) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 80
    empty                          shift and go to state 83

state 62

    (79) cvar -> C_CHAR .

    DIVIDE          reduce using rule 79 (cvar -> C_CHAR .)
    TIMES           reduce using rule 79 (cvar -> C_CHAR .)
    MOD             reduce using rule 79 (cvar -> C_CHAR .)
    PLUS            reduce using rule 79 (cvar -> C_CHAR .)
    MINUS           reduce using rule 79 (cvar -> C_CHAR .)
    GREATER_THAN    reduce using rule 79 (cvar -> C_CHAR .)
    LESS_THAN       reduce using rule 79 (cvar -> C_CHAR .)
    LESS_EQUAL_THAN reduce using rule 79 (cvar -> C_CHAR .)
    GREATER_EQUAL_THAN reduce using rule 79 (cvar -> C_CHAR .)
    NOT_EQUAL_THAN  reduce using rule 79 (cvar -> C_CHAR .)
    SAME_AS         reduce using rule 79 (cvar -> C_CHAR .)
    NEWLINE         reduce using rule 79 (cvar -> C_CHAR .)
    RPAREN          reduce using rule 79 (cvar -> C_CHAR .)
    COMMA           reduce using rule 79 (cvar -> C_CHAR .)
    COLON           reduce using rule 79 (cvar -> C_CHAR .)


state 63

    (55) expression -> exp .
    (56) expression -> exp . compareToken exp
    (57) compareToken -> . GREATER_THAN
    (58) compareToken -> . LESS_THAN
    (59) compareToken -> . LESS_EQUAL_THAN
    (60) compareToken -> . GREATER_EQUAL_THAN
    (61) compareToken -> . NOT_EQUAL_THAN
    (62) compareToken -> . SAME_AS

    RPAREN          reduce using rule 55 (expression -> exp .)
    NEWLINE         reduce using rule 55 (expression -> exp .)
    COLON           reduce using rule 55 (expression -> exp .)
    COMMA           reduce using rule 55 (expression -> exp .)
    GREATER_THAN    shift and go to state 89
    LESS_THAN       shift and go to state 90
    LESS_EQUAL_THAN shift and go to state 86
    GREATER_EQUAL_THAN shift and go to state 85
    NOT_EQUAL_THAN  shift and go to state 88
    SAME_AS         shift and go to state 87

    compareToken                   shift and go to state 84

state 64

    (35) assign -> idList EQUAL expression . NEWLINE assign

    NEWLINE         shift and go to state 91


state 65

    (19) idList -> ID COMMA idList .

    EQUAL           reduce using rule 19 (idList -> ID COMMA idList .)
    NEWLINE         reduce using rule 19 (idList -> ID COMMA idList .)


state 66

    (26) functions -> DEF tipo . ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo . ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 92


state 67

    (28) functions -> DEF VOID . ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID . ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> DEF VOID . MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID . MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 94
    MAIN            shift and go to state 93


state 68

    (5) camDeclaration -> CAM WEBCAM COLON ID NEWLINE .

    INPUT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    PWM             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    BOOL            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    INT             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    CHAR            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    STRING          reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    ID              reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    DEF             reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)
    $end            reduce using rule 5 (camDeclaration -> CAM WEBCAM COLON ID NEWLINE .)


state 69

    (6) camDeclaration -> CAM PICAM COLON ID NEWLINE .

    INPUT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    OUTPUT          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    PWM             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    BOOL            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    INT             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    FLOAT           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    CHAR            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    STRING          reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    IMAGE           reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    ID              reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    DEF             reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)
    $end            reduce using rule 6 (camDeclaration -> CAM PICAM COLON ID NEWLINE .)


state 70

    (12) pwmDeclaration -> PWM pinList . NEWLINE

    NEWLINE         shift and go to state 95


state 71

    (10) outputsDeclaration -> OUTPUT pinList NEWLINE .

    PWM             reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    BOOL            reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    INT             reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    FLOAT           reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    CHAR            reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    STRING          reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    IMAGE           reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    ID              reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    DEF             reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)
    $end            reduce using rule 10 (outputsDeclaration -> OUTPUT pinList NEWLINE .)


state 72

    (13) pinList -> C_INT COLON ID .
    (14) pinList -> C_INT COLON ID . COMMA pinList

    NEWLINE         reduce using rule 13 (pinList -> C_INT COLON ID .)
    COMMA           shift and go to state 96


state 73

    (67) term -> factor moreFactors .

    PLUS            reduce using rule 67 (term -> factor moreFactors .)
    MINUS           reduce using rule 67 (term -> factor moreFactors .)
    GREATER_THAN    reduce using rule 67 (term -> factor moreFactors .)
    LESS_THAN       reduce using rule 67 (term -> factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 67 (term -> factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 67 (term -> factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 67 (term -> factor moreFactors .)
    SAME_AS         reduce using rule 67 (term -> factor moreFactors .)
    NEWLINE         reduce using rule 67 (term -> factor moreFactors .)
    RPAREN          reduce using rule 67 (term -> factor moreFactors .)
    COMMA           reduce using rule 67 (term -> factor moreFactors .)
    COLON           reduce using rule 67 (term -> factor moreFactors .)


state 74

    (69) moreFactors -> DIVIDE . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    funct                          shift and go to state 53
    cvar                           shift and go to state 52
    factor                         shift and go to state 97

state 75

    (70) moreFactors -> TIMES . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    funct                          shift and go to state 53
    cvar                           shift and go to state 52
    factor                         shift and go to state 98

state 76

    (68) moreFactors -> empty .

    PLUS            reduce using rule 68 (moreFactors -> empty .)
    MINUS           reduce using rule 68 (moreFactors -> empty .)
    GREATER_THAN    reduce using rule 68 (moreFactors -> empty .)
    LESS_THAN       reduce using rule 68 (moreFactors -> empty .)
    LESS_EQUAL_THAN reduce using rule 68 (moreFactors -> empty .)
    GREATER_EQUAL_THAN reduce using rule 68 (moreFactors -> empty .)
    NOT_EQUAL_THAN  reduce using rule 68 (moreFactors -> empty .)
    SAME_AS         reduce using rule 68 (moreFactors -> empty .)
    NEWLINE         reduce using rule 68 (moreFactors -> empty .)
    RPAREN          reduce using rule 68 (moreFactors -> empty .)
    COMMA           reduce using rule 68 (moreFactors -> empty .)
    COLON           reduce using rule 68 (moreFactors -> empty .)


state 77

    (71) moreFactors -> MOD . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    funct                          shift and go to state 53
    cvar                           shift and go to state 52
    factor                         shift and go to state 99

state 78

    (72) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 100


state 79

    (51) funct -> ID LPAREN . RPAREN
    (52) funct -> ID LPAREN . expression expressionList RPAREN
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    RPAREN          shift and go to state 101
    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 102

state 80

    (63) exp -> term moreTerms .

    GREATER_THAN    reduce using rule 63 (exp -> term moreTerms .)
    LESS_THAN       reduce using rule 63 (exp -> term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 63 (exp -> term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 63 (exp -> term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 63 (exp -> term moreTerms .)
    SAME_AS         reduce using rule 63 (exp -> term moreTerms .)
    COMMA           reduce using rule 63 (exp -> term moreTerms .)
    RPAREN          reduce using rule 63 (exp -> term moreTerms .)
    NEWLINE         reduce using rule 63 (exp -> term moreTerms .)
    COLON           reduce using rule 63 (exp -> term moreTerms .)


state 81

    (65) moreTerms -> PLUS . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 103
    funct                          shift and go to state 53
    factor                         shift and go to state 56
    cvar                           shift and go to state 52

state 82

    (66) moreTerms -> MINUS . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 104
    funct                          shift and go to state 53
    factor                         shift and go to state 56
    cvar                           shift and go to state 52

state 83

    (64) moreTerms -> empty .

    GREATER_THAN    reduce using rule 64 (moreTerms -> empty .)
    LESS_THAN       reduce using rule 64 (moreTerms -> empty .)
    LESS_EQUAL_THAN reduce using rule 64 (moreTerms -> empty .)
    GREATER_EQUAL_THAN reduce using rule 64 (moreTerms -> empty .)
    NOT_EQUAL_THAN  reduce using rule 64 (moreTerms -> empty .)
    SAME_AS         reduce using rule 64 (moreTerms -> empty .)
    NEWLINE         reduce using rule 64 (moreTerms -> empty .)
    RPAREN          reduce using rule 64 (moreTerms -> empty .)
    COMMA           reduce using rule 64 (moreTerms -> empty .)
    COLON           reduce using rule 64 (moreTerms -> empty .)


state 84

    (56) expression -> exp compareToken . exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 105
    factor                         shift and go to state 56
    cvar                           shift and go to state 52

state 85

    (60) compareToken -> GREATER_EQUAL_THAN .

    LPAREN          reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    ID              reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    C_BOOL          reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    C_INT           reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    C_FLOAT         reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    C_CHAR          reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)
    C_STRING        reduce using rule 60 (compareToken -> GREATER_EQUAL_THAN .)


state 86

    (59) compareToken -> LESS_EQUAL_THAN .

    LPAREN          reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    ID              reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    C_BOOL          reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    C_INT           reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    C_FLOAT         reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    C_CHAR          reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)
    C_STRING        reduce using rule 59 (compareToken -> LESS_EQUAL_THAN .)


state 87

    (62) compareToken -> SAME_AS .

    LPAREN          reduce using rule 62 (compareToken -> SAME_AS .)
    ID              reduce using rule 62 (compareToken -> SAME_AS .)
    C_BOOL          reduce using rule 62 (compareToken -> SAME_AS .)
    C_INT           reduce using rule 62 (compareToken -> SAME_AS .)
    C_FLOAT         reduce using rule 62 (compareToken -> SAME_AS .)
    C_CHAR          reduce using rule 62 (compareToken -> SAME_AS .)
    C_STRING        reduce using rule 62 (compareToken -> SAME_AS .)


state 88

    (61) compareToken -> NOT_EQUAL_THAN .

    LPAREN          reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    ID              reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    C_BOOL          reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    C_INT           reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    C_FLOAT         reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    C_CHAR          reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)
    C_STRING        reduce using rule 61 (compareToken -> NOT_EQUAL_THAN .)


state 89

    (57) compareToken -> GREATER_THAN .

    LPAREN          reduce using rule 57 (compareToken -> GREATER_THAN .)
    ID              reduce using rule 57 (compareToken -> GREATER_THAN .)
    C_BOOL          reduce using rule 57 (compareToken -> GREATER_THAN .)
    C_INT           reduce using rule 57 (compareToken -> GREATER_THAN .)
    C_FLOAT         reduce using rule 57 (compareToken -> GREATER_THAN .)
    C_CHAR          reduce using rule 57 (compareToken -> GREATER_THAN .)
    C_STRING        reduce using rule 57 (compareToken -> GREATER_THAN .)


state 90

    (58) compareToken -> LESS_THAN .

    LPAREN          reduce using rule 58 (compareToken -> LESS_THAN .)
    ID              reduce using rule 58 (compareToken -> LESS_THAN .)
    C_BOOL          reduce using rule 58 (compareToken -> LESS_THAN .)
    C_INT           reduce using rule 58 (compareToken -> LESS_THAN .)
    C_FLOAT         reduce using rule 58 (compareToken -> LESS_THAN .)
    C_CHAR          reduce using rule 58 (compareToken -> LESS_THAN .)
    C_STRING        reduce using rule 58 (compareToken -> LESS_THAN .)


state 91

    (35) assign -> idList EQUAL expression NEWLINE . assign
    (35) assign -> . idList EQUAL expression NEWLINE assign
    (36) assign -> . empty
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList
    (2) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 25
    BOOL            reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    CHAR            reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    IMAGE           reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    TAB             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! ID              [ reduce using rule 2 (empty -> .) ]

    idList                         shift and go to state 27
    empty                          shift and go to state 26
    assign                         shift and go to state 106

state 92

    (26) functions -> DEF tipo ID . LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo ID . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 107


state 93

    (30) functions -> DEF VOID MAIN . LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID MAIN . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 108


state 94

    (28) functions -> DEF VOID ID . LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID ID . LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions

    LPAREN          shift and go to state 109


state 95

    (12) pwmDeclaration -> PWM pinList NEWLINE .

    BOOL            reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    INT             reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    FLOAT           reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    CHAR            reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    STRING          reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    IMAGE           reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    ID              reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    DEF             reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)
    $end            reduce using rule 12 (pwmDeclaration -> PWM pinList NEWLINE .)


state 96

    (14) pinList -> C_INT COLON ID COMMA . pinList
    (13) pinList -> . C_INT COLON ID
    (14) pinList -> . C_INT COLON ID COMMA pinList

    C_INT           shift and go to state 35

    pinList                        shift and go to state 110

state 97

    (69) moreFactors -> DIVIDE factor . moreFactors
    (68) moreFactors -> . empty
    (69) moreFactors -> . DIVIDE factor moreFactors
    (70) moreFactors -> . TIMES factor moreFactors
    (71) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 74
    TIMES           shift and go to state 75
    MOD             shift and go to state 77
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 111
    empty                          shift and go to state 76

state 98

    (70) moreFactors -> TIMES factor . moreFactors
    (68) moreFactors -> . empty
    (69) moreFactors -> . DIVIDE factor moreFactors
    (70) moreFactors -> . TIMES factor moreFactors
    (71) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 74
    TIMES           shift and go to state 75
    MOD             shift and go to state 77
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 112
    empty                          shift and go to state 76

state 99

    (71) moreFactors -> MOD factor . moreFactors
    (68) moreFactors -> . empty
    (69) moreFactors -> . DIVIDE factor moreFactors
    (70) moreFactors -> . TIMES factor moreFactors
    (71) moreFactors -> . MOD factor moreFactors
    (2) empty -> .

    DIVIDE          shift and go to state 74
    TIMES           shift and go to state 75
    MOD             shift and go to state 77
    PLUS            reduce using rule 2 (empty -> .)
    MINUS           reduce using rule 2 (empty -> .)
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreFactors                    shift and go to state 113
    empty                          shift and go to state 76

state 100

    (72) factor -> LPAREN expression RPAREN .

    DIVIDE          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    LESS_EQUAL_THAN reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    SAME_AS         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 72 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 72 (factor -> LPAREN expression RPAREN .)


state 101

    (51) funct -> ID LPAREN RPAREN .

    DIVIDE          reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    MOD             reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    LESS_EQUAL_THAN reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    SAME_AS         reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 51 (funct -> ID LPAREN RPAREN .)
    COLON           reduce using rule 51 (funct -> ID LPAREN RPAREN .)


state 102

    (52) funct -> ID LPAREN expression . expressionList RPAREN
    (53) expressionList -> . empty
    (54) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 115
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 114
    empty                          shift and go to state 116

state 103

    (65) moreTerms -> PLUS term . moreTerms
    (64) moreTerms -> . empty
    (65) moreTerms -> . PLUS term moreTerms
    (66) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 117
    empty                          shift and go to state 83

state 104

    (66) moreTerms -> MINUS term . moreTerms
    (64) moreTerms -> . empty
    (65) moreTerms -> . PLUS term moreTerms
    (66) moreTerms -> . MINUS term moreTerms
    (2) empty -> .

    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    GREATER_THAN    reduce using rule 2 (empty -> .)
    LESS_THAN       reduce using rule 2 (empty -> .)
    LESS_EQUAL_THAN reduce using rule 2 (empty -> .)
    GREATER_EQUAL_THAN reduce using rule 2 (empty -> .)
    NOT_EQUAL_THAN  reduce using rule 2 (empty -> .)
    SAME_AS         reduce using rule 2 (empty -> .)
    NEWLINE         reduce using rule 2 (empty -> .)
    RPAREN          reduce using rule 2 (empty -> .)
    COMMA           reduce using rule 2 (empty -> .)
    COLON           reduce using rule 2 (empty -> .)

    moreTerms                      shift and go to state 118
    empty                          shift and go to state 83

state 105

    (56) expression -> exp compareToken exp .

    RPAREN          reduce using rule 56 (expression -> exp compareToken exp .)
    NEWLINE         reduce using rule 56 (expression -> exp compareToken exp .)
    COLON           reduce using rule 56 (expression -> exp compareToken exp .)
    COMMA           reduce using rule 56 (expression -> exp compareToken exp .)


state 106

    (35) assign -> idList EQUAL expression NEWLINE assign .

    TAB             reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    DEF             reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    $end            reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    WHILE           reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    ELSE            reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    BOOL            reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    INT             reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    FLOAT           reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    CHAR            reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    STRING          reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    IMAGE           reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)
    ID              reduce using rule 35 (assign -> idList EQUAL expression NEWLINE assign .)


state 107

    (26) functions -> DEF tipo ID LPAREN . RPAREN COLON NEWLINE block functions
    (27) functions -> DEF tipo ID LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE

    RPAREN          shift and go to state 119
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 120

state 108

    (30) functions -> DEF VOID MAIN LPAREN . RPAREN COLON NEWLINE block functions
    (31) functions -> DEF VOID MAIN LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE

    RPAREN          shift and go to state 121
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 122

state 109

    (28) functions -> DEF VOID ID LPAREN . RPAREN COLON NEWLINE block functions
    (29) functions -> DEF VOID ID LPAREN . tipo ID parameterList RPAREN COLON NEWLINE block functions
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE

    RPAREN          shift and go to state 123
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 124

state 110

    (14) pinList -> C_INT COLON ID COMMA pinList .

    NEWLINE         reduce using rule 14 (pinList -> C_INT COLON ID COMMA pinList .)


state 111

    (69) moreFactors -> DIVIDE factor moreFactors .

    PLUS            reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    MINUS           reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_THAN    reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_THAN       reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    SAME_AS         reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    NEWLINE         reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    RPAREN          reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    COMMA           reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)
    COLON           reduce using rule 69 (moreFactors -> DIVIDE factor moreFactors .)


state 112

    (70) moreFactors -> TIMES factor moreFactors .

    PLUS            reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    MINUS           reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    GREATER_THAN    reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    LESS_THAN       reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    SAME_AS         reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    NEWLINE         reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    RPAREN          reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    COMMA           reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)
    COLON           reduce using rule 70 (moreFactors -> TIMES factor moreFactors .)


state 113

    (71) moreFactors -> MOD factor moreFactors .

    PLUS            reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    MINUS           reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    GREATER_THAN    reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    LESS_THAN       reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    LESS_EQUAL_THAN reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    GREATER_EQUAL_THAN reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    NOT_EQUAL_THAN  reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    SAME_AS         reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    NEWLINE         reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    RPAREN          reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    COMMA           reduce using rule 71 (moreFactors -> MOD factor moreFactors .)
    COLON           reduce using rule 71 (moreFactors -> MOD factor moreFactors .)


state 114

    (52) funct -> ID LPAREN expression expressionList . RPAREN

    RPAREN          shift and go to state 125


state 115

    (54) expressionList -> COMMA . expression expressionList
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 126

state 116

    (53) expressionList -> empty .

    RPAREN          reduce using rule 53 (expressionList -> empty .)


state 117

    (65) moreTerms -> PLUS term moreTerms .

    GREATER_THAN    reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    LESS_THAN       reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    SAME_AS         reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    NEWLINE         reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    RPAREN          reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    COMMA           reduce using rule 65 (moreTerms -> PLUS term moreTerms .)
    COLON           reduce using rule 65 (moreTerms -> PLUS term moreTerms .)


state 118

    (66) moreTerms -> MINUS term moreTerms .

    GREATER_THAN    reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    LESS_THAN       reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    LESS_EQUAL_THAN reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    GREATER_EQUAL_THAN reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    NOT_EQUAL_THAN  reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    SAME_AS         reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    NEWLINE         reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    RPAREN          reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    COMMA           reduce using rule 66 (moreTerms -> MINUS term moreTerms .)
    COLON           reduce using rule 66 (moreTerms -> MINUS term moreTerms .)


state 119

    (26) functions -> DEF tipo ID LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 127


state 120

    (27) functions -> DEF tipo ID LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 128


state 121

    (30) functions -> DEF VOID MAIN LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 129


state 122

    (31) functions -> DEF VOID MAIN LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 130


state 123

    (28) functions -> DEF VOID ID LPAREN RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 131


state 124

    (29) functions -> DEF VOID ID LPAREN tipo . ID parameterList RPAREN COLON NEWLINE block functions

    ID              shift and go to state 132


state 125

    (52) funct -> ID LPAREN expression expressionList RPAREN .

    DIVIDE          reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    TIMES           reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    MOD             reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    PLUS            reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    MINUS           reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_THAN    reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_THAN       reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    LESS_EQUAL_THAN reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    GREATER_EQUAL_THAN reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    NOT_EQUAL_THAN  reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    SAME_AS         reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    COMMA           reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    RPAREN          reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    NEWLINE         reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)
    COLON           reduce using rule 52 (funct -> ID LPAREN expression expressionList RPAREN .)


state 126

    (54) expressionList -> COMMA expression . expressionList
    (53) expressionList -> . empty
    (54) expressionList -> . COMMA expression expressionList
    (2) empty -> .

    COMMA           shift and go to state 115
    RPAREN          reduce using rule 2 (empty -> .)

    expressionList                 shift and go to state 133
    empty                          shift and go to state 116

state 127

    (26) functions -> DEF tipo ID LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 134


state 128

    (27) functions -> DEF tipo ID LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (33) parameterList -> . empty
    (34) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 135
    empty                          shift and go to state 136

state 129

    (30) functions -> DEF VOID MAIN LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 138


state 130

    (31) functions -> DEF VOID MAIN LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (33) parameterList -> . empty
    (34) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 139
    empty                          shift and go to state 136

state 131

    (28) functions -> DEF VOID ID LPAREN RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 140


state 132

    (29) functions -> DEF VOID ID LPAREN tipo ID . parameterList RPAREN COLON NEWLINE block functions
    (33) parameterList -> . empty
    (34) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 141
    empty                          shift and go to state 136

state 133

    (54) expressionList -> COMMA expression expressionList .

    RPAREN          reduce using rule 54 (expressionList -> COMMA expression expressionList .)


state 134

    (26) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 144
    empty                          shift and go to state 143

state 135

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 145


state 136

    (33) parameterList -> empty .

    RPAREN          reduce using rule 33 (parameterList -> empty .)


state 137

    (34) parameterList -> COMMA . tipo ID parameterList
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE

    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14

    tipo                           shift and go to state 146

state 138

    (30) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 143
    block                          shift and go to state 147

state 139

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 148


state 140

    (28) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    empty                          shift and go to state 143
    block                          shift and go to state 149

state 141

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList . RPAREN COLON NEWLINE block functions

    RPAREN          shift and go to state 150


state 142

    (38) block -> TAB . statement moreStatements
    (41) statement -> . vars
    (42) statement -> . assign
    (43) statement -> . condition
    (44) statement -> . cycle
    (45) statement -> . funct NEWLINE
    (46) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . tipo assign vars
    (17) vars -> . empty
    (35) assign -> . idList EQUAL expression NEWLINE assign
    (36) assign -> . empty
    (47) condition -> . IF expression COLON NEWLINE block
    (48) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (49) cycle -> . WHILE expression COLON NEWLINE block
    (50) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE
    (2) empty -> .
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 152
    IF              shift and go to state 161
    WHILE           shift and go to state 155
    DO              shift and go to state 151
    ID              shift and go to state 159
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 153
    funct                          shift and go to state 154
    empty                          shift and go to state 157
    statement                      shift and go to state 158
    idList                         shift and go to state 27
    assign                         shift and go to state 162
    condition                      shift and go to state 160
    cycle                          shift and go to state 156

state 143

    (37) block -> empty .

    TAB             reduce using rule 37 (block -> empty .)
    DEF             reduce using rule 37 (block -> empty .)
    $end            reduce using rule 37 (block -> empty .)
    WHILE           reduce using rule 37 (block -> empty .)
    ELSE            reduce using rule 37 (block -> empty .)


state 144

    (26) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 163
    empty                          shift and go to state 41

state 145

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 164


state 146

    (34) parameterList -> COMMA tipo . ID parameterList

    ID              shift and go to state 165


state 147

    (30) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 166
    empty                          shift and go to state 41

state 148

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 167


state 149

    (28) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 168
    empty                          shift and go to state 41

state 150

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN . COLON NEWLINE block functions

    COLON           shift and go to state 169


state 151

    (50) cycle -> DO . COLON NEWLINE block WHILE expression NEWLINE

    COLON           shift and go to state 170


state 152

    (46) statement -> RETURN . expression NEWLINE
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 171

state 153

    (41) statement -> vars .

    TAB             reduce using rule 41 (statement -> vars .)
    DEF             reduce using rule 41 (statement -> vars .)
    $end            reduce using rule 41 (statement -> vars .)
    WHILE           reduce using rule 41 (statement -> vars .)
    ELSE            reduce using rule 41 (statement -> vars .)


state 154

    (45) statement -> funct . NEWLINE

    NEWLINE         shift and go to state 172


state 155

    (49) cycle -> WHILE . expression COLON NEWLINE block
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 173

state 156

    (44) statement -> cycle .

    TAB             reduce using rule 44 (statement -> cycle .)
    DEF             reduce using rule 44 (statement -> cycle .)
    $end            reduce using rule 44 (statement -> cycle .)
    WHILE           reduce using rule 44 (statement -> cycle .)
    ELSE            reduce using rule 44 (statement -> cycle .)


state 157

    (17) vars -> empty .
    (36) assign -> empty .

  ! reduce/reduce conflict for TAB resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for DEF resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (vars -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 17 (vars -> empty .)
    TAB             reduce using rule 17 (vars -> empty .)
    DEF             reduce using rule 17 (vars -> empty .)
    $end            reduce using rule 17 (vars -> empty .)
    WHILE           reduce using rule 17 (vars -> empty .)
    ELSE            reduce using rule 17 (vars -> empty .)

  ! TAB             [ reduce using rule 36 (assign -> empty .) ]
  ! DEF             [ reduce using rule 36 (assign -> empty .) ]
  ! $end            [ reduce using rule 36 (assign -> empty .) ]
  ! WHILE           [ reduce using rule 36 (assign -> empty .) ]
  ! ELSE            [ reduce using rule 36 (assign -> empty .) ]


state 158

    (38) block -> TAB statement . moreStatements
    (39) moreStatements -> . empty
    (40) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 175
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 174
    moreStatements                 shift and go to state 176

state 159

    (51) funct -> ID . LPAREN RPAREN
    (52) funct -> ID . LPAREN expression expressionList RPAREN
    (18) idList -> ID .
    (19) idList -> ID . COMMA idList

    LPAREN          shift and go to state 79
    EQUAL           reduce using rule 18 (idList -> ID .)
    COMMA           shift and go to state 39


state 160

    (43) statement -> condition .

    TAB             reduce using rule 43 (statement -> condition .)
    DEF             reduce using rule 43 (statement -> condition .)
    $end            reduce using rule 43 (statement -> condition .)
    WHILE           reduce using rule 43 (statement -> condition .)
    ELSE            reduce using rule 43 (statement -> condition .)


state 161

    (47) condition -> IF . expression COLON NEWLINE block
    (48) condition -> IF . expression COLON NEWLINE block ELSE COLON NEWLINE block
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 177

state 162

    (42) statement -> assign .

    TAB             reduce using rule 42 (statement -> assign .)
    DEF             reduce using rule 42 (statement -> assign .)
    $end            reduce using rule 42 (statement -> assign .)
    WHILE           reduce using rule 42 (statement -> assign .)
    ELSE            reduce using rule 42 (statement -> assign .)


state 163

    (26) functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 26 (functions -> DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions .)


state 164

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 178


state 165

    (34) parameterList -> COMMA tipo ID . parameterList
    (33) parameterList -> . empty
    (34) parameterList -> . COMMA tipo ID parameterList
    (2) empty -> .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 2 (empty -> .)

    parameterList                  shift and go to state 179
    empty                          shift and go to state 136

state 166

    (30) functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 30 (functions -> DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions .)


state 167

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 180


state 168

    (28) functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 28 (functions -> DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions .)


state 169

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON . NEWLINE block functions

    NEWLINE         shift and go to state 181


state 170

    (50) cycle -> DO COLON . NEWLINE block WHILE expression NEWLINE

    NEWLINE         shift and go to state 182


state 171

    (46) statement -> RETURN expression . NEWLINE

    NEWLINE         shift and go to state 183


state 172

    (45) statement -> funct NEWLINE .

    TAB             reduce using rule 45 (statement -> funct NEWLINE .)
    DEF             reduce using rule 45 (statement -> funct NEWLINE .)
    $end            reduce using rule 45 (statement -> funct NEWLINE .)
    WHILE           reduce using rule 45 (statement -> funct NEWLINE .)
    ELSE            reduce using rule 45 (statement -> funct NEWLINE .)


state 173

    (49) cycle -> WHILE expression . COLON NEWLINE block

    COLON           shift and go to state 184


state 174

    (39) moreStatements -> empty .

    TAB             reduce using rule 39 (moreStatements -> empty .)
    DEF             reduce using rule 39 (moreStatements -> empty .)
    $end            reduce using rule 39 (moreStatements -> empty .)
    WHILE           reduce using rule 39 (moreStatements -> empty .)
    ELSE            reduce using rule 39 (moreStatements -> empty .)


state 175

    (40) moreStatements -> TAB . statement moreStatements
    (41) statement -> . vars
    (42) statement -> . assign
    (43) statement -> . condition
    (44) statement -> . cycle
    (45) statement -> . funct NEWLINE
    (46) statement -> . RETURN expression NEWLINE
    (15) vars -> . tipo idList NEWLINE vars
    (16) vars -> . tipo assign vars
    (17) vars -> . empty
    (35) assign -> . idList EQUAL expression NEWLINE assign
    (36) assign -> . empty
    (47) condition -> . IF expression COLON NEWLINE block
    (48) condition -> . IF expression COLON NEWLINE block ELSE COLON NEWLINE block
    (49) cycle -> . WHILE expression COLON NEWLINE block
    (50) cycle -> . DO COLON NEWLINE block WHILE expression NEWLINE
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN
    (20) tipo -> . BOOL
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (24) tipo -> . STRING
    (25) tipo -> . IMAGE
    (2) empty -> .
    (18) idList -> . ID
    (19) idList -> . ID COMMA idList

  ! shift/reduce conflict for WHILE resolved as shift
    RETURN          shift and go to state 152
    IF              shift and go to state 161
    WHILE           shift and go to state 155
    DO              shift and go to state 151
    ID              shift and go to state 159
    BOOL            shift and go to state 15
    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 9
    STRING          shift and go to state 16
    IMAGE           shift and go to state 14
    TAB             reduce using rule 2 (empty -> .)
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! WHILE           [ reduce using rule 2 (empty -> .) ]

    tipo                           shift and go to state 11
    vars                           shift and go to state 153
    funct                          shift and go to state 154
    empty                          shift and go to state 157
    statement                      shift and go to state 185
    idList                         shift and go to state 27
    assign                         shift and go to state 162
    condition                      shift and go to state 160
    cycle                          shift and go to state 156

state 176

    (38) block -> TAB statement moreStatements .

    TAB             reduce using rule 38 (block -> TAB statement moreStatements .)
    DEF             reduce using rule 38 (block -> TAB statement moreStatements .)
    $end            reduce using rule 38 (block -> TAB statement moreStatements .)
    WHILE           reduce using rule 38 (block -> TAB statement moreStatements .)
    ELSE            reduce using rule 38 (block -> TAB statement moreStatements .)


state 177

    (47) condition -> IF expression . COLON NEWLINE block
    (48) condition -> IF expression . COLON NEWLINE block ELSE COLON NEWLINE block

    COLON           shift and go to state 186


state 178

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 187
    empty                          shift and go to state 143

state 179

    (34) parameterList -> COMMA tipo ID parameterList .

    RPAREN          reduce using rule 34 (parameterList -> COMMA tipo ID parameterList .)


state 180

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 188
    empty                          shift and go to state 143

state 181

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE . block functions
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    block                          shift and go to state 189
    empty                          shift and go to state 143

state 182

    (50) cycle -> DO COLON NEWLINE . block WHILE expression NEWLINE
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

    TAB             shift and go to state 142
    WHILE           reduce using rule 2 (empty -> .)

    empty                          shift and go to state 143
    block                          shift and go to state 190

state 183

    (46) statement -> RETURN expression NEWLINE .

    TAB             reduce using rule 46 (statement -> RETURN expression NEWLINE .)
    DEF             reduce using rule 46 (statement -> RETURN expression NEWLINE .)
    $end            reduce using rule 46 (statement -> RETURN expression NEWLINE .)
    WHILE           reduce using rule 46 (statement -> RETURN expression NEWLINE .)
    ELSE            reduce using rule 46 (statement -> RETURN expression NEWLINE .)


state 184

    (49) cycle -> WHILE expression COLON . NEWLINE block

    NEWLINE         shift and go to state 191


state 185

    (40) moreStatements -> TAB statement . moreStatements
    (39) moreStatements -> . empty
    (40) moreStatements -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 175
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 174
    moreStatements                 shift and go to state 192

state 186

    (47) condition -> IF expression COLON . NEWLINE block
    (48) condition -> IF expression COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 193


state 187

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 194
    empty                          shift and go to state 41

state 188

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 195
    empty                          shift and go to state 41

state 189

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block . functions
    (26) functions -> . DEF tipo ID LPAREN RPAREN COLON NEWLINE block functions
    (27) functions -> . DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (28) functions -> . DEF VOID ID LPAREN RPAREN COLON NEWLINE block functions
    (29) functions -> . DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (30) functions -> . DEF VOID MAIN LPAREN RPAREN COLON NEWLINE block functions
    (31) functions -> . DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions
    (32) functions -> . empty
    (2) empty -> .

    DEF             shift and go to state 42
    $end            reduce using rule 2 (empty -> .)

    functions                      shift and go to state 196
    empty                          shift and go to state 41

state 190

    (50) cycle -> DO COLON NEWLINE block . WHILE expression NEWLINE

    WHILE           shift and go to state 197


state 191

    (49) cycle -> WHILE expression COLON NEWLINE . block
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 143
    block                          shift and go to state 198

state 192

    (40) moreStatements -> TAB statement moreStatements .

    TAB             reduce using rule 40 (moreStatements -> TAB statement moreStatements .)
    DEF             reduce using rule 40 (moreStatements -> TAB statement moreStatements .)
    $end            reduce using rule 40 (moreStatements -> TAB statement moreStatements .)
    WHILE           reduce using rule 40 (moreStatements -> TAB statement moreStatements .)
    ELSE            reduce using rule 40 (moreStatements -> TAB statement moreStatements .)


state 193

    (47) condition -> IF expression COLON NEWLINE . block
    (48) condition -> IF expression COLON NEWLINE . block ELSE COLON NEWLINE block
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 143
    block                          shift and go to state 199

state 194

    (27) functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 27 (functions -> DEF tipo ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 195

    (31) functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 31 (functions -> DEF VOID MAIN LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 196

    (29) functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .

    $end            reduce using rule 29 (functions -> DEF VOID ID LPAREN tipo ID parameterList RPAREN COLON NEWLINE block functions .)


state 197

    (50) cycle -> DO COLON NEWLINE block WHILE . expression NEWLINE
    (55) expression -> . exp
    (56) expression -> . exp compareToken exp
    (63) exp -> . term moreTerms
    (67) term -> . factor moreFactors
    (72) factor -> . LPAREN expression RPAREN
    (73) factor -> . cvar
    (74) factor -> . funct
    (75) cvar -> . ID
    (76) cvar -> . C_BOOL
    (77) cvar -> . C_INT
    (78) cvar -> . C_FLOAT
    (79) cvar -> . C_CHAR
    (80) cvar -> . C_STRING
    (51) funct -> . ID LPAREN RPAREN
    (52) funct -> . ID LPAREN expression expressionList RPAREN

    LPAREN          shift and go to state 57
    ID              shift and go to state 59
    C_BOOL          shift and go to state 55
    C_INT           shift and go to state 58
    C_FLOAT         shift and go to state 54
    C_CHAR          shift and go to state 62
    C_STRING        shift and go to state 60

    term                           shift and go to state 61
    funct                          shift and go to state 53
    exp                            shift and go to state 63
    factor                         shift and go to state 56
    cvar                           shift and go to state 52
    expression                     shift and go to state 200

state 198

    (49) cycle -> WHILE expression COLON NEWLINE block .

    TAB             reduce using rule 49 (cycle -> WHILE expression COLON NEWLINE block .)
    DEF             reduce using rule 49 (cycle -> WHILE expression COLON NEWLINE block .)
    $end            reduce using rule 49 (cycle -> WHILE expression COLON NEWLINE block .)
    WHILE           reduce using rule 49 (cycle -> WHILE expression COLON NEWLINE block .)
    ELSE            reduce using rule 49 (cycle -> WHILE expression COLON NEWLINE block .)


state 199

    (47) condition -> IF expression COLON NEWLINE block .
    (48) condition -> IF expression COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    TAB             reduce using rule 47 (condition -> IF expression COLON NEWLINE block .)
    DEF             reduce using rule 47 (condition -> IF expression COLON NEWLINE block .)
    $end            reduce using rule 47 (condition -> IF expression COLON NEWLINE block .)
    WHILE           reduce using rule 47 (condition -> IF expression COLON NEWLINE block .)
    ELSE            shift and go to state 201

  ! ELSE            [ reduce using rule 47 (condition -> IF expression COLON NEWLINE block .) ]


state 200

    (50) cycle -> DO COLON NEWLINE block WHILE expression . NEWLINE

    NEWLINE         shift and go to state 202


state 201

    (48) condition -> IF expression COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 203


state 202

    (50) cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .

    TAB             reduce using rule 50 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    DEF             reduce using rule 50 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    $end            reduce using rule 50 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    WHILE           reduce using rule 50 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)
    ELSE            reduce using rule 50 (cycle -> DO COLON NEWLINE block WHILE expression NEWLINE .)


state 203

    (48) condition -> IF expression COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 204


state 204

    (48) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE . block
    (37) block -> . empty
    (38) block -> . TAB statement moreStatements
    (2) empty -> .

  ! shift/reduce conflict for TAB resolved as shift
    TAB             shift and go to state 142
    DEF             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    ELSE            reduce using rule 2 (empty -> .)

  ! TAB             [ reduce using rule 2 (empty -> .) ]

    empty                          shift and go to state 143
    block                          shift and go to state 205

state 205

    (48) condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .

    TAB             reduce using rule 48 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    DEF             reduce using rule 48 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 48 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    WHILE           reduce using rule 48 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 48 (condition -> IF expression COLON NEWLINE block ELSE COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 11 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 142 resolved as shift
WARNING: shift/reduce conflict for TAB in state 158 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for TAB in state 185 resolved as shift
WARNING: shift/reduce conflict for TAB in state 191 resolved as shift
WARNING: shift/reduce conflict for TAB in state 193 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 199 resolved as shift
WARNING: shift/reduce conflict for TAB in state 204 resolved as shift
WARNING: reduce/reduce conflict in state 157 resolved using rule (vars -> empty)
WARNING: rejected rule (assign -> empty) in state 157
